{"ast":null,"code":"'use strict';\n\nconst _require = require('./utils'),\n      cleanCid = _require.cleanCid;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').BlockService} config.blockService\n * @param {import('.').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  blockService,\n  preload\n}) => {\n  /**\n  /**\n   * Print information of a raw IPFS block.\n   *\n   * @param {CID} cid - CID of the block to get a stats for.\n   * @param {StatOptions & AbortOptions} options\n   * @returns {Promise<Stat>}\n   * @example\n   * ```js\n   * const cid = CID.from('QmQULBtTjNcMwMr4VMNknnVv3RpytrLSdgpvMcTnfNhrBJ')\n   * const stats = await ipfs.block.stat(cid)\n   * console.log(stats.cid.toString())\n   * // Logs: QmQULBtTjNcMwMr4VMNknnVv3RpytrLSdgpvMcTnfNhrBJ\n   * console.log(stat.size)\n   * // Logs: 3739\n   * ```\n   */\n  async function stat(cid, options = {}) {\n    cid = cleanCid(cid);\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    const block = await blockService.get(cid);\n    return {\n      cid,\n      size: block.data.length\n    };\n  }\n\n  return withTimeoutOption(stat);\n};\n/**\n * @typedef {Object} Stat\n * An object containing the block's info\n * @property {CID} cid\n * @property {number} size\n *\n * @typedef {Object} StatOptions\n * @property {boolean} [preload]\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('.').CID} CID\n */","map":null,"metadata":{},"sourceType":"script"}