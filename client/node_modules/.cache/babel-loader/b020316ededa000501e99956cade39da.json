{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageDeliveries = exports.DeliveryRecordStatus = void 0;\n\nconst constants_1 = require(\"../constants\");\n\nconst denque_1 = __importDefault(require(\"denque\"));\n\nconst utils_1 = require(\"../utils\");\n\nvar DeliveryRecordStatus;\n\n(function (DeliveryRecordStatus) {\n  /**\n   * we don't know (yet) if the message is valid\n   */\n  DeliveryRecordStatus[DeliveryRecordStatus[\"unknown\"] = 0] = \"unknown\";\n  /**\n   * we know the message is valid\n   */\n\n  DeliveryRecordStatus[DeliveryRecordStatus[\"valid\"] = 1] = \"valid\";\n  /**\n   * we know the message is invalid\n   */\n\n  DeliveryRecordStatus[DeliveryRecordStatus[\"invalid\"] = 2] = \"invalid\";\n  /**\n   * we were instructed by the validator to ignore the message\n   */\n\n  DeliveryRecordStatus[DeliveryRecordStatus[\"ignored\"] = 3] = \"ignored\";\n})(DeliveryRecordStatus = exports.DeliveryRecordStatus || (exports.DeliveryRecordStatus = {}));\n/**\n * Map of message ID to DeliveryRecord\n *\n * Maintains an internal queue for efficient gc of old messages\n */\n\n\nclass MessageDeliveries {\n  constructor() {\n    this.records = new Map();\n    this.queue = new denque_1.default();\n  }\n\n  ensureRecord(msgId) {\n    const msgIdStr = utils_1.messageIdToString(msgId);\n    let drec = this.records.get(msgIdStr);\n\n    if (drec) {\n      return drec;\n    } // record doesn't exist yet\n    // create record\n\n\n    drec = {\n      status: DeliveryRecordStatus.unknown,\n      firstSeen: Date.now(),\n      validated: 0,\n      peers: new Set()\n    };\n    this.records.set(msgIdStr, drec); // and add msgId to the queue\n\n    const entry = {\n      msgId: msgIdStr,\n      expire: Date.now() + constants_1.TimeCacheDuration\n    };\n    this.queue.push(entry);\n    return drec;\n  }\n\n  gc() {\n    const now = Date.now(); // queue is sorted by expiry time\n    // remove expired messages, remove from queue until first un-expired message found\n\n    let head = this.queue.peekFront();\n\n    while (head && head.expire < now) {\n      this.records.delete(head.msgId);\n      this.queue.shift();\n      head = this.queue.peekFront();\n    }\n  }\n\n  clear() {\n    this.records.clear();\n    this.queue.clear();\n  }\n\n}\n\nexports.MessageDeliveries = MessageDeliveries;","map":null,"metadata":{},"sourceType":"script"}