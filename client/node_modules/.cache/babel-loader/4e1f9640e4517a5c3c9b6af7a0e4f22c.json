{"ast":null,"code":"'use strict';\n\nconst errCode = require('err-code');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst browserStreamToIt = require('browser-readablestream-to-it');\n\nconst blobToIt = require('blob-to-it');\n\nconst itPeekable = require('it-peekable');\n\nconst all = require('it-all');\n\nconst map = require('it-map');\n\nconst _require = require('./utils'),\n      isBytes = _require.isBytes,\n      isReadableStream = _require.isReadableStream,\n      isBlob = _require.isBlob;\n/**\n * @param {import('./normalise-input').ToContent} input\n * @returns {AsyncIterable<Uint8Array>}\n */\n\n\nasync function* toAsyncIterable(input) {\n  // Bytes | String\n  if (isBytes(input)) {\n    yield toBytes(input);\n    return;\n  }\n\n  if (typeof input === 'string' || input instanceof String) {\n    yield toBytes(input.toString());\n    return;\n  } // Blob\n\n\n  if (isBlob(input)) {\n    yield* blobToIt(input);\n    return;\n  } // Browser stream\n\n\n  if (isReadableStream(input)) {\n    input = browserStreamToIt(input);\n  } // (Async)Iterator<?>\n\n\n  if (input[Symbol.iterator] || input[Symbol.asyncIterator]) {\n    /** @type {any} peekable */\n    const peekable = itPeekable(input);\n    /** @type {any} value */\n\n    const _ref = await peekable.peek(),\n          value = _ref.value,\n          done = _ref.done;\n\n    if (done) {\n      // make sure empty iterators result in empty files\n      yield* [];\n      return;\n    }\n\n    peekable.push(value); // (Async)Iterable<Number>\n\n    if (Number.isInteger(value)) {\n      yield Uint8Array.from((await all(peekable)));\n      return;\n    } // (Async)Iterable<Bytes|String>\n\n\n    if (isBytes(value) || typeof value === 'string' || value instanceof String) {\n      yield* map(peekable, toBytes);\n      return;\n    }\n  }\n\n  throw errCode(new Error(\"Unexpected input: \".concat(input)), 'ERR_UNEXPECTED_INPUT');\n}\n/**\n *\n * @param {ArrayBuffer | ArrayBufferView | string | InstanceType<typeof window.String> | number[]} chunk\n * @returns {Uint8Array}\n */\n\n\nfunction toBytes(chunk) {\n  if (chunk instanceof Uint8Array) {\n    return chunk;\n  }\n\n  if (ArrayBuffer.isView(chunk)) {\n    return new Uint8Array(chunk.buffer, chunk.byteOffset, chunk.byteLength);\n  }\n\n  if (chunk instanceof ArrayBuffer) {\n    return new Uint8Array(chunk);\n  }\n\n  if (Array.isArray(chunk)) {\n    return Uint8Array.from(chunk);\n  }\n\n  return uint8ArrayFromString(chunk.toString());\n}\n\nmodule.exports = toAsyncIterable;","map":null,"metadata":{},"sourceType":"script"}