{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').IPLD} config.ipld\n * @param {import('.').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  const get = require('./get')({\n    ipld,\n    preload\n  });\n  /**\n   * Returns stats about an Object\n   *\n   * @param {CID} multihash\n   * @param {StatOptions & AbortOptions} options\n   * @returns {Promise<Stat>}\n   */\n\n\n  async function stat(multihash, options = {}) {\n    const node = await get(multihash, options);\n    const serialized = dagPB.util.serialize(node);\n    const cid = await dagPB.util.cid(serialized, {\n      cidVersion: 0\n    });\n    const blockSize = serialized.length;\n    const linkLength = node.Links.reduce((a, l) => a + l.Tsize, 0);\n    return {\n      Hash: cid.toBaseEncodedString(),\n      NumLinks: node.Links.length,\n      BlockSize: blockSize,\n      LinksSize: blockSize - node.Data.length,\n      DataSize: node.Data.length,\n      CumulativeSize: blockSize + linkLength\n    };\n  }\n\n  return withTimeoutOption(stat);\n};\n/**\n * @typedef {Object} Stat\n * @property {string} Hash\n * @property {number} NumLinks\n * @property {number} BlockSize\n * @property {number} LinksSize\n * @property {number} DataSize\n * @property {number} CumulativeSize\n *\n * @typedef {import('./get').GetOptions} StatOptions\n * @typedef {import('.').CID} CID\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}