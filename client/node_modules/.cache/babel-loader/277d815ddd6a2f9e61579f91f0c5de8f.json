{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.IWantTracer = void 0;\n\nconst constants_1 = require(\"./constants\");\n\nconst utils_1 = require(\"./utils\");\n\nconst pubsubErrors = require(\"libp2p-interfaces/src/pubsub/errors\");\n\nconst _pubsubErrors$codes = pubsubErrors.codes,\n      ERR_INVALID_SIGNATURE = _pubsubErrors$codes.ERR_INVALID_SIGNATURE,\n      ERR_MISSING_SIGNATURE = _pubsubErrors$codes.ERR_MISSING_SIGNATURE;\n/**\n * IWantTracer is an internal tracer that tracks IWANT requests in order to penalize\n * peers who don't follow up on IWANT requests after an IHAVE advertisement.\n * The tracking of promises is probabilistic to avoid using too much memory.\n *\n * Note: Do not confuse these 'promises' with JS Promise objects.\n * These 'promises' are merely expectations of a peer's behavior.\n */\n\nclass IWantTracer {\n  constructor(getMsgId) {\n    this.getMsgId = getMsgId;\n    this.promises = new Map();\n  }\n  /**\n   * Track a promise to deliver a message from a list of msgIDs we are requesting\n   * @param {string} p peer id\n   * @param {string[]} msgIds\n   * @returns {void}\n   */\n\n\n  addPromise(p, msgIds) {\n    // pick msgId randomly from the list\n    const ix = Math.floor(Math.random() * msgIds.length);\n    const msgId = msgIds[ix];\n    const msgIdStr = utils_1.messageIdToString(msgId);\n    let peers = this.promises.get(msgIdStr);\n\n    if (!peers) {\n      peers = new Map();\n      this.promises.set(msgIdStr, peers);\n    }\n\n    if (!peers.has(p)) {\n      peers.set(p, Date.now() + constants_1.GossipsubIWantFollowupTime);\n    }\n  }\n  /**\n   * Returns the number of broken promises for each peer who didn't follow up on an IWANT request.\n   * @returns {Map<string, number>}\n   */\n\n\n  getBrokenPromises() {\n    const now = Date.now();\n    const result = new Map();\n    this.promises.forEach((peers, msgId) => {\n      peers.forEach((expire, p) => {\n        // the promise has been broken\n        if (expire < now) {\n          // add 1 to result\n          result.set(p, (result.get(p) || 0) + 1); // delete from tracked promises\n\n          peers.delete(p);\n        }\n      }); // clean up empty promises for a msgId\n\n      if (!peers.size) {\n        this.promises.delete(msgId);\n      }\n    });\n    return result;\n  }\n  /**\n   * Someone delivered a message, stop tracking promises for it\n   * @param {InMessage} msg\n   * @returns {void}\n   */\n\n\n  deliverMessage(msg) {\n    const msgId = this.getMsgId(msg);\n    const msgIdStr = utils_1.messageIdToString(msgId);\n    this.promises.delete(msgIdStr);\n  }\n  /**\n   * A message got rejected, so we can stop tracking promises and let the score penalty apply from invalid message delivery,\n   * unless its an obviously invalid message.\n   * @param {InMessage} msg\n   * @param {string} reason\n   * @returns {void}\n   */\n\n\n  rejectMessage(msg, reason) {\n    switch (reason) {\n      case ERR_INVALID_SIGNATURE:\n      case ERR_MISSING_SIGNATURE:\n        return;\n    }\n\n    const msgId = this.getMsgId(msg);\n    const msgIdStr = utils_1.messageIdToString(msgId);\n    this.promises.delete(msgIdStr);\n  }\n\n  clear() {\n    this.promises.clear();\n  }\n\n}\n\nexports.IWantTracer = IWantTracer;","map":null,"metadata":{},"sourceType":"script"}