{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:peer-store:proto-book'), {\n  error: debug('libp2p:peer-store:proto-book:err')\n});\n\nconst errcode = require('err-code');\n\nconst PeerId = require('peer-id');\n\nconst Book = require('./book');\n\nconst _require = require('../errors'),\n      ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n/**\n * @typedef {import('./')} PeerStore\n */\n\n/**\n * @extends {Book}\n *\n * @fires ProtoBook#change:protocols\n */\n\n\nclass ProtoBook extends Book {\n  /**\n   * The ProtoBook is responsible for keeping the known supported\n   * protocols of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor(peerStore) {\n    /**\n     * PeerStore Event emitter, used by the ProtoBook to emit:\n     * \"change:protocols\" - emitted when the known protocols of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:protocols',\n      eventProperty: 'protocols',\n      eventTransformer: data => Array.from(data)\n    });\n    /**\n     * Map known peers to their known protocols.\n     *\n     * @type {Map<string, Set<string>>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n\n\n  set(peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data');\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recSet = this.data.get(id);\n    const newSet = new Set(protocols);\n\n    const isSetEqual = (a, b) => a.size === b.size && [...a].every(value => b.has(value)); // Already knows the peer and the recorded protocols are the same?\n    // If yes, no changes needed!\n\n\n    if (recSet && isSetEqual(recSet, newSet)) {\n      log(\"the protocols provided to store are equal to the already stored for \".concat(id));\n      return this;\n    }\n\n    this._setData(peerId, newSet);\n\n    log(\"stored provided protocols for \".concat(id));\n    return this;\n  }\n  /**\n   * Adds known protocols of a provided peer.\n   * If the peer was not known before, it will be added.\n   *\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n\n\n  add(peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data');\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recSet = this.data.get(id) || new Set();\n    const newSet = new Set([...recSet, ...protocols]); // Set Union\n    // Any new protocol added?\n\n    if (recSet.size === newSet.size) {\n      log(\"the protocols provided to store are already stored for \".concat(id));\n      return this;\n    }\n\n    this._setData(peerId, newSet);\n\n    log(\"added provided protocols for \".concat(id));\n    return this;\n  }\n  /**\n   * Removes known protocols of a provided peer.\n   * If the protocols did not exist before, nothing will be done.\n   *\n   * @param {PeerId} peerId\n   * @param {string[]} protocols\n   * @returns {ProtoBook}\n   */\n\n\n  remove(peerId, protocols) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!protocols) {\n      log.error('protocols must be provided to store data');\n      throw errcode(new Error('protocols must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recSet = this.data.get(id);\n\n    if (recSet) {\n      const newSet = new Set([...recSet].filter(p => !protocols.includes(p))); // Any protocol removed?\n\n      if (recSet.size === newSet.size) {\n        return this;\n      }\n\n      this._setData(peerId, newSet);\n\n      log(\"removed provided protocols for \".concat(id));\n    }\n\n    return this;\n  }\n\n}\n\nmodule.exports = ProtoBook;","map":null,"metadata":{},"sourceType":"script"}