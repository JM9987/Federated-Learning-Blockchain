{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst _require = require('ipfs-core-utils/src/cid'),\n      cidToString = _require.cidToString;\n\nconst log = Object.assign(debug('ipfs:mfs-preload'), {\n  error: debug('ipfs:mfs-preload:error')\n});\n/**\n * @param {Object} config\n * @param {import('./components').Preload} config.preload\n * @param {import('./components').Files} config.files\n * @param {Options} [config.options]\n */\n\nmodule.exports = ({\n  preload,\n  files,\n  options = {}\n}) => {\n  options.interval = options.interval || 30 * 1000;\n\n  if (!options.enabled) {\n    log('MFS preload disabled');\n\n    const noop = async () => {};\n\n    return {\n      start: noop,\n      stop: noop\n    };\n  }\n\n  let rootCid, timeoutId;\n\n  const preloadMfs = async () => {\n    try {\n      const stats = await files.stat('/');\n      const nextRootCid = cidToString(stats.cid, {\n        base: 'base32'\n      });\n\n      if (rootCid !== nextRootCid) {\n        log(\"preloading updated MFS root \".concat(rootCid, \" -> \").concat(stats.cid));\n        await preload(stats.cid);\n        rootCid = nextRootCid;\n      }\n    } catch (err) {\n      log.error('failed to preload MFS root', err);\n    } finally {\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    }\n  };\n\n  return {\n    /**\n     * @returns {Promise<void>}\n     */\n    async start() {\n      const stats = await files.stat('/');\n      rootCid = cidToString(stats.cid, {\n        base: 'base32'\n      });\n      log(\"monitoring MFS root \".concat(stats.cid));\n      timeoutId = setTimeout(preloadMfs, options.interval);\n    },\n\n    /**\n     * @returns {void}\n     */\n    stop() {\n      clearTimeout(timeoutId);\n    }\n\n  };\n};\n/**\n * @typedef {ReturnType<typeof module.exports>} MFSPreload\n * @typedef {PreloadOptions & MFSPreloadOptions} Options\n * @typedef {Object} MFSPreloadOptions\n * @property {number} [interval]\n * @typedef {import('./components').PreloadOptions} PreloadOptions\n */","map":null,"metadata":{},"sourceType":"script"}