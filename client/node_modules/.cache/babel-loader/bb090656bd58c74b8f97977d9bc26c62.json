{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').Keychain} config.keychain\n */\n\n\nmodule.exports = ({\n  keychain\n}) => {\n  /**\n   * Generate a new key\n   *\n   * @example\n   * ```js\n   * const key = await ipfs.key.gen('my-key', {\n   *   type: 'rsa',\n   *   size: 2048\n   * })\n   *\n   * console.log(key)\n   * // { id: 'QmYWqAFvLWb2G5A69JGXui2JJXzaHXiUEmQkQgor6kNNcJ',\n   * //  name: 'my-key' }\n   * ```\n   *\n   * @param {string} name - The name to give the key\n   * @param {GenOptions & AbortOptions} options\n   * @returns {Promise<Key>}\n   */\n  const gen = (name, options = {}) => {\n    return keychain.createKey(name, options.type || 'rsa', options.size || 2048);\n  };\n\n  return withTimeoutOption(gen);\n};\n/**\n * @typedef {Object} GenOptions\n * @property {import('libp2p-crypto').KeyType} [type='RSA'] - The key type\n * @property {number} [size=2048] - The key size in bits\n *\n * @typedef {import('.').Key} Key\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}