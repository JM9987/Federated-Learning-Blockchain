{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/ubuntu/Codigo_Javier/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst _require = require('./error'),\n      TimeoutError = _require.TimeoutError,\n      AbortError = _require.AbortError;\n\nconst _require2 = require('../fetch'),\n      Response = _require2.Response,\n      Request = _require2.Request,\n      Headers = _require2.Headers,\n      fetch = _require2.default;\n/**\n * @typedef {import('../types').FetchOptions} FetchOptions\n * @typedef {import('../types').ProgressFn} ProgressFn\n */\n\n/**\n * Fetch with progress\n *\n * @param {string | Request} url\n * @param {FetchOptions} [options]\n * @returns {Promise<ResponseWithURL>}\n */\n\n\nconst fetchWithProgress = (url, options = {}) => {\n  const request = new XMLHttpRequest();\n  request.open(options.method || 'GET', url.toString(), true);\n  const timeout = options.timeout,\n        headers = options.headers;\n\n  if (timeout && timeout > 0 && timeout < Infinity) {\n    request.timeout = timeout;\n  }\n\n  if (options.overrideMimeType != null) {\n    request.overrideMimeType(options.overrideMimeType);\n  }\n\n  if (headers) {\n    for (const _ref of new Headers(headers)) {\n      var _ref2 = _slicedToArray(_ref, 2);\n\n      const name = _ref2[0];\n      const value = _ref2[1];\n      request.setRequestHeader(name, value);\n    }\n  }\n\n  if (options.signal) {\n    options.signal.onabort = () => request.abort();\n  }\n\n  if (options.onUploadProgress) {\n    request.upload.onprogress = options.onUploadProgress;\n  } // Note: Need to use `arraybuffer` here instead of `blob` because `Blob`\n  // instances coming from JSDOM are not compatible with `Response` from\n  // node-fetch (which is the setup we get when testing with jest because\n  // it uses JSDOM which does not provide a global fetch\n  // https://github.com/jsdom/jsdom/issues/1724)\n\n\n  request.responseType = 'arraybuffer';\n  return new Promise((resolve, reject) => {\n    /**\n     * @param {Event} event\n     */\n    const handleEvent = event => {\n      switch (event.type) {\n        case 'error':\n          {\n            resolve(Response.error());\n            break;\n          }\n\n        case 'load':\n          {\n            resolve(new ResponseWithURL(request.responseURL, request.response, {\n              status: request.status,\n              statusText: request.statusText,\n              headers: parseHeaders(request.getAllResponseHeaders())\n            }));\n            break;\n          }\n\n        case 'timeout':\n          {\n            reject(new TimeoutError());\n            break;\n          }\n\n        case 'abort':\n          {\n            reject(new AbortError());\n            break;\n          }\n\n        default:\n          {\n            break;\n          }\n      }\n    };\n\n    request.onerror = handleEvent;\n    request.onload = handleEvent;\n    request.ontimeout = handleEvent;\n    request.onabort = handleEvent;\n    request.send(\n    /** @type {BodyInit} */\n    options.body);\n  });\n};\n\nconst fetchWithStreaming = fetch;\n/**\n * @param {string | Request} url\n * @param {FetchOptions} options\n */\n\nconst fetchWith = (url, options = {}) => options.onUploadProgress != null ? fetchWithProgress(url, options) : fetchWithStreaming(url, options);\n/**\n * Parse Headers from a XMLHttpRequest\n *\n * @param {string} input\n * @returns {Headers}\n */\n\n\nconst parseHeaders = input => {\n  const headers = new Headers();\n\n  for (const line of input.trim().split(/[\\r\\n]+/)) {\n    const index = line.indexOf(': ');\n\n    if (index > 0) {\n      headers.set(line.slice(0, index), line.slice(index + 1));\n    }\n  }\n\n  return headers;\n};\n\nclass ResponseWithURL extends Response {\n  /**\n   * @param {string} url\n   * @param {BodyInit} body\n   * @param {ResponseInit} options\n   */\n  constructor(url, body, options) {\n    super(body, options);\n    Object.defineProperty(this, 'url', {\n      value: url\n    });\n  }\n\n}\n\nmodule.exports = {\n  fetch: fetchWith,\n  Request,\n  Headers,\n  ResponseWithURL\n};","map":null,"metadata":{},"sourceType":"script"}