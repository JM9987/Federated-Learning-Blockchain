{"ast":null,"code":"import asmCrypto from \"asmcrypto-lite\"; //import IPFS from \"ipfs-core\";\n// import IPFS from \"ipfs-mini\";\n\nconst IPFS = require('ipfs-api');\n\nclass ContractFunctions {\n  constructor(web3, accounts, contract) {\n    this.registrarModelo = async (informe, title) => {\n      var data = await informe.arrayBuffer(); // console.log(data)\n\n      var data2 = Buffer.from(data); // console.log(data2)\n\n      let uint8data = new Uint8Array(data);\n      let hash = asmCrypto.SHA256.hex(data);\n      const response = await this.contract.methods.getInforme(hash).call();\n\n      if (response.exists) {\n        return \"El informe ya existe.\";\n      }\n\n      const ipfs = new IPFS({\n        host: 'ipfs.infura.io',\n        port: 5001,\n        protocol: 'https'\n      }); // const w = await ipfs.add(data2, (err, ipfsHash) => {\n      //     console.log(err, ipfsHash);\n      //     cid = ipfsHash[0].hash;\n      // })\n\n      var precision = 100;\n      var randomnum = 0.7742;\n      var maximo = 0.9512;\n      randomnum = (Math.random() * (1 - randomnum) + randomnum).toFixed(4);\n      if (randomnum > maximo) randomnum = maximo;\n      const cid = randomnum; ////const ipfs = await IPFS.create(\"https://ipfs.infura.io:5001\")\n      // const ipfs = new IPFS({host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\n      ////const { cid } = await ipfs.add(uint8data)\n      ////await ipfs.stop();\n      // var cid;\n      // ipfs.add(data, (err,hash2) => {\n      //     if(err){\n      //         return console.log(err);\n      //     }\n      //     console.log(\"https://ipfs.infura.io/ipfs/\"+hash2)\n      //     cid = hash2;\n      // })\n      // console.log(\"hey \" + cid)\n\n      await this.contract.methods.registerInforme(hash, title, cid[0].hash).send({\n        from: this.accounts[0]\n      }); // await this.contract.methods.registerInforme(hash, title, cid.toString()).send({ from: this.accounts[0] });\n\n      return \"Modelo registrado en el sistema.\";\n    };\n\n    this.obtenerModeloFichero = async file => {\n      let data = await file.arrayBuffer();\n      let hash = asmCrypto.SHA256.hex(data);\n      const response = await this.getInforme(hash); //console.log(response);\n\n      return response;\n    };\n\n    this.registrarUser = async name => {\n      //console.log(\"comprobar address\");\n      //console.log(this.accounts[0]);\n      await this.contract.methods.registerEntity(name).send({\n        from: this.accounts[0]\n      }); //console.log(response);\n\n      return \"Petición de registro solicitada, espere a tener la cuenta activada.\";\n    };\n\n    this.AceptarUser = async address => {\n      //console.log(\"comprobar address\");\n      //console.log(this.accounts[0]);\n      await this.contract.methods.approveEntity(address).send({\n        from: this.accounts[0]\n      }); //console.log(response);\n\n      return \"Enhorabuena, has sido confirmado y puedes acceder a la aplicación.\";\n    };\n\n    this.esPropietario = async () => {\n      //console.log(\"comprobar address\");\n      //console.log(this.accounts[0]);\n      const response = await this.contract.methods.isOwner().call({\n        from: this.accounts[0]\n      }); //console.log(response);\n\n      return response;\n    };\n\n    this.userValidado = async () => {\n      //console.log(\"comprobar address\");\n      //console.log(this.accounts[0]);\n      const response = await this.contract.methods.isApprovedEntity().call({\n        from: this.accounts[0]\n      }); //console.log(response);\n\n      return response;\n    };\n\n    this.getNombreUser = async () => {\n      //console.log(\"comprobar address\");\n      //console.log(this.accounts[0]);\n      const response = await this.contract.methods.getMyEntityName().call({\n        from: this.accounts[0]\n      }); //console.log(response);\n\n      return response;\n    };\n\n    this.obtenerModelo = async hash => {\n      //console.log(\"comprobar address\");\n      //console.log(this.accounts[0]);\n      const response = await this.contract.methods.getInforme(hash).call();\n      await this.contract.methods.registerEntity(hash).send({\n        from: this.accounts[0]\n      }); //console.log(response);\n\n      return response;\n    };\n\n    this.listadoModelos = async () => {\n      //console.log(\"comprobar address\");\n      //console.log(this.accounts[0]);\n      const response = await this.contract.methods.getAllInformes().call(); //console.log(response);\n\n      return response;\n    };\n\n    this.listadoUsuarios = async () => {\n      //console.log(\"comprobar address\");\n      //console.log(this.accounts[0]);\n      const response = await this.contract.methods.getAllEntities().call({\n        from: this.accounts[0]\n      }); //console.log(response);\n\n      return response;\n    };\n\n    this.web3 = web3;\n    this.accounts = accounts;\n    this.contract = contract;\n  }\n  /*registrarModeloAux = async (informe, title) => {\r\n  var data = await informe.arrayBuffer();\r\n      // console.log(data)\r\n      var data2 = Buffer.from(data)\r\n      // console.log(data2)\r\n      let uint8data = new Uint8Array(data);\r\n      let hash = asmCrypto.SHA256.hex(data);\r\n        const response = await this.contract.methods.getInforme(hash).call();\r\n        if (response.exists) {\r\n          return \"El informe ya existe.\";\r\n      }\r\n        const ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n      // const w = await ipfs.add(data2, (err, ipfsHash) => {\r\n      //     console.log(err, ipfsHash);\r\n      //     cid = ipfsHash[0].hash;\r\n      // })\r\n      const cid = await ipfs.add(data2);\r\n      \r\n      \r\n      \r\n        ////const ipfs = await IPFS.create(\"https://ipfs.infura.io:5001\")\r\n      // const ipfs = new IPFS({host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\r\n      ////const { cid } = await ipfs.add(uint8data)\r\n      ////await ipfs.stop();\r\n      // var cid;\r\n      // ipfs.add(data, (err,hash2) => {\r\n      //     if(err){\r\n      //         return console.log(err);\r\n      //     }\r\n      //     console.log(\"https://ipfs.infura.io/ipfs/\"+hash2)\r\n      //     cid = hash2;\r\n      // })\r\n        // console.log(\"hey \" + cid)\r\n          await this.contract.methods.registerInforme(hash, title, cid[0].hash).send({ from: this.accounts[0] });\r\n      // await this.contract.methods.registerInforme(hash, title, cid.toString()).send({ from: this.accounts[0] });\r\n        return \"Modelo registrado en el sistema.\";\r\n  }*/\n\n\n}\n\nexport default ContractFunctions;","map":{"version":3,"sources":["/home/ubuntu/TFG_FL/client/src/ContractFunctions.js"],"names":["asmCrypto","IPFS","require","ContractFunctions","constructor","web3","accounts","contract","registrarModelo","informe","title","data","arrayBuffer","data2","Buffer","from","uint8data","Uint8Array","hash","SHA256","hex","response","methods","getInforme","call","exists","ipfs","host","port","protocol","precision","randomnum","maximo","Math","random","toFixed","cid","registerInforme","send","obtenerModeloFichero","file","registrarUser","name","registerEntity","AceptarUser","address","approveEntity","esPropietario","isOwner","userValidado","isApprovedEntity","getNombreUser","getMyEntityName","obtenerModelo","listadoModelos","getAllInformes","listadoUsuarios","getAllEntities"],"mappings":"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","sourcesContent":["\r\nimport asmCrypto from \"asmcrypto-lite\";\r\n//import IPFS from \"ipfs-core\";\r\n// import IPFS from \"ipfs-mini\";\r\nconst IPFS = require('ipfs-api');\r\n\r\n\r\nclass ContractFunctions {\r\n    constructor(web3, accounts, contract) {\r\n        this.web3 = web3;\r\n        this.accounts = accounts;\r\n        this.contract = contract;\r\n    }\r\n    \r\n    /*registrarModeloAux = async (informe, title) => {\r\nvar data = await informe.arrayBuffer();\r\n        // console.log(data)\r\n        var data2 = Buffer.from(data)\r\n        // console.log(data2)\r\n        let uint8data = new Uint8Array(data);\r\n        let hash = asmCrypto.SHA256.hex(data);\r\n\r\n        const response = await this.contract.methods.getInforme(hash).call();\r\n\r\n        if (response.exists) {\r\n            return \"El informe ya existe.\";\r\n        }\r\n\r\n        const ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n        // const w = await ipfs.add(data2, (err, ipfsHash) => {\r\n        //     console.log(err, ipfsHash);\r\n        //     cid = ipfsHash[0].hash;\r\n        // })\r\n        const cid = await ipfs.add(data2);\r\n        \r\n        \r\n        \r\n\r\n        ////const ipfs = await IPFS.create(\"https://ipfs.infura.io:5001\")\r\n        // const ipfs = new IPFS({host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\r\n        ////const { cid } = await ipfs.add(uint8data)\r\n        ////await ipfs.stop();\r\n        // var cid;\r\n        // ipfs.add(data, (err,hash2) => {\r\n        //     if(err){\r\n        //         return console.log(err);\r\n        //     }\r\n        //     console.log(\"https://ipfs.infura.io/ipfs/\"+hash2)\r\n        //     cid = hash2;\r\n        // })\r\n\r\n        // console.log(\"hey \" + cid)\r\n\r\n\r\n        await this.contract.methods.registerInforme(hash, title, cid[0].hash).send({ from: this.accounts[0] });\r\n        // await this.contract.methods.registerInforme(hash, title, cid.toString()).send({ from: this.accounts[0] });\r\n\r\n        return \"Modelo registrado en el sistema.\";\r\n    }*/\r\n    \r\n    registrarModelo = async (informe, title) => {\r\n        var data = await informe.arrayBuffer();\r\n        // console.log(data)\r\n        var data2 = Buffer.from(data)\r\n        // console.log(data2)\r\n        let uint8data = new Uint8Array(data);\r\n        let hash = asmCrypto.SHA256.hex(data);\r\n\r\n        const response = await this.contract.methods.getInforme(hash).call();\r\n\r\n        if (response.exists) {\r\n            return \"El informe ya existe.\";\r\n        }\r\n\r\n        const ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n        // const w = await ipfs.add(data2, (err, ipfsHash) => {\r\n        //     console.log(err, ipfsHash);\r\n        //     cid = ipfsHash[0].hash;\r\n        // })\r\n        var precision = 100;\r\n        var randomnum = 0.7742;\r\n        var maximo = 0.9512;\r\n\trandomnum = (Math.random() * (1 - randomnum) + randomnum).toFixed(4);\r\n\tif (randomnum > maximo) randomnum = maximo;\r\n\tconst cid = randomnum;\r\n        \r\n        \r\n        \r\n\r\n        ////const ipfs = await IPFS.create(\"https://ipfs.infura.io:5001\")\r\n        // const ipfs = new IPFS({host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\r\n        ////const { cid } = await ipfs.add(uint8data)\r\n        ////await ipfs.stop();\r\n        // var cid;\r\n        // ipfs.add(data, (err,hash2) => {\r\n        //     if(err){\r\n        //         return console.log(err);\r\n        //     }\r\n        //     console.log(\"https://ipfs.infura.io/ipfs/\"+hash2)\r\n        //     cid = hash2;\r\n        // })\r\n\r\n        // console.log(\"hey \" + cid)\r\n\r\n\r\n        await this.contract.methods.registerInforme(hash, title, cid[0].hash).send({ from: this.accounts[0] });\r\n        // await this.contract.methods.registerInforme(hash, title, cid.toString()).send({ from: this.accounts[0] });\r\n\r\n        return \"Modelo registrado en el sistema.\";\r\n    }\r\n\r\n    obtenerModeloFichero = async (file) => {\r\n        let data = await file.arrayBuffer();\r\n        let hash = asmCrypto.SHA256.hex(data);\r\n        const response = await this.getInforme(hash);\r\n        //console.log(response);\r\n        return response\r\n    }\r\n\r\n\r\n    registrarUser = async (name) => {\r\n        //console.log(\"comprobar address\");\r\n    \t//console.log(this.accounts[0]);\r\n        await this.contract.methods.registerEntity(name).send({ from: this.accounts[0] });\r\n        //console.log(response);\r\n        return \"Petición de registro solicitada, espere a tener la cuenta activada.\"\r\n    }\r\n\r\n    AceptarUser = async (address) => {\r\n        //console.log(\"comprobar address\");\r\n    \t//console.log(this.accounts[0]);\r\n        await this.contract.methods.approveEntity(address).send({ from: this.accounts[0] });\r\n        //console.log(response);\r\n        return \"Enhorabuena, has sido confirmado y puedes acceder a la aplicación.\"\r\n    }\r\n    \r\n    esPropietario = async () => {\r\n        //console.log(\"comprobar address\");\r\n    \t//console.log(this.accounts[0]);\r\n        const response = await this.contract.methods.isOwner().call({ from: this.accounts[0] });\r\n        //console.log(response);\r\n        return response;\r\n    }\r\n\r\n    userValidado = async () => {\r\n    \t//console.log(\"comprobar address\");\r\n    \t//console.log(this.accounts[0]);\r\n        const response = await this.contract.methods.isApprovedEntity().call({ from: this.accounts[0] });\r\n        //console.log(response);\r\n        return response;\r\n    }\r\n\r\n    getNombreUser = async () => {\r\n        //console.log(\"comprobar address\");\r\n    \t//console.log(this.accounts[0]);\r\n        const response = await this.contract.methods.getMyEntityName().call({ from: this.accounts[0] });\r\n        //console.log(response);\r\n        return response;\r\n    }\r\n    \r\n    obtenerModelo = async (hash) => {\r\n        //console.log(\"comprobar address\");\r\n    \t//console.log(this.accounts[0]);\r\n        const response = await this.contract.methods.getInforme(hash).call();\r\n        await this.contract.methods.registerEntity(hash).send({ from: this.accounts[0] });\r\n        //console.log(response);\r\n        return response;\r\n    }\r\n\r\n    listadoModelos = async () => {\r\n        //console.log(\"comprobar address\");\r\n    \t//console.log(this.accounts[0]);\r\n        const response = await this.contract.methods.getAllInformes().call();\r\n        //console.log(response);\r\n        return response;\r\n    }\r\n\r\n    listadoUsuarios = async () => {\r\n        //console.log(\"comprobar address\");\r\n    \t//console.log(this.accounts[0]);\r\n        const response = await this.contract.methods.getAllEntities().call({ from: this.accounts[0] });\r\n        //console.log(response);\r\n        return response;\r\n    }\r\n\r\n}\r\n\r\nexport default ContractFunctions;\r\n"]},"metadata":{},"sourceType":"module"}