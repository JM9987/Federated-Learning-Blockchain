{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst multiaddr = require('multiaddr');\n\nconst mafmt = require('mafmt');\n\nconst _require = require('events'),\n      EventEmitter = _require.EventEmitter;\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:bootstrap'), {\n  error: debug('libp2p:bootstrap:error')\n});\n/**\n * Emits 'peer' events on a regular interval for each peer in the provided list.\n */\n\nclass Bootstrap extends EventEmitter {\n  /**\n   * Constructs a new Bootstrap.\n   *\n   * @param {Object} options\n   * @param {Array<string>} options.list - the list of peer addresses in multi-address format\n   * @param {number} [options.interval = 10000] - the interval between emitting addresses in milliseconds\n   *\n   */\n  constructor(options = {\n    list: []\n  }) {\n    if (!options.list || !options.list.length) {\n      throw new Error('Bootstrap requires a list of peer addresses');\n    }\n\n    super();\n    this._list = options.list;\n    this._interval = options.interval || 10000;\n    this._timer = null;\n  }\n  /**\n   * Start emitting events.\n   */\n\n\n  start() {\n    if (this._timer) {\n      return;\n    }\n\n    this._timer = setInterval(() => this._discoverBootstrapPeers(), this._interval);\n    log('Starting bootstrap node discovery');\n\n    this._discoverBootstrapPeers();\n  }\n  /**\n   * Emit each address in the list as a PeerInfo.\n   */\n\n\n  _discoverBootstrapPeers() {\n    if (!this._timer) {\n      return;\n    }\n\n    this._list.forEach(candidate => {\n      if (!mafmt.P2P.matches(candidate)) {\n        return log.error('Invalid multiaddr');\n      }\n\n      const ma = multiaddr(candidate);\n      const peerId = PeerId.createFromB58String(ma.getPeerId());\n\n      try {\n        this.emit('peer', {\n          id: peerId,\n          multiaddrs: [ma]\n        });\n      } catch (err) {\n        log.error('Invalid bootstrap peer id', err);\n      }\n    });\n  }\n  /**\n   * Stop emitting events.\n   */\n\n\n  stop() {\n    if (this._timer) clearInterval(this._timer);\n    this._timer = null;\n  }\n\n}\n\nexports = module.exports = Bootstrap;\nexports.tag = 'bootstrap';","map":null,"metadata":{},"sourceType":"script"}