{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst UnixFs = require('ipfs-unixfs');\n\nconst _require = require('ipld-dag-pb'),\n      DAGNode = _require.DAGNode;\n\nconst log = require('debug')('ipfs:mfs:utils:with-mfs-root');\n\nconst mc = require('multicodec');\n\nconst mh = require('multihashing-async').multihash;\n\nconst errCode = require('err-code');\n\nconst _require2 = require('../../../utils'),\n      MFS_ROOT_KEY = _require2.MFS_ROOT_KEY;\n\nconst loadMfsRoot = async (context, options) => {\n  if (options && options.signal && options.signal.aborted) {\n    throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n      name: 'Aborted'\n    });\n  } // Open the repo if it's been closed\n\n\n  await context.repo.datastore.open(); // Load the MFS root CID\n\n  let cid;\n\n  try {\n    const buf = await context.repo.datastore.get(MFS_ROOT_KEY);\n    cid = new CID(buf);\n  } catch (err) {\n    if (err.code !== 'ERR_NOT_FOUND') {\n      throw err;\n    }\n\n    log('Creating new MFS root');\n    const node = new DAGNode(new UnixFs({\n      type: 'directory'\n    }).marshal());\n    cid = await context.ipld.put(node, mc.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: mh.names['sha2-256'] // why can't ipld look this up?\n\n    });\n\n    if (options && options.signal && options.signal.aborted) {\n      throw errCode(new Error('Request aborted'), 'ERR_ABORTED', {\n        name: 'Aborted'\n      });\n    }\n\n    await context.repo.datastore.put(MFS_ROOT_KEY, cid.bytes);\n  }\n\n  log(\"Loaded MFS root /ipfs/\".concat(cid));\n  return cid;\n};\n\nmodule.exports = loadMfsRoot;","map":null,"metadata":{},"sourceType":"script"}