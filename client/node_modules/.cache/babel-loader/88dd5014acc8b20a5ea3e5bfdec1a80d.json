{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.simpleGroup = exports.spanLeadingZeroes = exports.spanAll = exports.spanAllZeroes = void 0;\n\nvar sprintf_js_1 = require(\"sprintf-js\");\n/**\n * @returns {String} the string with all zeroes contained in a <span>\n */\n\n\nfunction spanAllZeroes(s) {\n  return s.replace(/(0+)/g, '<span class=\"zero\">$1</span>');\n}\n\nexports.spanAllZeroes = spanAllZeroes;\n/**\n * @returns {String} the string with each character contained in a <span>\n */\n\nfunction spanAll(s, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  var letters = s.split('');\n  return letters.map(function (n, i) {\n    return sprintf_js_1.sprintf('<span class=\"digit value-%s position-%d\">%s</span>', n, i + offset, spanAllZeroes(n));\n  } // XXX Use #base-2 .value-0 instead?\n  ).join('');\n}\n\nexports.spanAll = spanAll;\n\nfunction spanLeadingZeroesSimple(group) {\n  return group.replace(/^(0+)/, '<span class=\"zero\">$1</span>');\n}\n/**\n * @returns {String} the string with leading zeroes contained in a <span>\n */\n\n\nfunction spanLeadingZeroes(address) {\n  var groups = address.split(':');\n  return groups.map(function (g) {\n    return spanLeadingZeroesSimple(g);\n  }).join(':');\n}\n\nexports.spanLeadingZeroes = spanLeadingZeroes;\n/**\n * Groups an address\n * @returns {String} a grouped address\n */\n\nfunction simpleGroup(addressString, offset) {\n  if (offset === void 0) {\n    offset = 0;\n  }\n\n  var groups = addressString.split(':');\n  return groups.map(function (g, i) {\n    if (/group-v4/.test(g)) {\n      return g;\n    }\n\n    return sprintf_js_1.sprintf('<span class=\"hover-group group-%d\">%s</span>', i + offset, spanLeadingZeroesSimple(g));\n  });\n}\n\nexports.simpleGroup = simpleGroup;","map":null,"metadata":{},"sourceType":"script"}