{"ast":null,"code":"'use strict';\n\nconst exporter = require('ipfs-unixfs-exporter');\n\nconst errCode = require('err-code');\n\nconst _require = require('../utils'),\n      normalizeCidPath = _require.normalizeCidPath,\n      mapFile = _require.mapFile;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {Object} Context\n * @property {import('.').IPLD} ipld\n * @property {import('.').Preload} preload\n *\n * @param {Context} context\n */\n\n\nmodule.exports = function ({\n  ipld,\n  preload\n}) {\n  /**\n   * Fetch a file or an entire directory tree from IPFS that is addressed by a\n   * valid IPFS Path.\n   *\n   * @param {import('ipfs-core-types/src/root').IPFSPath} ipfsPath\n   * @param {import('ipfs-core-types/src/root').GetOptions} [options]\n   * @returns {AsyncIterable<import('ipfs-core-types/src/files').IPFSEntry>}\n   */\n  async function* get(ipfsPath, options = {}) {\n    if (options.preload !== false) {\n      let pathComponents;\n\n      try {\n        pathComponents = normalizeCidPath(ipfsPath).split('/');\n      } catch (err) {\n        throw errCode(err, 'ERR_INVALID_PATH');\n      }\n\n      preload(pathComponents[0]);\n    }\n\n    for await (const file of exporter.recursive(ipfsPath, ipld, options)) {\n      yield mapFile(file, { ...options,\n        includeContent: true\n      });\n    }\n  }\n\n  return withTimeoutOption(get);\n};","map":null,"metadata":{},"sourceType":"script"}