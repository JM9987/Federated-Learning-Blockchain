{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst _require = require('../package.json'),\n      version = _require.version;\n\nconst blockSymbol = Symbol.for('@ipld/js-ipld-block/block');\nconst readonly = {\n  writable: false,\n  configurable: false,\n  enumerable: true\n};\n/**\n * Represents an immutable block of data that is uniquely referenced with a cid.\n *\n * @example\n * const block = new Block(Uint8Array.from([0, 1, 2, 3]), new CID('...'))\n */\n\nclass Block {\n  /**\n   * @param {Uint8Array} data - The data to be stored in the block as a Uint8Array.\n   * @param {CID} cid - The cid of the data\n   */\n  constructor(data, cid) {\n    if (!data || !(data instanceof Uint8Array)) {\n      throw new Error('first argument  must be a Uint8Array');\n    }\n\n    if (!cid || !CID.isCID(cid)) {\n      throw new Error('second argument must be a CID');\n    }\n\n    this.data = data;\n    this.cid = cid;\n    Object.defineProperties(this, {\n      data: readonly,\n      cid: readonly\n    });\n  }\n  /**\n   * The data of this block.\n   *\n   * @deprecated\n   * @type {Uint8Array}\n   */\n\n\n  get _data() {\n    deprecateData();\n    return this.data;\n  }\n  /**\n   * The cid of the data this block represents.\n   *\n   * @deprecated\n   * @type {CID}\n   */\n\n\n  get _cid() {\n    deprecateCID();\n    return this.cid;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Block';\n  }\n\n  get [blockSymbol]() {\n    return true;\n  }\n  /**\n   * Check if the given value is a Block.\n   *\n   * @param {any} other\n   * @returns {other is Block}\n   */\n\n\n  static isBlock(other) {\n    return Boolean(other && other[blockSymbol]);\n  }\n\n}\n/**\n * @param {RegExp} range\n * @param {string} message\n * @returns {() => void}\n */\n\n\nconst deprecate = (range, message) => {\n  let warned = false;\n  return () => {\n    if (range.test(version)) {\n      if (!warned) {\n        warned = true; // eslint-disable-next-line no-console\n\n        console.warn(message);\n      }\n    } else {\n      throw new Error(message);\n    }\n  };\n};\n\nconst deprecateCID = deprecate(/^0\\.10|^0\\.11/, 'block._cid is deprecated and will be removed in 0.12 release. Please use block.cid instead');\nconst deprecateData = deprecate(/^0\\.10|^0.11/, 'block._data is deprecated and will be removed in 0.12 release. Please use block.data instead');\nmodule.exports = Block;","map":null,"metadata":{},"sourceType":"script"}