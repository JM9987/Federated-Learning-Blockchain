{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGNode = dagPB.DAGNode;\nconst DAGLink = dagPB.DAGLink;\n\nconst mh = require('multihashing-async').multihash;\n\nconst multicodec = require('multicodec');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nfunction parseBuffer(buf, encoding) {\n  switch (encoding) {\n    case 'json':\n      return parseJSONBuffer(buf);\n\n    case 'protobuf':\n      return parseProtoBuffer(buf);\n\n    default:\n      throw new Error(\"unkown encoding: \".concat(encoding));\n  }\n}\n\nfunction parseJSONBuffer(buf) {\n  let data;\n  let links;\n\n  try {\n    const parsed = JSON.parse(uint8ArrayToString(buf));\n    links = (parsed.Links || []).map(link => {\n      return new DAGLink(link.Name || link.name, link.Size || link.size, mh.fromB58String(link.Hash || link.hash || link.multihash));\n    });\n    data = uint8ArrayFromString(parsed.Data);\n  } catch (err) {\n    throw new Error('failed to parse JSON: ' + err);\n  }\n\n  return new DAGNode(data, links);\n}\n\nfunction parseProtoBuffer(buf) {\n  return dagPB.util.deserialize(buf);\n}\n/**\n * @param {Object} config\n * @param {import('.').IPLD} config.ipld\n * @param {import('.').Preload} config.preload\n * @param {import('.').GCLock} config.gcLock\n */\n\n\nmodule.exports = ({\n  ipld,\n  gcLock,\n  preload\n}) => {\n  /**\n   *\n   * @param {Uint8Array|DAGNode|{ Data: any, links: DAGLink[]}} obj\n   * @param {PutOptions & AbortOptions} options\n   * @returns {Promise<CID>}\n   */\n  async function put(obj, options = {}) {\n    const encoding = options.enc;\n    let node;\n\n    if (obj instanceof Uint8Array) {\n      if (encoding) {\n        node = await parseBuffer(obj, encoding);\n      } else {\n        node = new DAGNode(obj);\n      }\n    } else if (DAGNode.isDAGNode(obj)) {\n      // already a dag node\n      node = obj;\n    } else if (typeof obj === 'object') {\n      node = new DAGNode(obj.Data, obj.Links);\n    } else {\n      throw new Error('obj not recognized');\n    }\n\n    const release = await gcLock.readLock();\n\n    try {\n      const cid = await ipld.put(node, multicodec.DAG_PB, {\n        cidVersion: 0,\n        hashAlg: multicodec.SHA2_256\n      });\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return cid;\n    } finally {\n      release();\n    }\n  }\n\n  return withTimeoutOption(put);\n};\n/**\n * @typedef {Object} PutOptions\n * @property {boolean} [preload]\n * @property {string} [enc]\n *\n * @typedef {import('.').CID} CID\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}