{"ast":null,"code":"'use strict';\n\nconst tempdir = require('ipfs-utils/src/temp-dir');\n/**\n * @template T\n * @typedef {import(\"./types\").Await<T>} PromiseOrValue\n */\n\n/**\n * @template T\n * @typedef {import(\"./types\").AwaitIterable<T>} AnyIterable\n */\n\n\nconst utf8Encoder = new TextEncoder();\nconst utf8Decoder = new TextDecoder('utf8');\n/**\n * Filter\n *\n * @template T\n * @param {AnyIterable<T>} iterable\n * @param {(item: T) => PromiseOrValue<boolean>} filterer\n * @returns {AsyncIterable<T>}\n */\n\nconst filter = (iterable, filterer) => {\n  return async function* () {\n    for await (const value of iterable) {\n      const keep = await filterer(value);\n      if (!keep) continue;\n      yield value;\n    }\n  }();\n}; // Not just sort, because the sorter is given all the values and should return\n// them all sorted\n\n/**\n * Sort All\n *\n * @template T\n * @param {AnyIterable<T>} iterable\n * @param {(items: T[]) => PromiseOrValue<T[]>} sorter\n * @returns {AsyncIterable<T>}\n */\n\n\nconst sortAll = (iterable, sorter) => {\n  return async function* () {\n    let values = [];\n\n    for await (const value of iterable) values.push(value);\n\n    values = await sorter(values);\n\n    for (const value of values) yield value;\n  }();\n};\n/**\n *\n * @template T\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {number} n\n * @returns {AsyncIterable<T>}\n */\n\n\nconst take = (iterable, n) => {\n  return async function* () {\n    if (n <= 0) return;\n    let i = 0;\n\n    for await (const value of iterable) {\n      yield value;\n      i++;\n      if (i >= n) return;\n    }\n  }();\n};\n/**\n *\n * @template T,O\n * @param {AsyncIterable<T> | Iterable<T>} iterable\n * @param {(item: T) => O} mapper\n * @returns {AsyncIterable<O>}\n */\n\n\nconst map = (iterable, mapper) => {\n  return async function* () {\n    for await (const value of iterable) {\n      yield mapper(value);\n    }\n  }();\n};\n/**\n * @param {string} s\n * @param {string} r\n */\n\n\nconst replaceStartWith = (s, r) => {\n  const matcher = new RegExp('^' + r);\n  return s.replace(matcher, '');\n};\n\nmodule.exports = {\n  map,\n  take,\n  sortAll,\n  filter,\n  utf8Encoder,\n  utf8Decoder,\n  tmpdir: tempdir,\n  replaceStartWith\n};","map":null,"metadata":{},"sourceType":"script"}