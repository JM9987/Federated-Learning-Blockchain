{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.XXHandshake = void 0;\n\nconst buffer_1 = require(\"buffer\");\n\nconst xx_1 = require(\"./handshakes/xx\");\n\nconst utils_1 = require(\"./utils\");\n\nconst logger_1 = require(\"./logger\");\n\nconst encoder_1 = require(\"./encoder\");\n\nclass XXHandshake {\n  constructor(isInitiator, payload, prologue, staticKeypair, connection, remotePeer, handshake) {\n    this.isInitiator = isInitiator;\n    this.payload = payload;\n    this.prologue = prologue;\n    this.staticKeypair = staticKeypair;\n    this.connection = connection;\n\n    if (remotePeer) {\n      this.remotePeer = remotePeer;\n    }\n\n    this.xx = handshake || new xx_1.XX();\n    this.session = this.xx.initSession(this.isInitiator, this.prologue, this.staticKeypair);\n    this.remoteEarlyData = buffer_1.Buffer.alloc(0);\n  } // stage 0\n\n\n  async propose() {\n    logger_1.logLocalStaticKeys(this.session.hs.s);\n\n    if (this.isInitiator) {\n      logger_1.logger('Stage 0 - Initiator starting to send first message.');\n      const messageBuffer = this.xx.sendMessage(this.session, buffer_1.Buffer.alloc(0));\n      this.connection.writeLP(encoder_1.encode0(messageBuffer));\n      logger_1.logger('Stage 0 - Initiator finished sending first message.');\n      logger_1.logLocalEphemeralKeys(this.session.hs.e);\n    } else {\n      logger_1.logger('Stage 0 - Responder waiting to receive first message...');\n      const receivedMessageBuffer = encoder_1.decode0((await this.connection.readLP()).slice());\n\n      const _this$xx$recvMessage = this.xx.recvMessage(this.session, receivedMessageBuffer),\n            valid = _this$xx$recvMessage.valid;\n\n      if (!valid) {\n        throw new Error('xx handshake stage 0 validation fail');\n      }\n\n      logger_1.logger('Stage 0 - Responder received first message.');\n      logger_1.logRemoteEphemeralKey(this.session.hs.re);\n    }\n  } // stage 1\n\n\n  async exchange() {\n    if (this.isInitiator) {\n      logger_1.logger('Stage 1 - Initiator waiting to receive first message from responder...');\n      const receivedMessageBuffer = encoder_1.decode1((await this.connection.readLP()).slice());\n\n      const _this$xx$recvMessage2 = this.xx.recvMessage(this.session, receivedMessageBuffer),\n            plaintext = _this$xx$recvMessage2.plaintext,\n            valid = _this$xx$recvMessage2.valid;\n\n      if (!valid) {\n        throw new Error('xx handshake stage 1 validation fail');\n      }\n\n      logger_1.logger('Stage 1 - Initiator received the message.');\n      logger_1.logRemoteEphemeralKey(this.session.hs.re);\n      logger_1.logRemoteStaticKey(this.session.hs.rs);\n      logger_1.logger(\"Initiator going to check remote's signature...\");\n\n      try {\n        const decodedPayload = await utils_1.decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || (await utils_1.getPeerIdFromPayload(decodedPayload));\n        this.remotePeer = await utils_1.verifySignedPayload(receivedMessageBuffer.ns, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n      } catch (e) {\n        throw new Error(\"Error occurred while verifying signed payload: \".concat(e.message));\n      }\n\n      logger_1.logger('All good with the signature!');\n    } else {\n      logger_1.logger('Stage 1 - Responder sending out first message with signed payload and static key.');\n      const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encoder_1.encode1(messageBuffer));\n      logger_1.logger('Stage 1 - Responder sent the second handshake message with signed payload.');\n      logger_1.logLocalEphemeralKeys(this.session.hs.e);\n    }\n  } // stage 2\n\n\n  async finish() {\n    if (this.isInitiator) {\n      logger_1.logger('Stage 2 - Initiator sending third handshake message.');\n      const messageBuffer = this.xx.sendMessage(this.session, this.payload);\n      this.connection.writeLP(encoder_1.encode2(messageBuffer));\n      logger_1.logger('Stage 2 - Initiator sent message with signed payload.');\n    } else {\n      logger_1.logger('Stage 2 - Responder waiting for third handshake message...');\n      const receivedMessageBuffer = encoder_1.decode2((await this.connection.readLP()).slice());\n\n      const _this$xx$recvMessage3 = this.xx.recvMessage(this.session, receivedMessageBuffer),\n            plaintext = _this$xx$recvMessage3.plaintext,\n            valid = _this$xx$recvMessage3.valid;\n\n      if (!valid) {\n        throw new Error('xx handshake stage 2 validation fail');\n      }\n\n      logger_1.logger('Stage 2 - Responder received the message, finished handshake.');\n\n      try {\n        const decodedPayload = await utils_1.decodePayload(plaintext);\n        this.remotePeer = this.remotePeer || (await utils_1.getPeerIdFromPayload(decodedPayload));\n        await utils_1.verifySignedPayload(this.session.hs.rs, decodedPayload, this.remotePeer);\n        this.setRemoteEarlyData(decodedPayload.data);\n      } catch (e) {\n        throw new Error(\"Error occurred while verifying signed payload: \".concat(e.message));\n      }\n    }\n\n    logger_1.logCipherState(this.session);\n  }\n\n  encrypt(plaintext, session) {\n    const cs = this.getCS(session);\n    return this.xx.encryptWithAd(cs, buffer_1.Buffer.alloc(0), plaintext);\n  }\n\n  decrypt(ciphertext, session) {\n    const cs = this.getCS(session, false);\n    return this.xx.decryptWithAd(cs, buffer_1.Buffer.alloc(0), ciphertext);\n  }\n\n  getRemoteStaticKey() {\n    return this.session.hs.rs;\n  }\n\n  getCS(session, encryption = true) {\n    if (!session.cs1 || !session.cs2) {\n      throw new Error('Handshake not completed properly, cipher state does not exist.');\n    }\n\n    if (this.isInitiator) {\n      return encryption ? session.cs1 : session.cs2;\n    } else {\n      return encryption ? session.cs2 : session.cs1;\n    }\n  }\n\n  setRemoteEarlyData(data) {\n    if (data) {\n      this.remoteEarlyData = buffer_1.Buffer.from(data.buffer, data.byteOffset, data.length);\n    }\n  }\n\n}\n\nexports.XXHandshake = XXHandshake;","map":null,"metadata":{},"sourceType":"script"}