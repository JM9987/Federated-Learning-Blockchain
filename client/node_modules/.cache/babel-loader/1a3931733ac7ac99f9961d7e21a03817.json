{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getGossipPeers = void 0;\n\nconst utils_1 = require(\"./utils\");\n/**\n * Given a topic, returns up to count peers subscribed to that topic\n * that pass an optional filter function\n *\n * @param {Gossipsub} router\n * @param {String} topic\n * @param {Number} count\n * @param {Function} [filter] a function to filter acceptable peers\n * @returns {Set<string>}\n *\n */\n\n\nfunction getGossipPeers(router, topic, count, filter = () => true) {\n  const peersInTopic = router.topics.get(topic);\n\n  if (!peersInTopic) {\n    return new Set();\n  } // Adds all peers using our protocol\n  // that also pass the filter function\n\n\n  let peers = [];\n  peersInTopic.forEach(id => {\n    const peerStreams = router.peers.get(id);\n\n    if (!peerStreams) {\n      return;\n    }\n\n    if (utils_1.hasGossipProtocol(peerStreams.protocol) && filter(id)) {\n      peers.push(id);\n    }\n  }); // Pseudo-randomly shuffles peers\n\n  peers = utils_1.shuffle(peers);\n\n  if (count > 0 && peers.length > count) {\n    peers = peers.slice(0, count);\n  }\n\n  return new Set(peers);\n}\n\nexports.getGossipPeers = getGossipPeers;","map":null,"metadata":{},"sourceType":"script"}