{"ast":null,"code":"'use strict';\n\nconst keysPBM = require('./keys');\n\nrequire('node-forge/lib/asn1');\n\nrequire('node-forge/lib/pbe');\n\nconst forge = require('node-forge/lib/forge');\n\nconst errcode = require('err-code');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst importer = require('./importer');\n\nconst supportedKeys = {\n  rsa: require('./rsa-class'),\n  ed25519: require('./ed25519-class'),\n  secp256k1: require('./secp256k1-class')(keysPBM, require('../random-bytes'))\n};\nconst ErrMissingSecp256K1 = {\n  message: 'secp256k1 support requires libp2p-crypto-secp256k1 package',\n  code: 'ERR_MISSING_PACKAGE'\n};\n\nfunction typeToKey(type) {\n  const key = supportedKeys[type.toLowerCase()];\n\n  if (!key) {\n    const supported = Object.keys(supportedKeys).join(' / ');\n    throw errcode(new Error(\"invalid or unsupported key type \".concat(type, \". Must be \").concat(supported)), 'ERR_UNSUPPORTED_KEY_TYPE');\n  }\n\n  return key;\n} // Generates a keypair of the given type and bitsize\n\n\nconst generateKeyPair = async (type, bits) => {\n  // eslint-disable-line require-await\n  return typeToKey(type).generateKeyPair(bits);\n}; // Generates a keypair of the given type and bitsize\n// seed is a 32 byte uint8array\n\n\nconst generateKeyPairFromSeed = async (type, seed, bits) => {\n  // eslint-disable-line require-await\n  const key = typeToKey(type);\n\n  if (type.toLowerCase() !== 'ed25519') {\n    throw errcode(new Error('Seed key derivation is unimplemented for RSA or secp256k1'), 'ERR_UNSUPPORTED_KEY_DERIVATION_TYPE');\n  }\n\n  return key.generateKeyPairFromSeed(seed, bits);\n}; // Converts a protobuf serialized public key into its\n// representative object\n\n\nconst unmarshalPublicKey = buf => {\n  const decoded = keysPBM.PublicKey.decode(buf);\n  const data = decoded.Data;\n\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPublicKey(data);\n\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PublicKey(data);\n\n    case keysPBM.KeyType.Secp256k1:\n      if (supportedKeys.secp256k1) {\n        return supportedKeys.secp256k1.unmarshalSecp256k1PublicKey(data);\n      } else {\n        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);\n      }\n\n    default:\n      typeToKey(decoded.Type);\n    // throws because type is not supported\n  }\n}; // Converts a public key object into a protobuf serialized public key\n\n\nconst marshalPublicKey = (key, type) => {\n  type = (type || 'rsa').toLowerCase();\n  typeToKey(type); // check type\n\n  return key.bytes;\n}; // Converts a protobuf serialized private key into its\n// representative object\n\n\nconst unmarshalPrivateKey = async buf => {\n  // eslint-disable-line require-await\n  const decoded = keysPBM.PrivateKey.decode(buf);\n  const data = decoded.Data;\n\n  switch (decoded.Type) {\n    case keysPBM.KeyType.RSA:\n      return supportedKeys.rsa.unmarshalRsaPrivateKey(data);\n\n    case keysPBM.KeyType.Ed25519:\n      return supportedKeys.ed25519.unmarshalEd25519PrivateKey(data);\n\n    case keysPBM.KeyType.Secp256k1:\n      if (supportedKeys.secp256k1) {\n        return supportedKeys.secp256k1.unmarshalSecp256k1PrivateKey(data);\n      } else {\n        throw errcode(new Error(ErrMissingSecp256K1.message), ErrMissingSecp256K1.code);\n      }\n\n    default:\n      typeToKey(decoded.Type);\n    // throws because type is not supported\n  }\n}; // Converts a private key object into a protobuf serialized private key\n\n\nconst marshalPrivateKey = (key, type) => {\n  type = (type || 'rsa').toLowerCase();\n  typeToKey(type); // check type\n\n  return key.bytes;\n};\n/**\n *\n * @param {string} encryptedKey\n * @param {string} password\n */\n\n\nconst importKey = async (encryptedKey, password) => {\n  // eslint-disable-line require-await\n  try {\n    const key = await importer.import(encryptedKey, password);\n    return unmarshalPrivateKey(key);\n  } catch (_) {} // Ignore and try the old pem decrypt\n  // Only rsa supports pem right now\n\n\n  const key = forge.pki.decryptRsaPrivateKey(encryptedKey, password);\n\n  if (key === null) {\n    throw errcode(new Error('Cannot read the key, most likely the password is wrong or not a RSA key'), 'ERR_CANNOT_DECRYPT_PEM');\n  }\n\n  let der = forge.asn1.toDer(forge.pki.privateKeyToAsn1(key));\n  der = uint8ArrayFromString(der.getBytes(), 'ascii');\n  return supportedKeys.rsa.unmarshalRsaPrivateKey(der);\n};\n\nmodule.exports = {\n  supportedKeys,\n  keysPBM,\n  keyStretcher: require('./key-stretcher'),\n  generateEphemeralKeyPair: require('./ephemeral-keys'),\n  generateKeyPair,\n  generateKeyPairFromSeed,\n  unmarshalPublicKey,\n  marshalPublicKey,\n  unmarshalPrivateKey,\n  marshalPrivateKey,\n  import: importKey\n};","map":null,"metadata":{},"sourceType":"script"}