{"ast":null,"code":"'use strict';\n\nconst Block = require('ipld-block');\n\nconst multihashing = require('multihashing-async');\n\nconst CID = require('cids');\n\nconst isIPFS = require('is-ipfs');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').BlockService} config.blockService\n * @param {import('.').Pin} config.pin\n * @param {import('.').GCLock} config.gcLock\n * @param {import('.').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  blockService,\n  pin,\n  gcLock,\n  preload\n}) => {\n  /**\n   * Stores input as an IPFS block.\n   *\n   * **Note:** If you pass a `Block` instance as the block parameter, you\n   * don't need to pass options, as the block instance will carry the CID\n   * value as a property.\n   *\n   * @example\n   * ```js\n   * // Defaults\n   * const encoder = new TextEncoder()\n   * const decoder = new TextDecoder()\n   *\n   * const bytes = encoder.encode('a serialized object')\n   * const block = await ipfs.block.put(bytes)\n   *\n   * console.log(decoder.decode(block.data))\n   * // Logs:\n   * // a serialized object\n   * console.log(block.cid.toString())\n   * // Logs:\n   * // the CID of the object\n   *\n   * // With custom format and hashtype through CID\n   * const CID = require('cids')\n   * const another = encoder.encode('another serialized object')\n   * const cid = new CID(1, 'dag-pb', multihash)\n   * const block = await ipfs.block.put(another, cid)\n   * console.log(decoder.decode(block.data))\n   *\n   * // Logs:\n   * // a serialized object\n   * console.log(block.cid.toString())\n   * // Logs:\n   * // the CID of the object\n   * ```\n   *\n   * @param {IPLDBlock|Uint8Array} block - The block or data to store\n   * @param {PutOptions & AbortOptions} [options] - **Note:** If you pass a `Block` instance as the block parameter, you don't need to pass options, as the block instance will carry the CID value as a property.\n   * @returns {Promise<IPLDBlock>} - A Block type object, containing both the data and the hash of the block\n   */\n  async function put(block, options = {}) {\n    if (Array.isArray(block)) {\n      throw new Error('Array is not supported');\n    }\n\n    if (!Block.isBlock(block)) {\n      /** @type {Uint8Array} */\n      const bytes = block;\n\n      if (options.cid && isIPFS.cid(options.cid)) {\n        const cid = CID.isCID(options.cid) ? options.cid : new CID(options.cid);\n        block = new Block(bytes, cid);\n      } else {\n        const mhtype = options.mhtype || 'sha2-256';\n        const format = options.format || 'dag-pb';\n        /** @type {CIDVersion} */\n\n        let cidVersion = 1;\n\n        if (options.version == null) {\n          // Pick appropriate CID version\n          cidVersion = mhtype === 'sha2-256' && format === 'dag-pb' ? 0 : 1;\n        } else {\n          // @ts-ignore - options.version is a {number} but the CID constructor arg version is a {0|1}\n          // TODO: https://github.com/multiformats/js-cid/pull/129\n          cidVersion = options.version;\n        }\n\n        const multihash = await multihashing(bytes, mhtype);\n        const cid = new CID(cidVersion, format, multihash);\n        block = new Block(bytes, cid);\n      }\n    }\n\n    const release = await gcLock.readLock();\n\n    try {\n      await blockService.put(block, {\n        signal: options.signal\n      });\n\n      if (options.preload !== false) {\n        preload(block.cid);\n      }\n\n      if (options.pin === true) {\n        await pin.add(block.cid, {\n          recursive: true,\n          signal: options.signal\n        });\n      }\n\n      return block;\n    } finally {\n      release();\n    }\n  }\n\n  return withTimeoutOption(put);\n};\n/**\n * @typedef {Object} PutOptions\n * @property {CID} [cid] - A CID to store the block under (default: `undefined`)\n * @property {string} [format='dag-pb'] - The codec to use to create the CID (default: `'dag-pb'`)\n * @property {import('multihashes').HashName} [mhtype='sha2-256'] - The hashing algorithm to use to create the CID (default: `'sha2-256'`)\n * @property {number} [mhlen]\n * @property {CIDVersion} [version=0] - The version to use to create the CID (default: `0`)\n * @property {boolean} [pin=false] - If true, pin added blocks recursively (default: `false`)\n * @property {boolean} [preload]\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('.').IPLDBlock} IPLDBlock\n * @typedef {0|1} CIDVersion\n */","map":null,"metadata":{},"sourceType":"script"}