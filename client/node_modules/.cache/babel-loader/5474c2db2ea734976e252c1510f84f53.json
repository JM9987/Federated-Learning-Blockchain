{"ast":null,"code":"'use strict';\n/**\n * Turns a browser readable stream into an async iterable. Async iteration over\n * returned iterable will lock give stream, preventing any other consumer from\n * acquiring a reader. The lock will be released if iteration loop is broken. To\n * prevent stream cancelling optional `{ preventCancel: true }` could be passed\n * as a second argument.\n * @template T\n * @param {ReadableStream<T>} stream\n * @param {Object} [options]\n * @param {boolean} [options.preventCancel=boolean]\n * @returns {AsyncIterable<T>}\n */\n\nasync function* browserReadableStreamToIt(stream, options = {}) {\n  const reader = stream.getReader();\n\n  try {\n    while (true) {\n      const result = await reader.read();\n\n      if (result.done) {\n        return;\n      }\n\n      yield result.value;\n    }\n  } finally {\n    if (options.preventCancel !== true) {\n      reader.cancel();\n    }\n\n    reader.releaseLock();\n  }\n}\n\nmodule.exports = browserReadableStreamToIt;","map":null,"metadata":{},"sourceType":"script"}