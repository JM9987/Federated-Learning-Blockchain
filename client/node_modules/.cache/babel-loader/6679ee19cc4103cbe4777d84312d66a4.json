{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst multiaddr = require('multiaddr');\n\nconst errCode = require('err-code');\n\nconst _require = require('./status'),\n      OPEN = _require.OPEN,\n      CLOSING = _require.CLOSING,\n      CLOSED = _require.CLOSED;\n\nconst connectionSymbol = Symbol.for('@libp2p/interface-connection/connection');\n/**\n * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('./status').Status} Status\n */\n\n/**\n * @typedef {Object} Timeline\n * @property {number} open - connection opening timestamp.\n * @property {number} [upgraded] - connection upgraded timestamp.\n * @property {number} [close]\n *\n * @typedef {Object} ConectionStat\n * @property {'inbound' | 'outbound'} direction - connection establishment direction\n * @property {Timeline} timeline - connection relevant events timestamp.\n * @property {string} [multiplexer] - connection multiplexing identifier.\n * @property {string} [encryption] - connection encryption method identifier.\n *\n * @typedef {Object} ConnectionOptions\n * @property {multiaddr} [localAddr] - local multiaddr of the connection if known.\n * @property {multiaddr} remoteAddr - remote multiaddr of the connection.\n * @property {PeerId} localPeer - local peer-id.\n * @property {PeerId} remotePeer - remote peer-id.\n * @property {(protocols: string|string[]) => Promise<{stream: MuxedStream, protocol: string}>} newStream - new stream muxer function.\n * @property {() => Promise<void>} close - close raw connection function.\n * @property {() => MuxedStream[]} getStreams - get streams from muxer function.\n * @property {ConectionStat} stat - metadata of the connection.\n *\n * @typedef {Object} StreamData\n * @property {string} protocol - the protocol used by the stream\n * @property {Object} [metadata] - metadata of the stream\n */\n\n/**\n * An implementation of the js-libp2p connection.\n * Any libp2p transport should use an upgrader to return this connection.\n */\n\nclass Connection {\n  /**\n   * An implementation of the js-libp2p connection.\n   * Any libp2p transport should use an upgrader to return this connection.\n   *\n   * @class\n   * @param {ConnectionOptions} options\n   */\n  constructor({\n    localAddr,\n    remoteAddr,\n    localPeer,\n    remotePeer,\n    newStream,\n    close,\n    getStreams,\n    stat\n  }) {\n    validateArgs(localAddr, localPeer, remotePeer, newStream, close, getStreams, stat);\n    /**\n     * Connection identifier.\n     */\n\n    this.id = parseInt(String(Math.random() * 1e9)).toString(36) + Date.now();\n    /**\n     * Observed multiaddr of the local peer\n     */\n\n    this.localAddr = localAddr;\n    /**\n     * Observed multiaddr of the remote peer\n     */\n\n    this.remoteAddr = remoteAddr;\n    /**\n     * Local peer id.\n     */\n\n    this.localPeer = localPeer;\n    /**\n     * Remote peer id.\n     */\n\n    this.remotePeer = remotePeer;\n    /**\n     * Connection metadata.\n     *\n     * @type {ConectionStat & {status: Status}}\n     */\n\n    this._stat = { ...stat,\n      status: OPEN\n    };\n    /**\n     * Reference to the new stream function of the multiplexer\n     */\n\n    this._newStream = newStream;\n    /**\n     * Reference to the close function of the raw connection\n     */\n\n    this._close = close;\n    /**\n     * Reference to the getStreams function of the muxer\n     */\n\n    this._getStreams = getStreams;\n    /**\n     * Connection streams registry\n     */\n\n    this.registry = new Map();\n    /**\n     * User provided tags\n     *\n     * @type {string[]}\n     */\n\n    this.tags = [];\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Connection';\n  }\n\n  get [connectionSymbol]() {\n    return true;\n  }\n  /**\n   * Checks if the given value is a `Connection` instance.\n   *\n   * @param {any} other\n   * @returns {other is Connection}\n   */\n\n\n  static isConnection(other) {\n    return Boolean(other && other[connectionSymbol]);\n  }\n  /**\n   * Get connection metadata\n   *\n   * @this {Connection}\n   */\n\n\n  get stat() {\n    return this._stat;\n  }\n  /**\n   * Get all the streams of the muxer.\n   *\n   * @this {Connection}\n   */\n\n\n  get streams() {\n    return this._getStreams();\n  }\n  /**\n   * Create a new stream from this connection\n   *\n   * @param {string|string[]} protocols - intended protocol for the stream\n   * @returns {Promise<{stream: MuxedStream, protocol: string}>} with muxed+multistream-selected stream and selected protocol\n   */\n\n\n  async newStream(protocols) {\n    if (this.stat.status === CLOSING) {\n      throw errCode(new Error('the connection is being closed'), 'ERR_CONNECTION_BEING_CLOSED');\n    }\n\n    if (this.stat.status === CLOSED) {\n      throw errCode(new Error('the connection is closed'), 'ERR_CONNECTION_CLOSED');\n    }\n\n    if (!Array.isArray(protocols)) protocols = [protocols];\n\n    const _ref = await this._newStream(protocols),\n          stream = _ref.stream,\n          protocol = _ref.protocol;\n\n    this.addStream(stream, {\n      protocol\n    });\n    return {\n      stream,\n      protocol\n    };\n  }\n  /**\n   * Add a stream when it is opened to the registry.\n   *\n   * @param {MuxedStream} muxedStream - a muxed stream\n   * @param {StreamData} data - the stream data to be registered\n   * @returns {void}\n   */\n\n\n  addStream(muxedStream, {\n    protocol,\n    metadata = {}\n  }) {\n    // Add metadata for the stream\n    this.registry.set(muxedStream.id, {\n      protocol,\n      ...metadata\n    });\n  }\n  /**\n   * Remove stream registry after it is closed.\n   *\n   * @param {string} id - identifier of the stream\n   */\n\n\n  removeStream(id) {\n    this.registry.delete(id);\n  }\n  /**\n   * Close the connection.\n   *\n   * @returns {Promise<void>}\n   */\n\n\n  async close() {\n    if (this.stat.status === CLOSED) {\n      return;\n    }\n\n    if (this._closing) {\n      return this._closing;\n    }\n\n    this.stat.status = CLOSING; // Close raw connection\n\n    this._closing = await this._close();\n    this._stat.timeline.close = Date.now();\n    this.stat.status = CLOSED;\n  }\n\n}\n\nmodule.exports = Connection;\n\nfunction validateArgs(localAddr, localPeer, remotePeer, newStream, close, getStreams, stat) {\n  if (localAddr && !multiaddr.isMultiaddr(localAddr)) {\n    throw errCode(new Error('localAddr must be an instance of multiaddr'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!PeerId.isPeerId(localPeer)) {\n    throw errCode(new Error('localPeer must be an instance of peer-id'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!PeerId.isPeerId(remotePeer)) {\n    throw errCode(new Error('remotePeer must be an instance of peer-id'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (typeof newStream !== 'function') {\n    throw errCode(new Error('new stream must be a function'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (typeof close !== 'function') {\n    throw errCode(new Error('close must be a function'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (typeof getStreams !== 'function') {\n    throw errCode(new Error('getStreams must be a function'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!stat) {\n    throw errCode(new Error('connection metadata object must be provided'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (stat.direction !== 'inbound' && stat.direction !== 'outbound') {\n    throw errCode(new Error('direction must be \"inbound\" or \"outbound\"'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!stat.timeline) {\n    throw errCode(new Error('connection timeline object must be provided in the stat object'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!stat.timeline.open) {\n    throw errCode(new Error('connection open timestamp must be provided'), 'ERR_INVALID_PARAMETERS');\n  }\n\n  if (!stat.timeline.upgraded) {\n    throw errCode(new Error('connection upgraded timestamp must be provided'), 'ERR_INVALID_PARAMETERS');\n  }\n}","map":null,"metadata":{},"sourceType":"script"}