{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst errCode = require('err-code');\n\nconst _require = require('../errors'),\n      NotEnabledError = _require.NotEnabledError;\n\nconst get = require('dlv');\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n * @param {import('.').IPFSConfig} [config.config]\n */\n\n\nmodule.exports = ({\n  network,\n  config\n}) => {\n  const isEnabled = get(config, 'Pubsub.Enabled', true);\n  return {\n    subscribe: isEnabled ? withTimeoutOption(subscribe) : notEnabled,\n    unsubscribe: isEnabled ? withTimeoutOption(unsubscribe) : notEnabled,\n    publish: isEnabled ? withTimeoutOption(publish) : notEnabled,\n    ls: isEnabled ? withTimeoutOption(ls) : notEnabled,\n    peers: isEnabled ? withTimeoutOption(peers) : notEnabled\n  };\n  /**\n   * Subscribe to a pubsub topic.\n   *\n   * @example\n   * ```js\n   * const topic = 'fruit-of-the-day'\n   * const receiveMsg = (msg) => console.log(msg.data.toString())\n   *\n   * await ipfs.pubsub.subscribe(topic, receiveMsg)\n   * console.log(`subscribed to ${topic}`)\n   * ```\n   *\n   * @param {string} topic - The topic name\n   * @param {(message:Message) => void} handler - Event handler which will be\n   * called with a message object everytime one is received.\n   * @param {AbortOptions} [options]\n   * @returns {Promise<void>}\n   */\n\n  async function subscribe(topic, handler, options) {\n    const _ref = await network.use(options),\n          libp2p = _ref.libp2p; // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n\n\n    return libp2p.pubsub.subscribe(topic, handler, options);\n  }\n  /**\n   * Unsubscribes from a pubsub topic.\n   *\n   * @example\n   * ```js\n   * const topic = 'fruit-of-the-day'\n   * const receiveMsg = (msg) => console.log(msg.toString())\n   *\n   * await ipfs.pubsub.subscribe(topic, receiveMsg)\n   * console.log(`subscribed to ${topic}`)\n   *\n   * await ipfs.pubsub.unsubscribe(topic, receiveMsg)\n   * console.log(`unsubscribed from ${topic}`)\n   *\n   * // Or removing all listeners:\n   *\n   * const topic = 'fruit-of-the-day'\n   * const receiveMsg = (msg) => console.log(msg.toString())\n   * await ipfs.pubsub.subscribe(topic, receiveMsg);\n   * // Will unsubscribe ALL handlers for the given topic\n   * await ipfs.pubsub.unsubscribe(topic);\n   * ```\n   *\n   * @param {string} topic - The topic to unsubscribe from\n   * @param {(message:Message) => void} [handler] - The handler to remove. If\n   * not provided unsubscribes al handlers for the topic.\n   * @param {AbortOptions} [options]\n   * @returns {Promise<void>}\n   */\n\n\n  async function unsubscribe(topic, handler, options) {\n    const _ref2 = await network.use(options),\n          libp2p = _ref2.libp2p; // @ts-ignore Libp2p Pubsub is deprecating the handler, using the EventEmitter\n\n\n    libp2p.pubsub.unsubscribe(topic, handler, options);\n  }\n  /**\n   * Publish a data message to a pubsub topic.\n   *\n   * @example\n   * ```js\n   * const topic = 'fruit-of-the-day'\n   * const msg = new TextEncoder().encode('banana')\n   *\n   * await ipfs.pubsub.publish(topic, msg)\n   * // msg was broadcasted\n   * console.log(`published to ${topic}`)\n   * ```\n   *\n   * @param {string} topic\n   * @param {Uint8Array} data\n   * @param {AbortOptions} options\n   * @returns {Promise<void>}\n   */\n\n\n  async function publish(topic, data, options) {\n    const _ref3 = await network.use(options),\n          libp2p = _ref3.libp2p;\n\n    if (!data) {\n      throw errCode(new Error('argument \"data\" is required'), 'ERR_ARG_REQUIRED');\n    }\n\n    await libp2p.pubsub.publish(topic, data);\n  }\n  /**\n   * Returns the list of subscriptions the peer is subscribed to.\n   *\n   * @param {AbortOptions} [options]\n   * @returns {Promise<string[]>}\n   */\n\n\n  async function ls(options) {\n    const _ref4 = await network.use(options),\n          libp2p = _ref4.libp2p;\n\n    return libp2p.pubsub.getTopics();\n  }\n  /**\n   * Returns the peers that are subscribed to one topic.\n   *\n   * @example\n   * ```js\n   * const topic = 'fruit-of-the-day'\n   *\n   * const peerIds = await ipfs.pubsub.peers(topic)\n   * console.log(peerIds)\n   * ```\n   *\n   * @param {string} topic\n   * @param {AbortOptions} [options]\n   * @returns {Promise<string[]>} - An array of peer IDs subscribed to the topic\n   */\n\n\n  async function peers(topic, options) {\n    const _ref5 = await network.use(options),\n          libp2p = _ref5.libp2p;\n\n    return libp2p.pubsub.getSubscribers(topic);\n  }\n};\n\nconst notEnabled = async () => {\n  // eslint-disable-line require-await\n  throw new NotEnabledError('pubsub not enabled');\n};\n/**\n * @typedef {Object} Message\n * @property {string} from\n * @property {Uint8Array} seqno\n * @property {Uint8Array} data\n * @property {string[]} topicIDs\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}