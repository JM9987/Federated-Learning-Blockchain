{"ast":null,"code":"'use strict';\n\nconst PeerId = require('peer-id');\n\nconst _require = require('./index'),\n      Message = _require.Message;\n\nconst uint8ArrayConcat = require('uint8arrays/concat');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst SignPrefix = uint8ArrayFromString('libp2p-pubsub:');\n/**\n * Signs the provided message with the given `peerId`\n *\n * @param {PeerId} peerId\n * @param {Message} message\n * @returns {Promise<Message>}\n */\n\nasync function signMessage(peerId, message) {\n  // Get the message in bytes, and prepend with the pubsub prefix\n  const bytes = uint8ArrayConcat([SignPrefix, Message.encode(message)]);\n  const signature = await peerId.privKey.sign(bytes);\n  return { ...message,\n    signature: signature,\n    key: peerId.pubKey.bytes\n  };\n}\n/**\n * Verifies the signature of the given message\n *\n * @param {InMessage} message\n * @returns {Promise<boolean>}\n */\n\n\nasync function verifySignature(message) {\n  if (!message.signature) {\n    throw new Error('Message must contain a signature to be verified');\n  } // Get message sans the signature\n\n\n  const bytes = uint8ArrayConcat([SignPrefix, Message.encode({ ...message,\n    from: message.from && PeerId.createFromCID(message.from).toBytes(),\n    signature: undefined,\n    key: undefined\n  })]); // Get the public key\n\n  const pubKey = await messagePublicKey(message); // verify the base message\n\n  return pubKey.verify(bytes, message.signature);\n}\n/**\n * Returns the PublicKey associated with the given message.\n * If no, valid PublicKey can be retrieved an error will be returned.\n *\n * @param {InMessage} message\n * @returns {Promise<PublicKey>}\n */\n\n\nasync function messagePublicKey(message) {\n  // should be available in the from property of the message (peer id)\n  if (!message.from) {\n    throw new Error('Could not get the public key from the originator id');\n  }\n\n  const from = PeerId.createFromCID(message.from);\n\n  if (message.key) {\n    const keyPeerId = await PeerId.createFromPubKey(message.key); // the key belongs to the sender, return the key\n\n    if (keyPeerId.equals(from)) return keyPeerId.pubKey; // We couldn't validate pubkey is from the originator, error\n\n    throw new Error('Public Key does not match the originator');\n  } else if (from.pubKey) {\n    return from.pubKey;\n  } else {\n    throw new Error('Could not get the public key from the originator id');\n  }\n}\n/**\n * @typedef {import('..').InMessage} InMessage\n * @typedef {import('libp2p-crypto').PublicKey} PublicKey\n */\n\n\nmodule.exports = {\n  messagePublicKey,\n  signMessage,\n  SignPrefix,\n  verifySignature\n};","map":null,"metadata":{},"sourceType":"script"}