{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/ubuntu/Codigo_Javier/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst _require = require('libp2p-record'),\n      Record = _require.Record;\n\nconst errcode = require('err-code');\n\nconst Message = require('../../message');\n\nconst utils = require('../../utils');\n\nmodule.exports = dht => {\n  const log = utils.logger(dht.peerId, 'rpc:get-value');\n  /**\n   * Process `GetValue` DHT messages.\n   *\n   * @param {PeerId} peerId\n   * @param {Message} msg\n   * @returns {Promise<Message>}\n   */\n\n  return async function getValue(peerId, msg) {\n    const key = msg.key;\n    log('key: %b', key);\n\n    if (!key || key.length === 0) {\n      throw errcode(new Error('Invalid key'), 'ERR_INVALID_KEY');\n    }\n\n    const response = new Message(Message.TYPES.GET_VALUE, key, msg.clusterLevel);\n\n    if (utils.isPublicKeyKey(key)) {\n      log('is public key');\n      const idFromKey = utils.fromPublicKeyKey(key);\n      let id;\n\n      if (dht._isSelf(idFromKey)) {\n        id = dht.peerId;\n      } else {\n        const peerData = dht.peerStore.get(idFromKey);\n        id = peerData && peerData.id;\n      }\n\n      if (id && id.pubKey) {\n        log('returning found public key');\n        response.record = new Record(key, id.pubKey.bytes);\n        return response;\n      }\n    }\n\n    const _ref = await Promise.all([dht._checkLocalDatastore(key), dht._betterPeersToQuery(msg, peerId)]),\n          _ref2 = _slicedToArray(_ref, 2),\n          record = _ref2[0],\n          closer = _ref2[1];\n\n    if (record) {\n      log('got record');\n      response.record = record;\n    }\n\n    if (closer.length > 0) {\n      log('got closer %s', closer.length);\n      response.closerPeers = closer;\n    }\n\n    return response;\n  };\n};","map":null,"metadata":{},"sourceType":"script"}