{"ast":null,"code":"/* @flow */\n'use strict';\n\nconst _require = require('interface-datastore'),\n      Adapter = _require.Adapter,\n      Key = _require.Key,\n      Errors = _require.Errors,\n      _require$utils = _require.utils,\n      filter = _require$utils.filter,\n      take = _require$utils.take,\n      sortAll = _require$utils.sortAll,\n      replaceStartWith = _require$utils.replaceStartWith;\n\nconst Keytransform = require('./keytransform');\n/**\n * @typedef {import('interface-datastore').Datastore} Datastore\n * @typedef {import('interface-datastore').Options} Options\n * @typedef {import('interface-datastore').Batch} Batch\n * @typedef {import('interface-datastore').Query} Query\n * @typedef {import('interface-datastore').Pair} Pair\n */\n\n/**\n * @template TEntry\n * @typedef {import('./types').AwaitIterable<TEntry>} AwaitIterable\n */\n\n/**\n * A datastore that can combine multiple stores inside various\n * key prefixs.\n *\n * @implements {Datastore}\n */\n\n\nclass MountDatastore extends Adapter {\n  /**\n   *\n   * @param {Array<{prefix: Key, datastore: Datastore}>} mounts\n   */\n  constructor(mounts) {\n    super();\n    this.mounts = mounts.slice();\n  }\n\n  async open() {\n    await Promise.all(this.mounts.map(m => m.datastore.open()));\n  }\n  /**\n   * Lookup the matching datastore for the given key.\n   *\n   * @private\n   * @param {Key} key\n   * @returns {{datastore: Datastore, mountpoint: Key, rest: Key} | undefined}\n   */\n\n\n  _lookup(key) {\n    for (const mount of this.mounts) {\n      if (mount.prefix.toString() === key.toString() || mount.prefix.isAncestorOf(key)) {\n        const s = replaceStartWith(key.toString(), mount.prefix.toString());\n        return {\n          datastore: mount.datastore,\n          mountpoint: mount.prefix,\n          rest: new Key(s)\n        };\n      }\n    }\n  }\n  /**\n   * @param {Key} key\n   * @param {Uint8Array} value\n   * @param {Options} [options]\n   */\n\n\n  put(key, value, options) {\n    const match = this._lookup(key);\n\n    if (match == null) {\n      throw Errors.dbWriteFailedError(new Error('No datastore mounted for this key'));\n    }\n\n    return match.datastore.put(match.rest, value, options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  get(key, options) {\n    const match = this._lookup(key);\n\n    if (match == null) {\n      throw Errors.notFoundError(new Error('No datastore mounted for this key'));\n    }\n\n    return match.datastore.get(match.rest, options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  has(key, options) {\n    const match = this._lookup(key);\n\n    if (match == null) {\n      return Promise.resolve(false);\n    }\n\n    return match.datastore.has(match.rest, options);\n  }\n  /**\n   * @param {Key} key\n   * @param {Options} [options]\n   */\n\n\n  delete(key, options) {\n    const match = this._lookup(key);\n\n    if (match == null) {\n      throw Errors.dbDeleteFailedError(new Error('No datastore mounted for this key'));\n    }\n\n    return match.datastore.delete(match.rest, options);\n  }\n\n  async close() {\n    await Promise.all(this.mounts.map(m => {\n      return m.datastore.close();\n    }));\n  }\n  /**\n   * @returns {Batch}\n   */\n\n\n  batch() {\n    /** @type {Record<string, Batch>} */\n    const batchMounts = {};\n    /**\n     * @param {Key} key\n     */\n\n    const lookup = key => {\n      const match = this._lookup(key);\n\n      if (match == null) {\n        throw new Error('No datastore mounted for this key');\n      }\n\n      const m = match.mountpoint.toString();\n\n      if (batchMounts[m] == null) {\n        batchMounts[m] = match.datastore.batch();\n      }\n\n      return {\n        batch: batchMounts[m],\n        rest: match.rest\n      };\n    };\n\n    return {\n      put: (key, value) => {\n        const match = lookup(key);\n        match.batch.put(match.rest, value);\n      },\n      delete: key => {\n        const match = lookup(key);\n        match.batch.delete(match.rest);\n      },\n      commit: async options => {\n        await Promise.all(Object.keys(batchMounts).map(p => batchMounts[p].commit(options)));\n      }\n    };\n  }\n  /**\n   * @param {Query} q\n   * @param {Options} [options]\n   */\n\n\n  query(q, options) {\n    const qs = this.mounts.map(m => {\n      const ks = new Keytransform(m.datastore, {\n        convert: key => {\n          throw new Error('should never be called');\n        },\n        invert: key => {\n          return m.prefix.child(key);\n        }\n      });\n      let prefix;\n\n      if (q.prefix != null) {\n        prefix = replaceStartWith(q.prefix, m.prefix.toString());\n      }\n\n      return ks.query({\n        prefix: prefix,\n        filters: q.filters,\n        keysOnly: q.keysOnly\n      }, options);\n    });\n\n    let it = _many(qs);\n\n    if (q.filters) q.filters.forEach(f => {\n      it = filter(it, f);\n    });\n    if (q.orders) q.orders.forEach(o => {\n      it = sortAll(it, o);\n    });\n\n    if (q.offset != null) {\n      let i = 0;\n      it = filter(it, () => i++ >=\n      /** @type {number} */\n      q.offset);\n    }\n\n    if (q.limit != null) it = take(it, q.limit);\n    return it;\n  }\n\n}\n/**\n * @param {ArrayLike<AwaitIterable<Pair>>} iterable\n * @returns {AsyncIterable<Pair>}\n */\n\n\nfunction _many(iterable) {\n  return async function* () {\n    for (let i = 0; i < iterable.length; i++) {\n      for await (const v of iterable[i]) {\n        yield v;\n      }\n    }\n  }();\n}\n\nmodule.exports = MountDatastore;","map":null,"metadata":{},"sourceType":"script"}