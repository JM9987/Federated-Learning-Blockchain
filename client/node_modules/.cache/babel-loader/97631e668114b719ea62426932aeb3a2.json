{"ast":null,"code":"'use strict';\n\nconst multiaddr = require('multiaddr');\n\nconst _require = require('../protocol'),\n      CircuitRelay = _require.CircuitRelay;\n/**\n * @typedef {import('./stream-handler')} StreamHandler\n * @typedef {import('../../types').CircuitStatus} CircuitStatus\n */\n\n/**\n * Write a response\n *\n * @param {StreamHandler} streamHandler\n * @param {CircuitStatus} status\n */\n\n\nfunction writeResponse(streamHandler, status) {\n  streamHandler.write({\n    type: CircuitRelay.Type.STATUS,\n    code: status\n  });\n}\n/**\n * Validate incomming HOP/STOP message\n *\n * @param {*} msg - A CircuitRelay unencoded protobuf message\n * @param {StreamHandler} streamHandler\n */\n\n\nfunction validateAddrs(msg, streamHandler) {\n  try {\n    msg.dstPeer.addrs.forEach(addr => {\n      return multiaddr(addr);\n    });\n  } catch (err) {\n    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP ? CircuitRelay.Status.HOP_DST_MULTIADDR_INVALID : CircuitRelay.Status.STOP_DST_MULTIADDR_INVALID);\n    throw err;\n  }\n\n  try {\n    msg.srcPeer.addrs.forEach(addr => {\n      return multiaddr(addr);\n    });\n  } catch (err) {\n    writeResponse(streamHandler, msg.type === CircuitRelay.Type.HOP ? CircuitRelay.Status.HOP_SRC_MULTIADDR_INVALID : CircuitRelay.Status.STOP_SRC_MULTIADDR_INVALID);\n    throw err;\n  }\n}\n\nmodule.exports = {\n  validateAddrs\n};","map":null,"metadata":{},"sourceType":"script"}