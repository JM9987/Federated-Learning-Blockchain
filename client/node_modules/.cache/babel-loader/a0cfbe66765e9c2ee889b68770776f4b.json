{"ast":null,"code":"'use strict';\n/**\n * @typedef {import('libp2p-interfaces/src/pubsub').InMessage} InMessage\n * @typedef {import('libp2p-interfaces/src/pubsub')} PubsubRouter\n */\n// Pubsub adapter to keep API with handlers while not removed.\n\nfunction pubsubAdapter(PubsubRouter, libp2p, options) {\n  const pubsub = new PubsubRouter(libp2p, options);\n  pubsub._subscribeAdapter = pubsub.subscribe;\n  pubsub._unsubscribeAdapter = pubsub.unsubscribe;\n  /**\n   * Subscribes to a given topic.\n   *\n   * @override\n   * @param {string} topic\n   * @param {(msg: InMessage) => void} [handler]\n   * @returns {void}\n   */\n\n  function subscribe(topic, handler) {\n    // Bind provided handler\n    handler && pubsub.on(topic, handler);\n\n    pubsub._subscribeAdapter(topic);\n  }\n  /**\n   * Unsubscribe from the given topic.\n   *\n   * @override\n   * @param {string} topic\n   * @param {(msg: InMessage) => void} [handler]\n   * @returns {void}\n   */\n\n\n  function unsubscribe(topic, handler) {\n    if (!handler) {\n      pubsub.removeAllListeners(topic);\n    } else {\n      pubsub.removeListener(topic, handler);\n    }\n\n    if (pubsub.listenerCount(topic) === 0) {\n      pubsub._unsubscribeAdapter(topic);\n    }\n  }\n\n  pubsub.subscribe = subscribe;\n  pubsub.unsubscribe = unsubscribe;\n  return pubsub;\n}\n\nmodule.exports = pubsubAdapter;","map":null,"metadata":{},"sourceType":"script"}