{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/ubuntu/TFG_FL/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst Multiaddr = require('..'); // eslint-disable-line  no-unused-vars\n\n\nconst protocols = require('../protocols-table');\n\nconst _protocols = protocols('dnsaddr'),\n      dnsaddrCode = _protocols.code;\n/**\n * Resolver for dnsaddr addresses.\n *\n * @param {Multiaddr} addr\n * @returns {Promise<Array<string>>}\n */\n\n\nasync function dnsaddrResolver(addr) {\n  const _require = require('./dns'),\n        Resolver = _require.Resolver;\n\n  const resolver = new Resolver();\n  const peerId = addr.getPeerId();\n\n  const _ref = addr.stringTuples().find(([proto]) => proto === dnsaddrCode) || [],\n        _ref2 = _slicedToArray(_ref, 2),\n        hostname = _ref2[1];\n\n  const records = await resolver.resolveTxt(\"_dnsaddr.\".concat(hostname)); // @ts-ignore\n\n  let addresses = records.flat().map(a => a.split('=')[1]);\n\n  if (peerId) {\n    addresses = addresses.filter(entry => entry.includes(peerId));\n  }\n\n  return addresses;\n}\n\nmodule.exports = {\n  dnsaddrResolver\n};","map":null,"metadata":{},"sourceType":"script"}