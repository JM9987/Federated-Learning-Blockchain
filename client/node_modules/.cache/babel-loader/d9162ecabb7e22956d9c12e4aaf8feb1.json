{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/TFG_FL/client/src/CheckInforme.js\";\nimport React, { Component } from \"react\";\nimport commit from './resultados.json';\nvar data;\n\nclass CheckInforme extends Component {\n  constructor(...args) {\n    super(...args);\n\n    this.checkListener = async hash => {\n      let response = await this.props.functions.getInforme(hash);\n      this.setState({\n        response: response\n      });\n    };\n\n    this.checkFromFileListener = async file => {\n      let response = await this.props.functions.getInformeFromFile(file);\n      this.setState({\n        response: response\n      });\n    };\n\n    this.state = {\n      response: null,\n      listener: this.checkListener\n    };\n  }\n\n  render() {\n    let label, input, button, message;\n\n    if (this.state.listener == this.checkListener) {\n      label = \"Hash:\";\n      input = React.createElement(\"input\", {\n        type: \"text\",\n        id: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 26\n        },\n        __self: this\n      });\n      button = React.createElement(\"button\", {\n        className: \"buttonForm\",\n        onClick: () => this.state.listener(document.getElementById('content').value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 27\n        },\n        __self: this\n      }, \"Entrenar\");\n    } else {\n      label = \"Archivo:\";\n      input = React.createElement(\"input\", {\n        type: \"file\",\n        id: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 31\n        },\n        __self: this\n      });\n      button = React.createElement(\"button\", {\n        className: \"buttonForm\",\n        onClick: () => this.state.listener(document.getElementById('content').files[0]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32\n        },\n        __self: this\n      }, \"Entrenar\");\n    }\n\n    if (this.state.response != null) {\n      if (this.state.response.informe.exists) {\n        commit.data = commit.data + this.state.response.entidad + \":\" + Math.random() + \"\\n\";\n        const url = \"https://ipfs.infura.io/ipfs/\" + this.state.response.informe.CID;\n        message = React.createElement(\"div\", {\n          className: \"textForm\",\n          style: {\n            fontSize: \"15px\",\n            width: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 40\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 41\n          },\n          __self: this\n        }, \"Se ejecutar\\xE1 el siguiente modelo:\"), React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }, \"T\\xEDtulo:\"), \" \", this.state.response.informe.title, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 42\n          },\n          __self: this\n        }), React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }, \"Usuario del modelo:\"), \" \", this.state.response.entidad, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 43\n          },\n          __self: this\n        }), React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }, \"Hash:\"), \" \", this.state.response.informe.hashValue, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 44\n          },\n          __self: this\n        }), React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, \"URL:\"), \" \", React.createElement(\"a\", {\n          href: url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }, url), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 45\n          },\n          __self: this\n        })); // message = \n        //     <table style= {{width:'70%'}} >\n        //         <tr>\n        //             <th>TÃ­tulo</th>\n        //             <th>Owner</th>\n        //             <th>Hash</th>\n        //             <th>URL</th>\n        //         </tr>\n        //         <tr>\n        //             <td>{this.state.response.title}</td>\n        //             <td>{this.state.response.owner}</td>\n        //             <td>{this.state.response.hashValue}</td>\n        //             <td><a href={url}>{url}</a></td>\n        //         </tr>\n        //     </table>;\n      } else {\n        message = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }, \"No se ha encontrado el modelo.\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 63\n          },\n          __self: this\n        }));\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"maincomp registerform\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Entrenar modelo\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"textForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, label), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), input, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), button, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"textForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }, message));\n  }\n\n}\n\nexport default CheckInforme;","map":{"version":3,"sources":["/home/ubuntu/TFG_FL/client/src/CheckInforme.js"],"names":["React","Component","commit","data","CheckInforme","checkListener","hash","response","props","functions","getInforme","setState","checkFromFileListener","file","getInformeFromFile","state","listener","render","label","input","button","message","document","getElementById","value","files","informe","exists","entidad","Math","random","url","CID","fontSize","width","title","hashValue"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport commit from './resultados.json';\r\nvar data;\r\n\r\nclass CheckInforme extends Component {\r\n\r\n    checkListener = async (hash) => {\r\n        let response = await this.props.functions.getInforme(hash);\r\n        this.setState({response: response});\r\n    }\r\n\r\n    checkFromFileListener = async (file) => {\r\n        let response = await this.props.functions.getInformeFromFile(file);\r\n        this.setState({response: response});\r\n    }\r\n\r\n    state = {\r\n        response:null,\r\n        listener: this.checkListener\r\n    }\r\n\r\n    render() {\r\n        let label, input, button, message;\r\n        if (this.state.listener == this.checkListener) {\r\n            label = \"Hash:\";\r\n            input = <input type=\"text\" id=\"content\"></input>;\r\n            button = <button className=\"buttonForm\" onClick={() => this.state.listener(document.getElementById('content').value)}>\r\n                    Entrenar</button>;\r\n        } else {\r\n            label = \"Archivo:\";\r\n            input = <input type=\"file\" id=\"content\"></input>;\r\n            button = <button className=\"buttonForm\" onClick={() => this.state.listener(document.getElementById('content').files[0])}>\r\n                    Entrenar</button>;\r\n        }\r\n\r\n        if(this.state.response != null){\r\n            if(this.state.response.informe.exists){\r\n            commit.data = commit.data+this.state.response.entidad+\":\"+Math.random()+\"\\n\";\r\n                const url = \"https://ipfs.infura.io/ipfs/\" + this.state.response.informe.CID;\r\n                message = <div className=\"textForm\" style={{fontSize: \"15px\", width:\"100%\"}}>\r\n                    <h3>Se ejecutarÃ¡ el siguiente modelo:</h3>\r\n                    <b>TÃ­tulo:</b> {this.state.response.informe.title}<br/>\r\n                    <b>Usuario del modelo:</b> {this.state.response.entidad}<br/>\r\n                    <b>Hash:</b> {this.state.response.informe.hashValue}<br/>\r\n                    <b>URL:</b> <a href={url}>{url}</a><br/><br/>\r\n                </div>\r\n                // message = \r\n                //     <table style= {{width:'70%'}} >\r\n                //         <tr>\r\n                //             <th>TÃ­tulo</th>\r\n                //             <th>Owner</th>\r\n                //             <th>Hash</th>\r\n                //             <th>URL</th>\r\n                //         </tr>\r\n                //         <tr>\r\n                //             <td>{this.state.response.title}</td>\r\n                //             <td>{this.state.response.owner}</td>\r\n                //             <td>{this.state.response.hashValue}</td>\r\n                //             <td><a href={url}>{url}</a></td>\r\n                //         </tr>\r\n                //     </table>;\r\n            } else {\r\n                message = <div>No se ha encontrado el modelo.<br/></div>\r\n            }\r\n        }\r\n        \r\n\r\n\r\n        return(\r\n        <div className=\"maincomp registerform\">\r\n            <h1>Entrenar modelo</h1>\r\n            <br></br>\r\n            <span className=\"textForm\">{label}</span>\r\n            <br></br>\r\n            {input}\r\n            <br></br><br></br>\r\n            {button}\r\n            <br></br>\r\n            \r\n            <br></br>\r\n            <div className=\"textForm\">{message}</div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CheckInforme;\r\n"]},"metadata":{},"sourceType":"module"}