{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/ubuntu/Codigo_Javier/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:identify'), {\n  error: debug('libp2p:identify:err')\n});\n\nconst errCode = require('err-code');\n\nconst pb = require('it-protocol-buffers');\n\nconst lp = require('it-length-prefixed');\n\nconst _require = require('it-pipe'),\n      pipe = _require.pipe;\n\nconst _require2 = require('streaming-iterables'),\n      collect = _require2.collect,\n      take = _require2.take,\n      consume = _require2.consume;\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst PeerId = require('peer-id');\n\nconst multiaddr = require('multiaddr');\n\nconst _require3 = require('it-buffer'),\n      toBuffer = _require3.toBuffer;\n\nconst Message = require('./message');\n\nconst Envelope = require('../record/envelope');\n\nconst PeerRecord = require('../record/peer-record');\n\nconst _require4 = require('./consts'),\n      MULTICODEC_IDENTIFY = _require4.MULTICODEC_IDENTIFY,\n      MULTICODEC_IDENTIFY_PUSH = _require4.MULTICODEC_IDENTIFY_PUSH,\n      AGENT_VERSION = _require4.AGENT_VERSION,\n      PROTOCOL_VERSION = _require4.PROTOCOL_VERSION;\n\nconst _require5 = require('../errors'),\n      codes = _require5.codes;\n/**\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n\nclass IdentifyService {\n  /**\n   * @class\n   * @param {Object} options\n   * @param {import('../')} options.libp2p\n   */\n  constructor({\n    libp2p\n  }) {\n    this._libp2p = libp2p;\n    this.peerStore = libp2p.peerStore;\n    this.addressManager = libp2p.addressManager;\n    this.connectionManager = libp2p.connectionManager;\n    this.peerId = libp2p.peerId;\n    this.handleMessage = this.handleMessage.bind(this); // Store self host metadata\n\n    this._host = {\n      agentVersion: AGENT_VERSION,\n      protocolVersion: PROTOCOL_VERSION,\n      ...libp2p._options.host\n    };\n    this.peerStore.metadataBook.set(this.peerId, 'AgentVersion', uint8ArrayFromString(this._host.agentVersion));\n    this.peerStore.metadataBook.set(this.peerId, 'ProtocolVersion', uint8ArrayFromString(this._host.protocolVersion)); // When a new connection happens, trigger identify\n\n    this.connectionManager.on('peer:connect', connection => {\n      this.identify(connection).catch(log.error);\n    }); // When self multiaddrs change, trigger identify-push\n\n    this.peerStore.on('change:multiaddrs', ({\n      peerId\n    }) => {\n      if (peerId.toString() === this.peerId.toString()) {\n        this.pushToPeerStore();\n      }\n    }); // When self protocols change, trigger identify-push\n\n    this.peerStore.on('change:protocols', ({\n      peerId\n    }) => {\n      if (peerId.toString() === this.peerId.toString()) {\n        this.pushToPeerStore();\n      }\n    });\n  }\n  /**\n   * Send an Identify Push update to the list of connections\n   *\n   * @param {Connection[]} connections\n   * @returns {Promise<void[]>}\n   */\n\n\n  async push(connections) {\n    const signedPeerRecord = await this.peerStore.addressBook.getRawEnvelope(this.peerId);\n\n    const listenAddrs = this._libp2p.multiaddrs.map(ma => ma.bytes);\n\n    const protocols = this.peerStore.protoBook.get(this.peerId) || [];\n    const pushes = connections.map(async connection => {\n      try {\n        const _ref = await connection.newStream(MULTICODEC_IDENTIFY_PUSH),\n              stream = _ref.stream;\n\n        await pipe([{\n          listenAddrs,\n          signedPeerRecord,\n          protocols\n        }], pb.encode(Message), stream, consume);\n      } catch (err) {\n        // Just log errors\n        log.error('could not push identify update to peer', err);\n      }\n    });\n    return Promise.all(pushes);\n  }\n  /**\n   * Calls `push` for all peers in the `peerStore` that are connected\n   *\n   * @returns {void}\n   */\n\n\n  pushToPeerStore() {\n    // Do not try to push if libp2p node is not running\n    if (!this._libp2p.isStarted()) {\n      return;\n    }\n\n    const connections = [];\n    let connection;\n\n    for (const peer of this.peerStore.peers.values()) {\n      if (peer.protocols.includes(MULTICODEC_IDENTIFY_PUSH) && (connection = this.connectionManager.get(peer.id))) {\n        connections.push(connection);\n      }\n    }\n\n    this.push(connections);\n  }\n  /**\n   * Requests the `Identify` message from peer associated with the given `connection`.\n   * If the identified peer does not match the `PeerId` associated with the connection,\n   * an error will be thrown.\n   *\n   * @async\n   * @param {Connection} connection\n   * @returns {Promise<void>}\n   */\n\n\n  async identify(connection) {\n    const _ref2 = await connection.newStream(MULTICODEC_IDENTIFY),\n          stream = _ref2.stream;\n\n    const _ref3 = await pipe([], stream, lp.decode(), take(1), toBuffer, collect),\n          _ref4 = _slicedToArray(_ref3, 1),\n          data = _ref4[0];\n\n    if (!data) {\n      throw errCode(new Error('No data could be retrieved'), codes.ERR_CONNECTION_ENDED);\n    }\n\n    let message;\n\n    try {\n      message = Message.decode(data);\n    } catch (err) {\n      throw errCode(err, codes.ERR_INVALID_MESSAGE);\n    }\n\n    let _message = message,\n        publicKey = _message.publicKey,\n        listenAddrs = _message.listenAddrs,\n        protocols = _message.protocols,\n        observedAddr = _message.observedAddr,\n        signedPeerRecord = _message.signedPeerRecord;\n    const id = await PeerId.createFromPubKey(publicKey);\n\n    if (connection.remotePeer.toB58String() !== id.toB58String()) {\n      throw errCode(new Error('identified peer does not match the expected peer'), codes.ERR_INVALID_PEER);\n    } // Get the observedAddr if there is one\n\n\n    observedAddr = IdentifyService.getCleanMultiaddr(observedAddr);\n\n    try {\n      const envelope = await Envelope.openAndCertify(signedPeerRecord, PeerRecord.DOMAIN);\n\n      if (this.peerStore.addressBook.consumePeerRecord(envelope)) {\n        this.peerStore.protoBook.set(id, protocols);\n        return;\n      }\n    } catch (err) {\n      log('received invalid envelope, discard it and fallback to listenAddrs is available', err);\n    } // LEGACY: Update peers data in PeerStore\n\n\n    try {\n      this.peerStore.addressBook.set(id, listenAddrs.map(addr => multiaddr(addr)));\n    } catch (err) {\n      log.error('received invalid addrs', err);\n    }\n\n    this.peerStore.protoBook.set(id, protocols);\n    this.peerStore.metadataBook.set(id, 'AgentVersion', uint8ArrayFromString(message.agentVersion)); // TODO: Add and score our observed addr\n\n    log('received observed address of %s', observedAddr); // this.addressManager.addObservedAddr(observedAddr)\n  }\n  /**\n   * A handler to register with Libp2p to process identify messages.\n   *\n   * @param {Object} options\n   * @param {Connection} options.connection\n   * @param {MuxedStream} options.stream\n   * @param {string} options.protocol\n   * @returns {Promise<void>|undefined}\n   */\n\n\n  handleMessage({\n    connection,\n    stream,\n    protocol\n  }) {\n    switch (protocol) {\n      case MULTICODEC_IDENTIFY:\n        return this._handleIdentify({\n          connection,\n          stream\n        });\n\n      case MULTICODEC_IDENTIFY_PUSH:\n        return this._handlePush({\n          connection,\n          stream\n        });\n\n      default:\n        log.error('cannot handle unknown protocol %s', protocol);\n    }\n  }\n  /**\n   * Sends the `Identify` response with the Signed Peer Record\n   * to the requesting peer over the given `connection`\n   *\n   * @private\n   * @param {Object} options\n   * @param {MuxedStream} options.stream\n   * @param {Connection} options.connection\n   * @returns {Promise<void>}\n   */\n\n\n  async _handleIdentify({\n    connection,\n    stream\n  }) {\n    let publicKey = new Uint8Array(0);\n\n    if (this.peerId.pubKey) {\n      publicKey = this.peerId.pubKey.bytes;\n    }\n\n    const signedPeerRecord = await this.peerStore.addressBook.getRawEnvelope(this.peerId);\n    const protocols = this.peerStore.protoBook.get(this.peerId) || [];\n    const message = Message.encode({\n      protocolVersion: this._host.protocolVersion,\n      agentVersion: this._host.agentVersion,\n      publicKey,\n      listenAddrs: this._libp2p.multiaddrs.map(ma => ma.bytes),\n      signedPeerRecord,\n      observedAddr: connection.remoteAddr.bytes,\n      protocols\n    });\n\n    try {\n      await pipe([message], lp.encode(), stream, consume);\n    } catch (err) {\n      log.error('could not respond to identify request', err);\n    }\n  }\n  /**\n   * Reads the Identify Push message from the given `connection`\n   *\n   * @private\n   * @param {object} options\n   * @param {MuxedStream} options.stream\n   * @param {Connection} options.connection\n   * @returns {Promise<void>}\n   */\n\n\n  async _handlePush({\n    connection,\n    stream\n  }) {\n    let message;\n\n    try {\n      const _ref5 = await pipe([], stream, lp.decode(), take(1), toBuffer, collect),\n            _ref6 = _slicedToArray(_ref5, 1),\n            data = _ref6[0];\n\n      message = Message.decode(data);\n    } catch (err) {\n      return log.error('received invalid message', err);\n    }\n\n    const id = connection.remotePeer;\n\n    try {\n      const envelope = await Envelope.openAndCertify(message.signedPeerRecord, PeerRecord.DOMAIN);\n\n      if (this.peerStore.addressBook.consumePeerRecord(envelope)) {\n        this.peerStore.protoBook.set(id, message.protocols);\n        return;\n      }\n    } catch (err) {\n      log('received invalid envelope, discard it and fallback to listenAddrs is available', err);\n    } // LEGACY: Update peers data in PeerStore\n\n\n    try {\n      this.peerStore.addressBook.set(id, message.listenAddrs.map(addr => multiaddr(addr)));\n    } catch (err) {\n      log.error('received invalid addrs', err);\n    } // Update the protocols\n\n\n    this.peerStore.protoBook.set(id, message.protocols);\n  }\n  /**\n   * Takes the `addr` and converts it to a Multiaddr if possible\n   *\n   * @param {Uint8Array | string} addr\n   * @returns {multiaddr|null}\n   */\n\n\n  static getCleanMultiaddr(addr) {\n    if (addr && addr.length > 0) {\n      try {\n        return multiaddr(addr);\n      } catch (_) {\n        return null;\n      }\n    }\n\n    return null;\n  }\n\n}\n/**\n * The protocols the IdentifyService supports\n *\n * @property multicodecs\n */\n\n\nconst multicodecs = {\n  IDENTIFY: MULTICODEC_IDENTIFY,\n  IDENTIFY_PUSH: MULTICODEC_IDENTIFY_PUSH\n};\nIdentifyService.multicodecs = multicodecs;\nIdentifyService.Messsage = Message;\nmodule.exports = IdentifyService;","map":null,"metadata":{},"sourceType":"script"}