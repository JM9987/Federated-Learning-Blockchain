{"ast":null,"code":"'use strict';\n\nvar inherits = require('inherits');\n\nvar AbstractIterator = require('abstract-leveldown').AbstractIterator;\n\nvar createKeyRange = require('./util/key-range');\n\nvar deserialize = require('./util/deserialize');\n\nvar noop = function () {};\n\nmodule.exports = Iterator;\n\nfunction Iterator(db, location, options) {\n  AbstractIterator.call(this, db);\n  this._limit = options.limit;\n  this._count = 0;\n  this._callback = null;\n  this._cache = [];\n  this._completed = false;\n  this._aborted = false;\n  this._error = null;\n  this._transaction = null;\n  this._keys = options.keys;\n  this._values = options.values;\n  this._keyAsBuffer = options.keyAsBuffer;\n  this._valueAsBuffer = options.valueAsBuffer;\n\n  if (this._limit === 0) {\n    this._completed = true;\n    return;\n  }\n\n  try {\n    var keyRange = createKeyRange(options);\n  } catch (e) {\n    // The lower key is greater than the upper key.\n    // IndexedDB throws an error, but we'll just return 0 results.\n    this._completed = true;\n    return;\n  }\n\n  this.createIterator(location, keyRange, options.reverse);\n}\n\ninherits(Iterator, AbstractIterator);\n\nIterator.prototype.createIterator = function (location, keyRange, reverse) {\n  var self = this;\n  var transaction = this.db.db.transaction([location], 'readonly');\n  var store = transaction.objectStore(location);\n  var req = store.openCursor(keyRange, reverse ? 'prev' : 'next');\n\n  req.onsuccess = function (ev) {\n    var cursor = ev.target.result;\n    if (cursor) self.onItem(cursor);\n  };\n\n  this._transaction = transaction; // If an error occurs (on the request), the transaction will abort.\n\n  transaction.onabort = function () {\n    self.onAbort(self._transaction.error || new Error('aborted by user'));\n  };\n\n  transaction.oncomplete = function () {\n    self.onComplete();\n  };\n};\n\nIterator.prototype.onItem = function (cursor) {\n  this._cache.push(cursor.key, cursor.value);\n\n  if (this._limit <= 0 || ++this._count < this._limit) {\n    cursor.continue();\n  }\n\n  this.maybeNext();\n};\n\nIterator.prototype.onAbort = function (err) {\n  this._aborted = true;\n  this._error = err;\n  this.maybeNext();\n};\n\nIterator.prototype.onComplete = function () {\n  this._completed = true;\n  this.maybeNext();\n};\n\nIterator.prototype.maybeNext = function () {\n  if (this._callback) {\n    this._next(this._callback);\n\n    this._callback = null;\n  }\n};\n\nIterator.prototype._next = function (callback) {\n  if (this._aborted) {\n    // The error should be picked up by either next() or end().\n    var err = this._error;\n    this._error = null;\n\n    this._nextTick(callback, err);\n  } else if (this._cache.length > 0) {\n    var key = this._cache.shift();\n\n    var value = this._cache.shift();\n\n    if (this._keys && key !== undefined) {\n      key = this._deserializeKey(key, this._keyAsBuffer);\n    } else {\n      key = undefined;\n    }\n\n    if (this._values && value !== undefined) {\n      value = this._deserializeValue(value, this._valueAsBuffer);\n    } else {\n      value = undefined;\n    }\n\n    this._nextTick(callback, null, key, value);\n  } else if (this._completed) {\n    this._nextTick(callback);\n  } else {\n    this._callback = callback;\n  }\n}; // Exposed for the v4 to v5 upgrade utility\n\n\nIterator.prototype._deserializeKey = deserialize;\nIterator.prototype._deserializeValue = deserialize;\n\nIterator.prototype._end = function (callback) {\n  if (this._aborted || this._completed) {\n    return this._nextTick(callback, this._error);\n  } // Don't advance the cursor anymore, and the transaction will complete\n  // on its own in the next tick. This approach is much cleaner than calling\n  // transaction.abort() with its unpredictable event order.\n\n\n  this.onItem = noop;\n  this.onAbort = callback;\n  this.onComplete = callback;\n};","map":null,"metadata":{},"sourceType":"script"}