{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').Keychain} config.keychain\n */\n\n\nmodule.exports = ({\n  keychain\n}) => {\n  /**\n   * Rename a key\n   *\n   * @example\n   * ```js\n   * const key = await ipfs.key.rename('my-key', 'my-new-key')\n   *\n   * console.log(key)\n   * // { id: 'Qmd4xC46Um6s24MradViGLFtMitvrR4SVexKUgPgFjMNzg',\n   * //   was: 'my-key',\n   * //   now: 'my-new-key',\n   * //   overwrite: false }\n   * ```\n   * @param {string} oldName - The current key name\n   * @param {string} newName - The desired key name\n   * @returns {Promise<RenamedKey>}\n   */\n  const rename = async (oldName, newName) => {\n    const key = await keychain.renameKey(oldName, newName);\n    return {\n      was: oldName,\n      now: key.name,\n      id: key.id,\n      overwrite: false\n    };\n  };\n\n  return withTimeoutOption(rename);\n};\n/**\n * @typedef {Object} RenamedKey\n * @property {string} was - The name of the key\n * @property {string} now -  The hash of the key\n * @property {string} id\n * @property {boolean} overwrite\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}