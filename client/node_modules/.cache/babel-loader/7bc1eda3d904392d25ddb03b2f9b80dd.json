{"ast":null,"code":"'use strict';\n\nconst createGet = require('./get');\n\nconst createPut = require('./put');\n\nconst createRm = require('./rm');\n\nconst createStat = require('./stat');\n\nclass BlockAPI {\n  /**\n   * @param {Object} config\n   * @param {Preload} config.preload\n   * @param {BlockService} config.blockService\n   * @param {GCLock} config.gcLock\n   * @param {Pin} config.pin\n   * @param {PinManager} config.pinManager\n   */\n  constructor({\n    blockService,\n    preload,\n    gcLock,\n    pinManager,\n    pin\n  }) {\n    this.get = createGet({\n      blockService,\n      preload\n    });\n    this.put = createPut({\n      blockService,\n      preload,\n      gcLock,\n      pin\n    });\n    this.rm = createRm({\n      blockService,\n      gcLock,\n      pinManager\n    });\n    this.stat = createStat({\n      blockService,\n      preload\n    });\n  }\n\n}\n\nmodule.exports = BlockAPI;\n/**\n * @typedef {import('..').Preload} Preload\n * @typedef {import('..').BlockService} BlockService\n * @typedef {import('..').GCLock} GCLock\n * @typedef {import('..').Pin} Pin\n * @typedef {import('..').PinManager} PinManager\n * @typedef {import('..').AbortOptions} AbortOptions\n * @typedef {import('..').CID} CID\n * @typedef {import('..').IPLDBlock} IPLDBlock\n */","map":null,"metadata":{},"sourceType":"script"}