{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst Multiaddr = require('multiaddr');\n/**\n * @param {Object} config\n * @param {import('.').Repo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * Remove all peer addresses from the bootstrap list\n   *\n   * @param {AbortOptions} options\n   * @returns {Promise<Peers>}\n   * @example\n   * ```js\n   * const res = await ipfs.bootstrap.clear()\n   * console.log(res.Peers)\n   * // Logs:\n   * // [address1, address2, ...]\n   * ```\n   */\n  async function clear(options = {}) {\n    const config = await repo.config.getAll(options);\n    const removed = config.Bootstrap || [];\n    config.Bootstrap = [];\n    await repo.config.replace(config);\n    return {\n      Peers: removed.map(ma => new Multiaddr(ma))\n    };\n  }\n\n  return withTimeoutOption(clear);\n};\n/**\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('./utils').Peers} Peers\n */","map":null,"metadata":{},"sourceType":"script"}