{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n/**\n * @param {Object} config\n * @param {import('.').IPLD} config.ipld\n * @param {import('.').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  /**\n   * Returns the CID and remaining path of the node at the end of the passed IPFS path\n   *\n   * @param {CID|string} ipfsPath\n   * @param {ResolveOptions & AbortOptions} options\n   * @returns {Promise<ResolveResult>}\n   * @example\n   * ```JavaScript\n   * // example obj\n   * const obj = {\n   *   a: 1,\n   *   b: [1, 2, 3],\n   *   c: {\n   *     ca: [5, 6, 7],\n   *     cb: 'foo'\n   *   }\n   * }\n   *\n   * const cid = await ipfs.dag.put(obj, { format: 'dag-cbor', hashAlg: 'sha2-256' })\n   * console.log(cid.toString())\n   * // bafyreicyer3d34cutdzlsbe2nqu5ye62mesuhwkcnl2ypdwpccrsecfmjq\n   *\n   * const result = await ipfs.dag.resolve(`${cid}/c/cb`)\n   * console.log(result)\n   * // Logs:\n   * // {\n   * //   cid: CID(bafyreicyer3d34cutdzlsbe2nqu5ye62mesuhwkcnl2ypdwpccrsecfmjq),\n   * //   remainderPath: 'c/cb'\n   * // }\n   * ```\n   */\n  async function resolve(ipfsPath, options = {}) {\n    const _toCidAndPath = toCidAndPath(ipfsPath),\n          cid = _toCidAndPath.cid,\n          path = _toCidAndPath.path;\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    if (path) {\n      options.path = path;\n    }\n\n    let lastCid = cid;\n    let lastRemainderPath = options.path || '';\n\n    if (lastRemainderPath.startsWith('/')) {\n      lastRemainderPath = lastRemainderPath.substring(1);\n    }\n\n    if (options.path) {\n      try {\n        for await (const _ref of ipld.resolve(cid, options.path, {\n          signal: options.signal\n        })) {\n          const value = _ref.value;\n          const remainderPath = _ref.remainderPath;\n\n          if (!CID.isCID(value)) {\n            break;\n          }\n\n          lastRemainderPath = remainderPath;\n          lastCid = value;\n        }\n      } catch (err) {\n        // TODO: add error codes to IPLD\n        if (err.message.startsWith('Object has no property')) {\n          err.message = \"no link named \\\"\".concat(lastRemainderPath.split('/')[0], \"\\\" under \").concat(lastCid);\n          err.code = 'ERR_NO_LINK';\n        }\n\n        throw err;\n      }\n    }\n\n    return {\n      cid: lastCid,\n      remainderPath: lastRemainderPath || ''\n    };\n  }\n\n  return withTimeoutOption(resolve);\n};\n/**\n * @typedef {Object} ResolveOptions\n * @property {string} [path] - If `ipfsPath` is a `CID`, you may pass a path here\n * @property {boolean} [preload]\n *\n * @typedef {Object} ResolveResult\n * @property {CID} cid - The last CID encountered during the traversal\n * @property {string} remainderPath - The path to the end of the IPFS path\n * inside the node referenced by the CID\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}