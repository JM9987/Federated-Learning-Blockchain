{"ast":null,"code":"import asmCrypto from \"asmcrypto-lite\"; //import IPFS from \"ipfs-core\";\n// import IPFS from \"ipfs-mini\";\n\nconst IPFS = require('ipfs-api');\n\nclass ContractFunctions {\n  constructor(web3, accounts, contract) {\n    this.registerInforme = async (informe, title) => {\n      var data = await informe.arrayBuffer(); // console.log(data)\n\n      var data2 = Buffer.from(data); // console.log(data2)\n\n      let uint8data = new Uint8Array(data);\n      let hash = asmCrypto.SHA256.hex(data);\n      const response = await this.contract.methods.getInforme(hash).call();\n\n      if (response.exists) {\n        return \"El informe ya existe.\";\n      }\n\n      const ipfs = new IPFS({\n        host: 'ipfs.infura.io',\n        port: 5001,\n        protocol: 'https'\n      }); // const w = await ipfs.add(data2, (err, ipfsHash) => {\n      //     console.log(err, ipfsHash);\n      //     cid = ipfsHash[0].hash;\n      // })\n\n      const cid = await ipfs.add(data2); ////const ipfs = await IPFS.create(\"https://ipfs.infura.io:5001\")\n      // const ipfs = new IPFS({host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\n      ////const { cid } = await ipfs.add(uint8data)\n      ////await ipfs.stop();\n      // var cid;\n      // ipfs.add(data, (err,hash2) => {\n      //     if(err){\n      //         return console.log(err);\n      //     }\n      //     console.log(\"https://ipfs.infura.io/ipfs/\"+hash2)\n      //     cid = hash2;\n      // })\n      // console.log(\"hey \" + cid)\n\n      await this.contract.methods.registerInforme(hash, title, cid[0].hash).send({\n        from: this.accounts[0]\n      }); // await this.contract.methods.registerInforme(hash, title, cid.toString()).send({ from: this.accounts[0] });\n\n      return \"Modelo registrado en el sistema.\";\n    };\n\n    this.obtenerModeloFichero = async file => {\n      let data = await file.arrayBuffer();\n      let hash = asmCrypto.SHA256.hex(data);\n      const response = await this.obtenerModeloFichero(hash);\n      return response;\n    };\n\n    this.obtenerModelo = async hash => {\n      const response = await this.contract.methods.obtenerModelo(hash).call();\n      await this.contract.methods.obtenerModelo(hash).send({\n        from: this.accounts[0]\n      });\n      return response;\n    };\n\n    this.listadoModelos = async () => {\n      const response = await this.contract.methods.listadoModelos().call();\n      return response;\n    };\n\n    this.registrarUser = async name => {\n      await this.contract.methods.registrarUser(name).send({\n        from: this.accounts[0]\n      });\n      return \"PeticiÃ³n de registro solicitada, espere a tener la cuenta activada.\";\n    };\n\n    this.AceptarUser = async address => {\n      await this.contract.methods.AceptarUser(address).send({\n        from: this.accounts[0]\n      });\n      return \"Acceso concedido al usuario.\";\n    };\n\n    this.listadoUsuarios = async () => {\n      const response = await this.contract.methods.listadoUsuarios().call({\n        from: this.accounts[0]\n      });\n      return response;\n    };\n\n    this.esPropietario = async () => {\n      const response = await this.contract.methods.esPropietario().call({\n        from: this.accounts[0]\n      });\n      return response;\n    };\n\n    this.userValidado = async () => {\n      const response = await this.contract.methods.userValidado().call({\n        from: this.accounts[0]\n      });\n      return response;\n    };\n\n    this.getNombreUser = async () => {\n      const response = await this.contract.methods.getNombreUser().call({\n        from: this.accounts[0]\n      });\n      return response;\n    };\n\n    this.web3 = web3;\n    this.accounts = accounts;\n    this.contract = contract;\n  }\n\n}\n\nexport default ContractFunctions;","map":{"version":3,"sources":["/home/ubuntu/TFG_FL/client/src/ContractFunctions.js"],"names":["asmCrypto","IPFS","require","ContractFunctions","constructor","web3","accounts","contract","registerInforme","informe","title","data","arrayBuffer","data2","Buffer","from","uint8data","Uint8Array","hash","SHA256","hex","response","methods","getInforme","call","exists","ipfs","host","port","protocol","cid","add","send","obtenerModeloFichero","file","obtenerModelo","listadoModelos","registrarUser","name","AceptarUser","address","listadoUsuarios","esPropietario","userValidado","getNombreUser"],"mappings":"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","sourcesContent":["\r\nimport asmCrypto from \"asmcrypto-lite\";\r\n//import IPFS from \"ipfs-core\";\r\n// import IPFS from \"ipfs-mini\";\r\nconst IPFS = require('ipfs-api');\r\n\r\n\r\nclass ContractFunctions {\r\n    constructor(web3, accounts, contract) {\r\n        this.web3 = web3;\r\n        this.accounts = accounts;\r\n        this.contract = contract;\r\n    }\r\n\r\n\r\n    registerInforme = async (informe, title) => {\r\n        var data = await informe.arrayBuffer();\r\n        // console.log(data)\r\n        var data2 = Buffer.from(data)\r\n        // console.log(data2)\r\n        let uint8data = new Uint8Array(data);\r\n        let hash = asmCrypto.SHA256.hex(data);\r\n\r\n        const response = await this.contract.methods.getInforme(hash).call();\r\n\r\n        if (response.exists) {\r\n            return \"El informe ya existe.\";\r\n        }\r\n    \r\n\r\n        const ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\n        // const w = await ipfs.add(data2, (err, ipfsHash) => {\r\n        //     console.log(err, ipfsHash);\r\n        //     cid = ipfsHash[0].hash;\r\n        // })\r\n        const cid = await ipfs.add(data2);\r\n        \r\n        \r\n\r\n        ////const ipfs = await IPFS.create(\"https://ipfs.infura.io:5001\")\r\n        // const ipfs = new IPFS({host: 'ipfs.infura.io', port: 5001, protocol: 'https'})\r\n        ////const { cid } = await ipfs.add(uint8data)\r\n        ////await ipfs.stop();\r\n        // var cid;\r\n        // ipfs.add(data, (err,hash2) => {\r\n        //     if(err){\r\n        //         return console.log(err);\r\n        //     }\r\n        //     console.log(\"https://ipfs.infura.io/ipfs/\"+hash2)\r\n        //     cid = hash2;\r\n        // })\r\n\r\n        // console.log(\"hey \" + cid)\r\n\r\n\r\n        await this.contract.methods.registerInforme(hash, title, cid[0].hash).send({ from: this.accounts[0] });\r\n        // await this.contract.methods.registerInforme(hash, title, cid.toString()).send({ from: this.accounts[0] });\r\n\r\n        return \"Modelo registrado en el sistema.\";\r\n    }\r\n\r\n    obtenerModeloFichero = async (file) => {\r\n        let data = await file.arrayBuffer();\r\n        let hash = asmCrypto.SHA256.hex(data);\r\n        const response = await this.obtenerModeloFichero(hash);\r\n        return response\r\n    }\r\n\r\n    obtenerModelo = async (hash) => {\r\n        const response = await this.contract.methods.obtenerModelo(hash).call();\r\n        await this.contract.methods.obtenerModelo(hash).send({ from: this.accounts[0] });\r\n        return response;\r\n    }\r\n\r\n    listadoModelos = async () => {\r\n        const response = await this.contract.methods.listadoModelos().call();\r\n        return response;\r\n    }\r\n\r\n    registrarUser = async (name) => {\r\n        await this.contract.methods.registrarUser(name).send({ from: this.accounts[0] });\r\n        return \"PeticiÃ³n de registro solicitada, espere a tener la cuenta activada.\"\r\n    }\r\n\r\n    AceptarUser = async (address) => {\r\n        await this.contract.methods.AceptarUser(address).send({ from: this.accounts[0] });\r\n        return \"Acceso concedido al usuario.\"\r\n    }\r\n\r\n    listadoUsuarios = async () => {\r\n        const response = await this.contract.methods.listadoUsuarios().call({ from: this.accounts[0] });\r\n        return response;\r\n    }\r\n\r\n    esPropietario = async () => {\r\n        const response = await this.contract.methods.esPropietario().call({ from: this.accounts[0] });\r\n        return response;\r\n    }\r\n\r\n    userValidado = async () => {\r\n        const response = await this.contract.methods.userValidado().call({ from: this.accounts[0] });\r\n        return response;\r\n    }\r\n\r\n    getNombreUser = async () => {\r\n        const response = await this.contract.methods.getNombreUser().call({ from: this.accounts[0] });\r\n        return response;\r\n    }\r\n\r\n}\r\n\r\nexport default ContractFunctions;\r\n"]},"metadata":{},"sourceType":"module"}