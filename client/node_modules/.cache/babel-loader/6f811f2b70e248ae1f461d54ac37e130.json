{"ast":null,"code":"'use strict';\n\nconst _require = require('ipfs-repo'),\n      repoVersion = _require.repoVersion;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').Repo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * If the repo has been initialized, report the current version.\n   * Otherwise report the version that would be initialized.\n   *\n   * @param {import('.').AbortOptions} options\n   * @returns {Promise<number>}\n   */\n  async function version(options) {\n    try {\n      // @ts-ignore - not a public API\n      await repo._checkInitialized(options);\n    } catch (err) {\n      // TODO: (dryajov) This is really hacky, there must be a better way\n      const match = [/Key not found in database \\[\\/version\\]/, /ENOENT/, /repo is not initialized yet/].some(m => {\n        return m.test(err.message);\n      });\n\n      if (match) {\n        // this repo has not been initialized\n        return repoVersion;\n      }\n\n      throw err;\n    }\n\n    return repo.version.get(options);\n  }\n\n  return withTimeoutOption(version);\n};","map":null,"metadata":{},"sourceType":"script"}