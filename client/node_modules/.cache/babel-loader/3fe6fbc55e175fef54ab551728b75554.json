{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n/**\n * Stringify a CID encoded in the requested base, upgrading to v1 if necessary.\n *\n * Setting upgrade to false will disable automatic CID upgrading from v0 to v1\n * which is necessary if the multibase is something other than base58btc. Note\n * that it will also not apply the encoding (since v0 CIDs can only be encoded\n * as base58btc).\n *\n * @param {CID|Uint8Array|string} input - The CID to encode\n * @param {Object} [options] - Optional options\n * @param {import('cids').BaseNameOrCode} [options.base] - Name of multibase codec to encode the CID with\n * @param {boolean} [options.upgrade] - Automatically upgrade v0 CIDs to v1 when\n * necessary. Default: true.\n * @returns {string} - CID in string representation\n */\n\n\nexports.cidToString = (input, options = {}) => {\n  const upgrade = options.upgrade !== false;\n  let cid = CID.isCID(input) ? input // @ts-ignore - TS seems to get confused by the type defs in CID repo.\n  : new CID(input);\n\n  if (cid.version === 0 && options.base && options.base !== 'base58btc') {\n    if (!upgrade) return cid.toString();\n    cid = cid.toV1();\n  }\n\n  return cid.toBaseEncodedString(options.base);\n};","map":null,"metadata":{},"sourceType":"script"}