{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/ubuntu/Codigo_Javier/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  network\n}) => {\n  /**\n   * List of known addresses of each peer connected.\n   *\n   * @param {import('../../utils').AbortOptions} options\n   * @returns {Promise<PeerInfo[]>}\n   */\n  async function addrs(options) {\n    // eslint-disable-line require-await\n    const peers = [];\n\n    const _ref = await network.use(options),\n          libp2p = _ref.libp2p;\n\n    for (const _ref2 of libp2p.peerStore.peers.entries()) {\n      var _ref3 = _slicedToArray(_ref2, 2);\n\n      const peerId = _ref3[0];\n      const peer = _ref3[1];\n      peers.push({\n        id: peerId,\n        addrs: peer.addresses.map(mi => mi.multiaddr)\n      });\n    }\n\n    return peers;\n  }\n\n  return withTimeoutOption(addrs);\n};\n/**\n * @typedef {Object} PeerInfo\n * @property {string} id\n * @property {Multiaddr[]} addrs\n *\n * @typedef {import('.').Multiaddr} Multiaddr\n */","map":null,"metadata":{},"sourceType":"script"}