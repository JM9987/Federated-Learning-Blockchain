{"ast":null,"code":"'use strict';\n\nconst Key = require('interface-datastore').Key;\n\nconst _require = require('p-queue'),\n      Queue = _require.default;\n\nconst _get = require('just-safe-get');\n\nconst _set = require('just-safe-set');\n\nconst errcode = require('err-code');\n\nconst errors = require('./errors');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst _require2 = require('ipfs-repo-migrations/src/utils'),\n      hasWithFallback = _require2.hasWithFallback,\n      getWithFallback = _require2.getWithFallback;\n\nconst configKey = new Key('config');\n\nmodule.exports = store => {\n  const setQueue = new Queue({\n    concurrency: 1\n  });\n  const configStore = {\n    /**\n     * Get the current configuration from the repo.\n     *\n     * @param {Object} options - options\n     * @param {AbortSignal} options.signal - abort this config read\n     * @returns {Promise<Object>}\n     */\n    async getAll(options = {}) {\n      // eslint-disable-line require-await\n      return configStore.get(undefined, options);\n    },\n\n    /**\n     * Get the value for the passed configuration key from the repo.\n     *\n     * @param {string} key - the config key to get\n     * @param {Object} options - options\n     * @param {AbortSignal} options.signal - abort this config read\n     * @returns {Promise<Object>}\n     */\n    async get(key, options = {}) {\n      if (!key) {\n        key = undefined;\n      } // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n\n\n      const encodedValue = await getWithFallback(configKey, store.get.bind(store), store.has.bind(store), store);\n\n      if (options.signal && options.signal.aborted) {\n        return;\n      }\n\n      const config = JSON.parse(uint8ArrayToString(encodedValue));\n\n      if (key !== undefined && _get(config, key) === undefined) {\n        throw new errors.NotFoundError(\"Key \".concat(key, \" does not exist in config\"));\n      }\n\n      const value = key !== undefined ? _get(config, key) : config;\n      return value;\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {string} key - the config key to be written\n     * @param {Object} value - the config value to be written\n     * @param {Object} options - options\n     * @param {AbortSignal} options.signal - abort this config write\n     * @returns {void}\n     */\n    async set(key, value, options = {}) {\n      // eslint-disable-line require-await\n      if (arguments.length === 1) {\n        value = key;\n        key = undefined;\n      } else if (!key || typeof key !== 'string') {\n        throw errcode(new Error('Invalid key type: ' + typeof key), 'ERR_INVALID_KEY');\n      }\n\n      if (value === undefined || value instanceof Uint8Array) {\n        throw errcode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE');\n      }\n\n      return setQueue.add(() => _maybeDoSet({\n        key: key,\n        value: value\n      }, options.signal));\n    },\n\n    /**\n     * Set the current configuration for this repo.\n     *\n     * @param {Object} value - the config value to be written\n     * @param {Object} options - options\n     * @param {AbortSignal} options.signal - abort this config write\n     * @returns {void}\n     */\n    async replace(value, options = {}) {\n      // eslint-disable-line require-await\n      if (!value || value instanceof Uint8Array) {\n        throw errcode(new Error('Invalid value type: ' + typeof value), 'ERR_INVALID_VALUE');\n      }\n\n      return setQueue.add(() => _maybeDoSet({\n        key: undefined,\n        value: value\n      }, options.signal));\n    },\n\n    /**\n     * Check if a config file exists.\n     *\n     * @returns {Promise<bool>}\n     */\n    async exists() {\n      // eslint-disable-line require-await\n      // level-js@5.x cannot read keys from level-js@4.x dbs so fall back to\n      // using IndexedDB API with string keys - only necessary until we do\n      // the migratiion to v10 or above\n      return hasWithFallback(configKey, store.has.bind(store), store);\n    }\n\n  };\n  return configStore;\n\n  async function _maybeDoSet(m, signal) {\n    if (signal && signal.aborted) {\n      return;\n    }\n\n    const key = m.key;\n    const value = m.value;\n\n    if (key) {\n      const config = await configStore.get();\n\n      _set(config, key, value);\n\n      return _saveAll(config);\n    }\n\n    return _saveAll(value);\n  }\n\n  function _saveAll(config) {\n    const buf = uint8ArrayFromString(JSON.stringify(config, null, 2));\n    return store.put(configKey, buf);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}