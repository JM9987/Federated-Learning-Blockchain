{"ast":null,"code":"'use strict';\n\nconst repoInit = require('./init');\n\nconst _require = require('../errors'),\n      MissingRepoOptionsError = _require.MissingRepoOptionsError,\n      NotInitializedRepoError = _require.NotInitializedRepoError;\n\nconst _require2 = require('../utils'),\n      VERSION_KEY = _require2.VERSION_KEY,\n      createStore = _require2.createStore;\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nexports.getVersion = getVersion;\n/**\n * Function that has responsibility to retrieve version of repo from its root datastore's instance.\n * This function needs to be cross-repo-version functional to be able to fetch any version number,\n * even in case of change of repo's versioning.\n *\n * @param {string} path\n * @param {Object} repoOptions - Options used to create a repo, the same as pased to ipfs-repo\n * @returns {Promise<int>}\n */\n\nasync function getVersion(path, repoOptions) {\n  if (!(await repoInit.isRepoInitialized(path, repoOptions))) {\n    throw new NotInitializedRepoError(\"Repo in path \".concat(path, \" is not initialized!\"));\n  }\n\n  if (!repoOptions) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n  }\n\n  const store = createStore(path, 'root', repoOptions);\n  await store.open();\n  let version = await store.get(VERSION_KEY);\n\n  if (version instanceof Uint8Array) {\n    version = uint8ArrayToString(version);\n  }\n\n  version = parseInt(version);\n  await store.close();\n  return version;\n}\n/**\n * Function for setting a version in cross-repo-version manner.\n *\n * @param {string} path\n * @param {int} version\n * @param {Object} repoOptions - Options used to create a repo, the same as pased to ipfs-repo\n * @returns {Promise<void>}\n */\n\n\nasync function setVersion(path, version, repoOptions) {\n  if (!repoOptions) {\n    throw new MissingRepoOptionsError('Please pass repo options when trying to open a repo');\n  }\n\n  const store = createStore(path, 'root', repoOptions);\n  await store.open();\n  await store.put(VERSION_KEY, uint8ArrayFromString(String(version)));\n  await store.close();\n}\n\nexports.setVersion = setVersion;","map":null,"metadata":{},"sourceType":"script"}