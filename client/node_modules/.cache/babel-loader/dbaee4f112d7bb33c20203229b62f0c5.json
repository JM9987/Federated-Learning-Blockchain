{"ast":null,"code":"/* eslint-disable require-await */\n'use strict';\n\nconst multihash = require('multihashes');\n/**\n * @typedef {import('multihashes').HashName} HashName\n * @typedef {import('./types').Digest} Digest\n */\n\n/**\n * @type {Crypto}\n */\n\n\nconst crypto = self.crypto ||\n/** @type {typeof window.crypto} */\n// @ts-ignore - unknown property\nself.msCrypto;\n/**\n *\n * @param {Uint8Array} data\n * @param {HashName} alg\n * @returns {Promise<Uint8Array>}\n */\n\nconst digest = async (data, alg) => {\n  if (typeof self === 'undefined' || !crypto) {\n    throw new Error('Please use a browser with webcrypto support and ensure the code has been delivered securely via HTTPS/TLS and run within a Secure Context');\n  }\n\n  switch (alg) {\n    case 'sha1':\n      return new Uint8Array((await crypto.subtle.digest({\n        name: 'SHA-1'\n      }, data)));\n\n    case 'sha2-256':\n      return new Uint8Array((await crypto.subtle.digest({\n        name: 'SHA-256'\n      }, data)));\n\n    case 'sha2-512':\n      return new Uint8Array((await crypto.subtle.digest({\n        name: 'SHA-512'\n      }, data)));\n\n    case 'dbl-sha2-256':\n      {\n        const d = await crypto.subtle.digest({\n          name: 'SHA-256'\n        }, data);\n        return new Uint8Array((await crypto.subtle.digest({\n          name: 'SHA-256'\n        }, d)));\n      }\n\n    default:\n      throw new Error(\"\".concat(alg, \" is not a supported algorithm\"));\n  }\n};\n\nmodule.exports = {\n  /**\n   * @param {HashName} alg\n   * @returns {Digest}\n   */\n  factory: alg => async data => {\n    return digest(data, alg);\n  },\n  digest,\n\n  /**\n   * @param {Uint8Array} buf\n   * @param {HashName} alg\n   * @param {number} [length]\n   */\n  multihashing: async (buf, alg, length) => {\n    const h = await digest(buf, alg);\n    return multihash.encode(h, alg, length);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}