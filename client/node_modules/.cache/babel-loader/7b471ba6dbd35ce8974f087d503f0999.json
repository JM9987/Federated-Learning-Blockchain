{"ast":null,"code":"// Generated by CoffeeScript 1.12.7\n(function () {\n  var Netmask, atob, chr, chr0, chrA, chra, ip2long, long2ip;\n\n  long2ip = function (long) {\n    var a, b, c, d;\n    a = (long & 0xff << 24) >>> 24;\n    b = (long & 0xff << 16) >>> 16;\n    c = (long & 0xff << 8) >>> 8;\n    d = long & 0xff;\n    return [a, b, c, d].join('.');\n  };\n\n  ip2long = function (ip) {\n    var b, c, i, j, n, ref;\n    b = [];\n\n    for (i = j = 0; j <= 3; i = ++j) {\n      if (ip.length === 0) {\n        break;\n      }\n\n      if (i > 0) {\n        if (ip[0] !== '.') {\n          throw new Error('Invalid IP');\n        }\n\n        ip = ip.substring(1);\n      }\n\n      ref = atob(ip), n = ref[0], c = ref[1];\n      ip = ip.substring(c);\n      b.push(n);\n    }\n\n    if (ip.length !== 0) {\n      throw new Error('Invalid IP');\n    }\n\n    switch (b.length) {\n      case 1:\n        if (b[0] > 0xFFFFFFFF) {\n          throw new Error('Invalid IP');\n        }\n\n        return b[0] >>> 0;\n\n      case 2:\n        if (b[0] > 0xFF || b[1] > 0xFFFFFF) {\n          throw new Error('Invalid IP');\n        }\n\n        return (b[0] << 24 | b[1]) >>> 0;\n\n      case 3:\n        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFFFF) {\n          throw new Error('Invalid IP');\n        }\n\n        return (b[0] << 24 | b[1] << 16 | b[2]) >>> 0;\n\n      case 4:\n        if (b[0] > 0xFF || b[1] > 0xFF || b[2] > 0xFF || b[3] > 0xFF) {\n          throw new Error('Invalid IP');\n        }\n\n        return (b[0] << 24 | b[1] << 16 | b[2] << 8 | b[3]) >>> 0;\n\n      default:\n        throw new Error('Invalid IP');\n    }\n  };\n\n  chr = function (b) {\n    return b.charCodeAt(0);\n  };\n\n  chr0 = chr('0');\n  chra = chr('a');\n  chrA = chr('A');\n\n  atob = function (s) {\n    var base, dmax, i, n, start;\n    n = 0;\n    base = 10;\n    dmax = '9';\n    i = 0;\n\n    if (s.length > 1 && s[i] === '0') {\n      if (s[i + 1] === 'x' || s[i + 1] === 'X') {\n        i += 2;\n        base = 16;\n      } else if ('0' <= s[i + 1] && s[i + 1] <= '9') {\n        i++;\n        base = 8;\n        dmax = '7';\n      }\n    }\n\n    start = i;\n\n    while (i < s.length) {\n      if ('0' <= s[i] && s[i] <= dmax) {\n        n = n * base + (chr(s[i]) - chr0) >>> 0;\n      } else if (base === 16) {\n        if ('a' <= s[i] && s[i] <= 'f') {\n          n = n * base + (10 + chr(s[i]) - chra) >>> 0;\n        } else if ('A' <= s[i] && s[i] <= 'F') {\n          n = n * base + (10 + chr(s[i]) - chrA) >>> 0;\n        } else {\n          break;\n        }\n      } else {\n        break;\n      }\n\n      if (n > 0xFFFFFFFF) {\n        throw new Error('too large');\n      }\n\n      i++;\n    }\n\n    if (i === start) {\n      throw new Error('empty octet');\n    }\n\n    return [n, i];\n  };\n\n  Netmask = function () {\n    function Netmask(net, mask) {\n      var error, i, j, ref;\n\n      if (typeof net !== 'string') {\n        throw new Error(\"Missing `net' parameter\");\n      }\n\n      if (!mask) {\n        ref = net.split('/', 2), net = ref[0], mask = ref[1];\n      }\n\n      if (!mask) {\n        mask = 32;\n      }\n\n      if (typeof mask === 'string' && mask.indexOf('.') > -1) {\n        try {\n          this.maskLong = ip2long(mask);\n        } catch (error1) {\n          error = error1;\n          throw new Error(\"Invalid mask: \" + mask);\n        }\n\n        for (i = j = 32; j >= 0; i = --j) {\n          if (this.maskLong === 0xffffffff << 32 - i >>> 0) {\n            this.bitmask = i;\n            break;\n          }\n        }\n      } else if (mask || mask === 0) {\n        this.bitmask = parseInt(mask, 10);\n        this.maskLong = 0;\n\n        if (this.bitmask > 0) {\n          this.maskLong = 0xffffffff << 32 - this.bitmask >>> 0;\n        }\n      } else {\n        throw new Error(\"Invalid mask: empty\");\n      }\n\n      try {\n        this.netLong = (ip2long(net) & this.maskLong) >>> 0;\n      } catch (error1) {\n        error = error1;\n        throw new Error(\"Invalid net address: \" + net);\n      }\n\n      if (!(this.bitmask <= 32)) {\n        throw new Error(\"Invalid mask for ip4: \" + mask);\n      }\n\n      this.size = Math.pow(2, 32 - this.bitmask);\n      this.base = long2ip(this.netLong);\n      this.mask = long2ip(this.maskLong);\n      this.hostmask = long2ip(~this.maskLong);\n      this.first = this.bitmask <= 30 ? long2ip(this.netLong + 1) : this.base;\n      this.last = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 2) : long2ip(this.netLong + this.size - 1);\n      this.broadcast = this.bitmask <= 30 ? long2ip(this.netLong + this.size - 1) : void 0;\n    }\n\n    Netmask.prototype.contains = function (ip) {\n      if (typeof ip === 'string' && (ip.indexOf('/') > 0 || ip.split('.').length !== 4)) {\n        ip = new Netmask(ip);\n      }\n\n      if (ip instanceof Netmask) {\n        return this.contains(ip.base) && this.contains(ip.broadcast || ip.last);\n      } else {\n        return (ip2long(ip) & this.maskLong) >>> 0 === (this.netLong & this.maskLong) >>> 0;\n      }\n    };\n\n    Netmask.prototype.next = function (count) {\n      if (count == null) {\n        count = 1;\n      }\n\n      return new Netmask(long2ip(this.netLong + this.size * count), this.mask);\n    };\n\n    Netmask.prototype.forEach = function (fn) {\n      var index, lastLong, long;\n      long = ip2long(this.first);\n      lastLong = ip2long(this.last);\n      index = 0;\n\n      while (long <= lastLong) {\n        fn(long2ip(long), long, index);\n        index++;\n        long++;\n      }\n    };\n\n    Netmask.prototype.toString = function () {\n      return this.base + \"/\" + this.bitmask;\n    };\n\n    return Netmask;\n  }();\n\n  exports.ip2long = ip2long;\n  exports.long2ip = long2ip;\n  exports.Netmask = Netmask;\n}).call(this);","map":null,"metadata":{},"sourceType":"script"}