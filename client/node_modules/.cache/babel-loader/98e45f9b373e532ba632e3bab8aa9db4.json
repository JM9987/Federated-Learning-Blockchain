{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst Key = require('interface-datastore').Key;\n\nconst mb = require('multibase');\n\nconst log = require('debug')('ipfs:repo:migrator:migration-8');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst _require = require('../../src/utils'),\n      createStore = _require.createStore;\n\nconst length = require('it-length');\n\nfunction keyToMultihash(key) {\n  const buf = mb.decode(\"b\".concat(key.toString().slice(1))); // Extract multihash from CID\n\n  let multihash = new CID(buf).multihash; // Encode and slice off multibase codec\n\n  multihash = mb.encode('base32', multihash).slice(1); // Should be uppercase for interop with go\n\n  multihash = uint8ArrayToString(multihash).toUpperCase();\n  return new Key(\"/\".concat(multihash), false);\n}\n\nfunction keyToCid(key) {\n  const buf = mb.decode(\"b\".concat(key.toString().slice(1))); // CID to Key\n\n  const multihash = mb.encode('base32', new CID(1, 'raw', buf).bytes).slice(1);\n  return new Key(\"/\".concat(uint8ArrayToString(multihash)).toUpperCase(), false);\n}\n\nasync function process(repoPath, repoOptions, onProgress, keyFunction) {\n  const blockstore = createStore(repoPath, 'blocks', repoOptions);\n  await blockstore.open();\n  let blockCount;\n\n  if (onProgress) {\n    blockCount = await length(blockstore.query({\n      keysOnly: true,\n      filters: [({\n        key\n      }) => {\n        const newKey = keyFunction(key);\n        return newKey.toString() !== key.toString();\n      }]\n    }));\n  }\n\n  try {\n    let counter = 0;\n\n    for await (const block of blockstore.query({})) {\n      const newKey = keyFunction(block.key); // If the Key is base32 CIDv0 then there's nothing to do\n\n      if (newKey.toString() !== block.key.toString()) {\n        counter += 1;\n        log(\"Migrating Block from \".concat(block.key, \" to \").concat(newKey));\n        await blockstore.delete(block.key);\n        await blockstore.put(newKey, block.value);\n\n        if (onProgress) {\n          onProgress(counter / blockCount * 100, \"Migrated Block from \".concat(block.key, \" to \").concat(newKey));\n        }\n      }\n    }\n  } finally {\n    await blockstore.close();\n  }\n}\n\nmodule.exports = {\n  version: 8,\n  description: 'Transforms key names into base32 encoding and converts Block store to use bare multihashes encoded as base32',\n  migrate: (repoPath, repoOptions, onProgress = () => {}) => {\n    return process(repoPath, repoOptions, onProgress, keyToMultihash);\n  },\n  revert: (repoPath, repoOptions, onProgress = () => {}) => {\n    return process(repoPath, repoOptions, onProgress, keyToCid);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}