{"ast":null,"code":"'use strict';\n\nconst createGet = require('./get');\n\nconst createResolve = require('./resolve');\n\nconst createTree = require('./tree');\n\nconst createPut = require('./put');\n\nclass Reader {\n  /**\n   * @param {ReaderConfig} config\n   */\n  constructor(config) {\n    this.get = createGet(config);\n    this.resolve = createResolve(config);\n    this.tree = createTree(config);\n  }\n\n}\n\nclass DagAPI {\n  /**\n   * @param {Object} config\n   * @param {IPLD} config.ipld\n   * @param {Preload} config.preload\n   * @param {Pin} config.pin\n   * @param {GCLock} config.gcLock\n   * @param {DagReader} config.dagReader\n   */\n  constructor({\n    ipld,\n    pin,\n    preload,\n    gcLock,\n    dagReader\n  }) {\n    const get = dagReader.get,\n          resolve = dagReader.resolve,\n          tree = dagReader.tree;\n    const put = createPut({\n      ipld,\n      preload,\n      pin,\n      gcLock\n    });\n    this.get = get;\n    this.resolve = resolve;\n    this.tree = tree;\n    this.put = put;\n  }\n  /**\n   * Creates a reader part of the DAG API. This allows other APIs that require\n   * reader parts of the DAG API to be instantiated before components required\n   * by writer end are.\n   *\n   * @param {ReaderConfig} config\n   * @returns {DagReader}\n   */\n\n\n  static reader(config) {\n    return new Reader(config);\n  }\n\n}\n\nmodule.exports = DagAPI;\n/**\n * @typedef {Object} DagReader\n * @property {ReturnType<typeof createGet>} get\n * @property {ReturnType<typeof createResolve>} resolve\n * @property {ReturnType<typeof createTree>} tree\n *\n * @typedef {Object} ReaderConfig\n * @property {IPLD} ipld\n * @property {Preload} preload\n *\n * @typedef {import('..').IPLD} IPLD\n * @typedef {import('..').Preload} Preload\n * @typedef {import('..').Pin} Pin\n * @typedef {import('..').GCLock} GCLock\n * @typedef {import('..').CID} CID\n * @typedef {import('..').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}