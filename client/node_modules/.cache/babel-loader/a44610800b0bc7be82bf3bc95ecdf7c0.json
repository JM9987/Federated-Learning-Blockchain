{"ast":null,"code":"'use strict';\n\nexports.BigNumber = require('./constants').BigNumber;\nexports.Commented = require('./commented');\nexports.Diagnose = require('./diagnose');\nexports.Decoder = require('./decoder');\nexports.Encoder = require('./encoder');\nexports.Simple = require('./simple');\nexports.Tagged = require('./tagged');\nexports.Map = require('./map');\n/**\n  * Convenience name for {@linkcode Commented.comment}\n  */\n\nexports.comment = exports.Commented.comment;\n/**\n  * Convenience name for {@linkcode Decoder.decodeAll}\n  */\n\nexports.decodeAll = exports.Decoder.decodeAll;\n/**\n  * Convenience name for {@linkcode Decoder.decodeFirst}\n  */\n\nexports.decodeFirst = exports.Decoder.decodeFirst;\n/**\n  * Convenience name for {@linkcode Decoder.decodeAllSync}\n  */\n\nexports.decodeAllSync = exports.Decoder.decodeAllSync;\n/**\n  * Convenience name for {@linkcode Decoder.decodeFirstSync}\n  */\n\nexports.decodeFirstSync = exports.Decoder.decodeFirstSync;\n/**\n  * Convenience name for {@linkcode Diagnose.diagnose}\n  */\n\nexports.diagnose = exports.Diagnose.diagnose;\n/**\n  * Convenience name for {@linkcode Encoder.encode}\n  */\n\nexports.encode = exports.Encoder.encode;\n/**\n  * Convenience name for {@linkcode Encoder.encodeCanonical}\n  */\n\nexports.encodeCanonical = exports.Encoder.encodeCanonical;\n/**\n  * Convenience name for {@linkcode Encoder.encodeOne}\n  */\n\nexports.encodeOne = exports.Encoder.encodeOne;\n/**\n  * Convenience name for {@linkcode Encoder.encodeAsync}\n  */\n\nexports.encodeAsync = exports.Encoder.encodeAsync;\n/**\n  * Convenience name for {@linkcode Decoder.decodeFirstSync}\n  */\n\nexports.decode = exports.Decoder.decodeFirstSync;\n/**\n * The codec information for\n * {@link https://github.com/Level/encoding-down encoding-down}, which is a\n * codec framework for leveldb.  CBOR is a particularly convenient format for\n * both keys and values, as it can deal with a lot of types that JSON can't\n * handle without losing type information.\n *\n * @example\n * const level = require('level')\n * const cbor = require('cbor')\n *\n * const db = level('./db', {\n *   keyEncoding: cbor.leveldb,\n *   valueEncoding: cbor.leveldb\n * })\n *\n * await db.put({a:1}, 9857298342094820394820394820398234092834n)\n * const val = await db.get({a:1})) // 9857298342094820394820394820398234092834n\n */\n\nexports.leveldb = {\n  decode: exports.Decoder.decodeFirstSync,\n  encode: exports.Encoder.encode,\n  buffer: true,\n  name: 'cbor'\n};\n/**\n * Does this library and runtime support BigInts?  Only exported for backward\n * compatibility.\n *\n * @deprecated since version 6.0\n */\n\nexports.hasBigInt = true;","map":null,"metadata":{},"sourceType":"script"}