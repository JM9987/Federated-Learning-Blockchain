{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.MessageCache = void 0;\n\nconst utils_1 = require(\"./utils\");\n\nclass MessageCache {\n  /**\n   * @param {Number} gossip\n   * @param {Number} history\n   * @param {msgIdFn} msgIdFn a function that returns message id from a message\n   *\n   * @constructor\n   */\n  constructor(gossip, history, msgIdFn) {\n    /**\n     * @type {Map<string, RPC.Message>}\n     */\n    this.msgs = new Map();\n    this.peertx = new Map();\n    /**\n     * @type {Array<Array<CacheEntry>>}\n     */\n\n    this.history = [];\n\n    for (let i = 0; i < history; i++) {\n      this.history[i] = [];\n    }\n    /**\n     * @type {Number}\n     */\n\n\n    this.gossip = gossip;\n    /**\n     * @type {Function}\n     */\n\n    this.msgIdFn = msgIdFn;\n  }\n  /**\n   * Adds a message to the current window and the cache\n   *\n   * @param {RPC.Message} msg\n   * @returns {void}\n   */\n\n\n  put(msg) {\n    const msgID = this.getMsgId(msg);\n    const msgIdStr = utils_1.messageIdToString(msgID);\n    this.msgs.set(msgIdStr, msg);\n    this.history[0].push({\n      msgID,\n      topics: msg.topicIDs\n    });\n  }\n  /**\n   * Get message id of message.\n   * @param {RPC.Message} msg\n   * @returns {Uint8Array}\n   */\n\n\n  getMsgId(msg) {\n    return this.msgIdFn(msg);\n  }\n  /**\n   * Retrieves a message from the cache by its ID, if it is still present\n   *\n   * @param {Uint8Array} msgID\n   * @returns {Message}\n   */\n\n\n  get(msgID) {\n    return this.msgs.get(utils_1.messageIdToString(msgID));\n  }\n  /**\n   * Retrieves a message from the cache by its ID, if it is present\n   * for a specific peer.\n   * Returns the message and the number of times the peer has requested the message\n   *\n   * @param {string} msgID\n   * @param {string} p\n   * @returns {[InMessage | undefined, number]}\n   */\n\n\n  getForPeer(msgID, p) {\n    const msgIdStr = utils_1.messageIdToString(msgID);\n    const msg = this.msgs.get(msgIdStr);\n\n    if (!msg) {\n      return [undefined, 0];\n    }\n\n    let peertx = this.peertx.get(msgIdStr);\n\n    if (!peertx) {\n      peertx = new Map();\n      this.peertx.set(msgIdStr, peertx);\n    }\n\n    const count = (peertx.get(p) || 0) + 1;\n    peertx.set(p, count);\n    return [msg, count];\n  }\n  /**\n   * Retrieves a list of message IDs for a given topic\n   *\n   * @param {String} topic\n   *\n   * @returns {Array<Uint8Array>}\n   */\n\n\n  getGossipIDs(topic) {\n    const msgIDs = [];\n\n    for (let i = 0; i < this.gossip; i++) {\n      this.history[i].forEach(entry => {\n        for (const t of entry.topics) {\n          if (t === topic) {\n            msgIDs.push(entry.msgID);\n            break;\n          }\n        }\n      });\n    }\n\n    return msgIDs;\n  }\n  /**\n   * Shifts the current window, discarding messages older than this.history.length of the cache\n   *\n   * @returns {void}\n   */\n\n\n  shift() {\n    const last = this.history[this.history.length - 1];\n    last.forEach(entry => {\n      const msgIdStr = utils_1.messageIdToString(entry.msgID);\n      this.msgs.delete(msgIdStr);\n      this.peertx.delete(msgIdStr);\n    });\n    this.history.pop();\n    this.history.unshift([]);\n  }\n\n}\n\nexports.MessageCache = MessageCache;","map":null,"metadata":{},"sourceType":"script"}