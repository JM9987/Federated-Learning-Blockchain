{"ast":null,"code":"'use strict';\n\nconst _require = require('../errors'),\n      NotStartedError = _require.NotStartedError,\n      AlreadyStartingError = _require.AlreadyStartingError,\n      AlreadyStartedError = _require.AlreadyStartedError;\n\nconst _require2 = require('../utils'),\n      withTimeout = _require2.withTimeout;\n/**\n * @template Options, T\n *\n * Allows you to create a handle to service that can be started or\n * stopped. It enables defining components that need to use service\n * functionality before service is started.\n *\n */\n\n\nclass Service {\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @template {(options:any) => Await<any>} T\n   *\n   * @param {Object} config\n   * @param {T} config.start\n   * @param {(state:State<T>) => Await<void>} [config.stop]\n   * @returns {Service<Parameters<T>[0], State<T>>}\n   */\n  static create({\n    start,\n    stop\n  }) {\n    return new Service(start, stop);\n  }\n  /**\n   * Starts the service (by running actiavtion function). Will (async) throw\n   * unless service is stopped.\n   *\n   * @template Options, T\n   * @param {Service<Options, T>} service\n   * @param {Options} options\n   * @returns {Promise<T>}\n   */\n\n\n  static async start(service, options) {\n    const state = service.state,\n          activate = service.activate;\n\n    switch (state.status) {\n      // If service is in 'stopped' state we activate and transition to\n      // to 'pending' state. Once activation is complete transition state to\n      // 'started' state.\n      // Note: This is the only code that does state transitions from\n      // - stopped\n      // - started\n      // Which ensures no race conditions can occur.\n      case 'stopped':\n        {\n          try {\n            const promise = activate(options);\n            service.state = {\n              status: 'starting',\n              ready: promise\n            }; // Note: MUST await after state transition above otherwise race\n            // condition may occur.\n\n            const result = await promise;\n            service.state = {\n              status: 'started',\n              value: result\n            };\n            return result; // If failed to start, transiton from 'starting' to 'stopped'\n            // state.\n          } catch (error) {\n            service.state = {\n              status: 'stopped'\n            };\n            throw error;\n          }\n        }\n\n      case 'starting':\n        {\n          throw new AlreadyStartingError();\n        }\n\n      case 'started':\n        {\n          throw new AlreadyStartedError();\n        }\n      // If service is stopping we just wait for that to complete\n      // and try again.\n\n      case 'stopping':\n        {\n          await state.ready;\n          return await Service.start(service, options);\n        }\n\n      default:\n        {\n          return Service.panic(service);\n        }\n    }\n  }\n  /**\n   * Stops the service by executing deactivation. If service is stopped\n   * or is stopping this is noop. If service is starting up when called\n   * it will await for start to complete and then retry stop afterwards.\n   * This may (async) throw if `deactivate` does.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {Promise<void>}\n   */\n\n\n  static async stop(service) {\n    const state = service.state,\n          deactivate = service.deactivate;\n\n    switch (state.status) {\n      // If stopped there's nothing to do.\n      case 'stopped':\n        {\n          break;\n        }\n      // If service is starting we await for it to complete\n      // and try again. That way\n\n      case 'starting':\n        {\n          // We do not want to error stop if start failed.\n          try {\n            await state.ready;\n          } catch (_) {}\n\n          return await Service.stop(service);\n        }\n      // if service is stopping we just await for it to complete.\n\n      case 'stopping':\n        {\n          return await state.ready;\n        }\n\n      case 'started':\n        {\n          if (deactivate) {\n            await deactivate(state.value);\n          }\n\n          service.state = {\n            status: 'stopped'\n          };\n          break;\n        }\n\n      default:\n        {\n          Service.panic(state);\n        }\n    }\n  }\n  /**\n   * @template T\n   * @param {Service<any, T>} service\n   * @returns {T|null}\n   */\n\n\n  static try({\n    state\n  }) {\n    switch (state.status) {\n      case 'started':\n        return state.value;\n\n      default:\n        return null;\n    }\n  }\n  /**\n   * Unwraps state and returns underlying value. If state is in idle state it\n   * will throw an error. If state is pending it will wait and return the\n   * result or throw on failure. If state is ready returns result.\n   *\n   * @template T\n   * @param {Service<any, T>} service\n   * @param {AbortOptions} [options]\n   * @returns {Promise<T>}\n   */\n\n\n  static async use({\n    state\n  }, options) {\n    switch (state.status) {\n      case 'started':\n        return state.value;\n\n      case 'starting':\n        return await withTimeout(state.ready, options);\n\n      default:\n        throw new NotStartedError();\n    }\n  } // eslint-disable-next-line jsdoc/require-returns-check\n\n  /**\n   * @private\n   * @param {Service<any, any>} service\n   * @returns {never}\n   */\n\n\n  static panic({\n    state\n  }) {\n    const status = JSON.stringify({\n      status: state.status\n    });\n    throw RangeError(\"Service in invalid state \".concat(status, \", should never happen if you see this please report a bug\"));\n  }\n  /**\n   * Takes `activation` function that takes `options` and (async) returns\n   * an implementation.\n   *\n   * @private\n   * @param {(options:Options) => Await<T>} activate\n   * @param {(state:T) => Await<void>} [deactivate]\n   */\n\n\n  constructor(activate, deactivate) {\n    this.activate = activate;\n    this.deactivate = deactivate;\n    /**\n     * A state machine for this service.\n     *\n     * @private\n     * @type {ServiceState<T>}\n     */\n\n    this.state = {\n      status: 'stopped'\n    };\n  }\n  /**\n   * Allows you to asynchronously obtain service implementation. If service\n   * is starting it will await for completion. If service is stopped or stopping\n   * this will (async) throw exception. This allows components that need to use\n   * this service convenient API to do it.\n   *\n   * @param {AbortOptions} [options] - Abort options.\n   * @returns {Promise<T>}\n   */\n\n\n  async use(options) {\n    return await Service.use(this, options);\n  }\n  /**\n   * @returns {T|null}\n   */\n\n\n  try() {\n    return Service.try(this);\n  }\n\n}\n\nmodule.exports = Service;\n/**\n * @template T\n * @typedef {import('ipfs-core-types/src/basic').Await<T>} Await\n */\n\n/**\n * @template {(options:any) => any} T\n * @typedef {Parameters<T>[0]} Options\n */\n\n/**\n * @template {(options:any) => any} T\n * @typedef {ReturnType<T> extends ? Promise<infer U> ? U : ReturnType<T>} State\n */\n\n/**\n * Represents service state which can be not started in which case\n * it is instanceof `Error`. Pending in which case it's promise or\n * ready in which case it is the value itself.\n *\n * @template T\n * @typedef {{ status: 'stopped' }\n * | { status: 'starting', ready: Await<T> }\n * | { status: 'started', value: T }\n * | { status: 'stopping', ready: Await<void> }\n * } ServiceState\n */\n\n/**\n * @typedef {import('../utils').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}