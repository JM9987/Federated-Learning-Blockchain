{"ast":null,"code":"'use strict';\n\nconst pkg = require('../../package.json');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').Repo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * Returns the implementation version\n   *\n   * @param {import('.').AbortOptions} [options]\n   * @returns {Promise<Version>}\n   * @example\n   * ```js\n   * const version = await ipfs.version()\n   * console.log(version)\n   * ```\n   */\n  async function version(options) {\n    const repoVersion = await repo.version.get(options);\n    return {\n      version: pkg.version,\n      repo: repoVersion,\n      // @ts-ignore gitHead is defined in published versions\n      commit: pkg.gitHead || '',\n      'interface-ipfs-core': pkg.devDependencies['interface-ipfs-core']\n    };\n  }\n\n  return withTimeoutOption(version);\n};\n/**\n * @typedef {object} Version\n * An object with the version information for the implementation,\n * the commit and the Repo. `js-ipfs` instances will also return\n * the version of `interface-ipfs-core` and `ipfs-http-client`\n * supported by this node\n *\n * @property {string} version\n * @property {number} repo\n * @property {string} [commit]\n * @property {string} [interface-ipfs-core]\n * @property {string} [ipfs-http-client]\n */","map":null,"metadata":{},"sourceType":"script"}