{"ast":null,"code":"'use strict';\n\nconst _require = require('interface-datastore'),\n      Key = _require.Key,\n      Errors = _require.Errors;\n\nconst core = require('datastore-core');\n\nconst ShardingStore = core.ShardingDatastore;\n/**\n * @typedef {import('interface-datastore').Key} Key\n * @typedef {import('interface-datastore').Datastore} Datastore\n */\n\nconst CONFIG_KEY = new Key('/config');\nconst VERSION_KEY = new Key('/version');\n\nfunction getDatastoreAndOptions(name, options) {\n  if (!options || !options.storageBackends) {\n    throw new Error('Please pass storage backend definitions');\n  }\n\n  if (!options.storageBackends[name]) {\n    throw new Error(\"Storage backend '\".concat(name, \"' not defined in config\"));\n  }\n\n  const StorageBackend = options.storageBackends[name];\n  let storageBackendOptions = {};\n\n  if (options.storageBackendOptions !== undefined && options.storageBackendOptions[name] !== undefined) {\n    storageBackendOptions = options.storageBackendOptions[name];\n  }\n\n  return {\n    StorageBackend: StorageBackend,\n    storageOptions: storageBackendOptions\n  };\n}\n/**\n * Level dbs wrap level dbs that wrap level dbs. Find a level-js\n * instance in the chain if one exists.\n *\n * @param {Datastore} store\n */\n\n\nfunction findLevelJs(store) {\n  let db = store;\n\n  while (db.db || db.child) {\n    db = db.db || db.child; // `Level` is only present in the browser, in node it is LevelDOWN\n\n    if (db.type === 'level-js' || db.constructor.name === 'Level') {\n      return db;\n    }\n  }\n}\n/**\n * @param {Key} key\n * @param {function (Key): Promise<boolean>} has\n * @param {Datastore} store\n */\n\n\nasync function hasWithFallback(key, has, store) {\n  const result = await has(key);\n\n  if (result) {\n    return result;\n  } // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n\n\n  const levelJs = findLevelJs(store);\n\n  if (!levelJs) {\n    return false;\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    const req = levelJs.store('readonly').get(key.toString());\n\n    req.transaction.onabort = () => {\n      reject(req.transaction.error);\n    };\n\n    req.transaction.oncomplete = () => {\n      resolve(Boolean(req.result));\n    };\n  });\n}\n/**\n * @param {import('interface-datastore').Key} key\n * @param {function (Key): Promise<Uint8Array>} get\n * @param {function (Key): Promise<boolean>} has\n * @param {import('interface-datastore').Datastore} store\n */\n\n\nasync function getWithFallback(key, get, has, store) {\n  if (await has(key)) {\n    return get(key);\n  } // Newer versions of level.js changed the key type from Uint8Array|string\n  // to Uint8Array  so fall back to trying Uint8Arrays if we are using level.js\n  // and the string version of the key did not work\n\n\n  const levelJs = findLevelJs(store);\n\n  if (!levelJs) {\n    throw Errors.notFoundError();\n  }\n\n  return new Promise((resolve, reject) => {\n    // drop down to IndexDB API, otherwise level-js will monkey around with the keys/values\n    const req = levelJs.store('readonly').get(key.toString());\n\n    req.transaction.onabort = () => {\n      reject(req.transaction.error);\n    };\n\n    req.transaction.oncomplete = () => {\n      if (req.result) {\n        return resolve(req.result);\n      }\n\n      reject(Errors.notFoundError());\n    };\n  });\n}\n\nfunction createStore(location, name, options) {\n  const _getDatastoreAndOptio = getDatastoreAndOptions(name, options),\n        StorageBackend = _getDatastoreAndOptio.StorageBackend,\n        storageOptions = _getDatastoreAndOptio.storageOptions;\n\n  if (name !== 'root') {\n    location = \"\".concat(location, \"/\").concat(name);\n  }\n\n  let store = new StorageBackend(location, storageOptions);\n\n  if (storageOptions.sharding) {\n    store = new ShardingStore(store, new core.shard.NextToLast(2));\n  } // necessary since level-js@5 cannot read keys from level-js@4 and earlier\n\n\n  const originalGet = store.get.bind(store);\n  const originalHas = store.has.bind(store);\n\n  store.get = key => getWithFallback(key, originalGet, originalHas, store);\n\n  store.has = key => hasWithFallback(key, originalHas, store);\n\n  return store;\n}\n\nmodule.exports = {\n  createStore,\n  hasWithFallback,\n  getWithFallback,\n  findLevelJs,\n  CONFIG_KEY,\n  VERSION_KEY\n};","map":null,"metadata":{},"sourceType":"script"}