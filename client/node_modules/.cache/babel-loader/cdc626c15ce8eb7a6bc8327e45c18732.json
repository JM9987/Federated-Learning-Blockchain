{"ast":null,"code":"'use strict';\n/** @typedef {import('../types').EventEmitterFactory} Events */\n\n/** @type Events */\n\nconst EventEmitter = require('events');\n\nconst lp = require('it-length-prefixed');\n\nconst pushable = require('it-pushable');\n\nconst _require = require('it-pipe'),\n      pipe = _require.pipe;\n\nconst _require2 = require('abortable-iterator'),\n      abortable = _require2.source;\n\nconst AbortController = require('abort-controller').default;\n\nconst debug = require('debug');\n\nconst log = debug('libp2p-pubsub:peer-streams');\nlog.error = debug('libp2p-pubsub:peer-streams:error');\n/**\n * @typedef {import('../stream-muxer/types').MuxedStream} MuxedStream\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('it-pushable').Pushable<Uint8Array>} PushableStream\n */\n\n/**\n * Thin wrapper around a peer's inbound / outbound pubsub streams\n */\n\nclass PeerStreams extends EventEmitter {\n  /**\n   * @param {object} properties - properties of the PeerStreams.\n   * @param {PeerId} properties.id\n   * @param {string} properties.protocol\n   */\n  constructor({\n    id,\n    protocol\n  }) {\n    super();\n    /**\n     * @type {import('peer-id')}\n     */\n\n    this.id = id;\n    /**\n     * Established protocol\n     *\n     * @type {string}\n     */\n\n    this.protocol = protocol;\n    /**\n     * The raw outbound stream, as retrieved from conn.newStream\n     *\n     * @private\n     * @type {null|MuxedStream}\n     */\n\n    this._rawOutboundStream = null;\n    /**\n     * The raw inbound stream, as retrieved from the callback from libp2p.handle\n     *\n     * @private\n     * @type {null|MuxedStream}\n     */\n\n    this._rawInboundStream = null;\n    /**\n     * An AbortController for controlled shutdown of the inbound stream\n     *\n     * @private\n     * @type {AbortController}\n     */\n\n    this._inboundAbortController = new AbortController();\n    /**\n     * Write stream -- its preferable to use the write method\n     *\n     * @type {null|PushableStream}\n     */\n\n    this.outboundStream = null;\n    /**\n     * Read stream\n     *\n     * @type {null| AsyncIterable<Uint8Array>}\n     */\n\n    this.inboundStream = null;\n  }\n  /**\n   * Do we have a connection to read from?\n   *\n   * @type {boolean}\n   */\n\n\n  get isReadable() {\n    return Boolean(this.inboundStream);\n  }\n  /**\n   * Do we have a connection to write on?\n   *\n   * @type {boolean}\n   */\n\n\n  get isWritable() {\n    return Boolean(this.outboundStream);\n  }\n  /**\n   * Send a message to this peer.\n   * Throws if there is no `stream` to write to available.\n   *\n   * @param {Uint8Array} data\n   * @returns {void}\n   */\n\n\n  write(data) {\n    if (!this.outboundStream) {\n      const id = this.id.toB58String();\n      throw new Error('No writable connection to ' + id);\n    }\n\n    this.outboundStream.push(data);\n  }\n  /**\n   * Attach a raw inbound stream and setup a read stream\n   *\n   * @param {MuxedStream} stream\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n\n\n  attachInboundStream(stream) {\n    // Create and attach a new inbound stream\n    // The inbound stream is:\n    // - abortable, set to only return on abort, rather than throw\n    // - transformed with length-prefix transform\n    this._rawInboundStream = stream;\n    this.inboundStream = abortable(pipe(this._rawInboundStream, lp.decode()), this._inboundAbortController.signal, {\n      returnOnAbort: true\n    });\n    this.emit('stream:inbound');\n    return this.inboundStream;\n  }\n  /**\n   * Attach a raw outbound stream and setup a write stream\n   *\n   * @param {MuxedStream} stream\n   * @returns {Promise<void>}\n   */\n\n\n  async attachOutboundStream(stream) {\n    // If an outbound stream already exists, gently close it\n    const _prevStream = this.outboundStream;\n\n    if (this.outboundStream) {\n      // End the stream without emitting a close event\n      await this.outboundStream.end();\n    }\n\n    this._rawOutboundStream = stream;\n    this.outboundStream = pushable({\n      onEnd: shouldEmit => {\n        // close writable side of the stream\n        this._rawOutboundStream && this._rawOutboundStream.reset && this._rawOutboundStream.reset();\n        this._rawOutboundStream = null;\n        this.outboundStream = null;\n\n        if (shouldEmit) {\n          this.emit('close');\n        }\n      }\n    });\n    pipe(this.outboundStream, lp.encode(), this._rawOutboundStream).catch(err => {\n      log.error(err);\n    }); // Only emit if the connection is new\n\n    if (!_prevStream) {\n      this.emit('stream:outbound');\n    }\n  }\n  /**\n   * Closes the open connection to peer\n   *\n   * @returns {void}\n   */\n\n\n  close() {\n    // End the outbound stream\n    if (this.outboundStream) {\n      this.outboundStream.end();\n    } // End the inbound stream\n\n\n    if (this.inboundStream) {\n      this._inboundAbortController.abort();\n    }\n\n    this._rawOutboundStream = null;\n    this.outboundStream = null;\n    this._rawInboundStream = null;\n    this.inboundStream = null;\n    this.emit('close');\n  }\n\n}\n\nmodule.exports = PeerStreams;","map":null,"metadata":{},"sourceType":"script"}