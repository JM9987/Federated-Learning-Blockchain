{"ast":null,"code":"'use strict';\n\nconst varint = require('varint');\n\nconst encoder = require('./encoder');\n\nfunction int64Encode(val, buffer, dataView, offset) {\n  if (val < 0) {\n    const last = offset + 9;\n    varint.encode(val * -1, buffer, offset);\n    offset += varint.encode.bytes - 1;\n    buffer[offset] = buffer[offset] | 0x80;\n\n    while (offset < last - 1) {\n      offset++;\n      buffer[offset] = 0xff;\n    }\n\n    buffer[last] = 0x01;\n    int64Encode.bytes = 10;\n  } else {\n    varint.encode(val, buffer, offset);\n    int64Encode.bytes = varint.encode.bytes;\n  }\n}\n\nfunction int64Decode(buffer, dataView, offset) {\n  let val = varint.decode(buffer, offset);\n\n  if (val >= Math.pow(2, 63)) {\n    let limit = 9;\n\n    while (buffer[offset + limit - 1] === 0xff) limit--;\n\n    limit = limit || 9;\n    const subset = buffer.subarray(offset, offset + limit);\n    subset[limit - 1] = subset[limit - 1] & 0x7f;\n    val = -1 * varint.decode(subset, 0);\n    int64Decode.bytes = 10;\n  } else {\n    int64Decode.bytes = varint.decode.bytes;\n  }\n\n  return val;\n}\n\nfunction int64EncodingLength(val) {\n  return val < 0 ? 10 : varint.encodingLength(val);\n}\n\nmodule.exports = encoder(0, int64Encode, int64Decode, int64EncodingLength);","map":null,"metadata":{},"sourceType":"script"}