{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst errCode = require('err-code');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n/**\n * @typedef {import('multibase/src/types').BaseName} BaseName\n */\n\n/**\n * @param {string|Uint8Array|CID} multihash\n * @param {BaseName | 'utf8' | 'utf-8' | 'ascii' | 'base58'} [enc]\n * @returns {string|Uint8Array}\n */\n\n\nfunction normalizeMultihash(multihash, enc) {\n  if (typeof multihash === 'string') {\n    if (enc === 'base58' || !enc) {\n      return multihash;\n    }\n\n    return uint8ArrayFromString(multihash, enc);\n  } else if (multihash instanceof Uint8Array) {\n    return multihash;\n  } else if (CID.isCID(multihash)) {\n    return multihash.bytes;\n  }\n\n  throw new Error('unsupported multihash');\n}\n/**\n * @param {Object} config\n * @param {import('.').IPLD} config.ipld\n * @param {import('.').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  /**\n   *\n   * @param {CID} multihash\n   * @param {GetOptions & AbortOptions} [options]\n   */\n  async function get(multihash, options = {}) {\n    // eslint-disable-line require-await\n    let mh, cid;\n\n    try {\n      mh = normalizeMultihash(multihash, options.enc);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_MULTIHASH');\n    }\n\n    try {\n      cid = new CID(mh);\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n\n    if (options.cidVersion === 1) {\n      cid = cid.toV1();\n    }\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    return ipld.get(cid, {\n      signal: options.signal\n    });\n  }\n\n  return withTimeoutOption(get);\n};\n/**\n * @typedef {Object} GetOptions\n * @property {boolean} [preload]\n * @property {number} [cidVersion]\n * @property {BaseName | 'utf8' | 'utf-8' | 'ascii' | 'base58'} [enc]\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}