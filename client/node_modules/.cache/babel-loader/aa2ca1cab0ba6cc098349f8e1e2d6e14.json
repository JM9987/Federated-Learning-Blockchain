{"ast":null,"code":"'use strict';\n\nconst _require = require('../utils'),\n      mergeOptions = _require.mergeOptions;\n\nconst _require2 = require('ipfs-utils/src/env'),\n      isTest = _require2.isTest;\n\nconst log = require('debug')('ipfs');\n\nconst _require3 = require('ipld-dag-pb'),\n      DAGNode = _require3.DAGNode;\n\nconst UnixFs = require('ipfs-unixfs');\n\nconst multicodec = require('multicodec');\n\nconst initAssets = require('../runtime/init-assets-nodejs');\n\nconst _require4 = require('../errors'),\n      AlreadyInitializedError = _require4.AlreadyInitializedError;\n\nconst createStartAPI = require('./start');\n\nconst createStopAPI = require('./stop');\n\nconst createDNSAPI = require('./dns');\n\nconst createIsOnlineAPI = require('./is-online');\n\nconst createResolveAPI = require('./resolve');\n\nconst PinAPI = require('./pin');\n\nconst IPNSAPI = require('./ipns');\n\nconst NameAPI = require('./name');\n\nconst createRefsAPI = require('./refs');\n\nconst createRefsLocalAPI = require('./refs/local');\n\nconst BitswapAPI = require('./bitswap');\n\nconst BootstrapAPI = require('./bootstrap');\n\nconst BlockAPI = require('./block');\n\nconst RootAPI = require('./root');\n\nconst createVersionAPI = require('./version');\n\nconst createIDAPI = require('./id');\n\nconst createConfigAPI = require('./config');\n\nconst DagAPI = require('./dag');\n\nconst PinManagerAPI = require('./pin/pin-manager');\n\nconst createPreloadAPI = require('../preload');\n\nconst createMfsPreloadAPI = require('../mfs-preload');\n\nconst createFilesAPI = require('./files');\n\nconst KeyAPI = require('./key');\n\nconst ObjectAPI = require('./object');\n\nconst RepoAPI = require('./repo');\n\nconst StatsAPI = require('./stats');\n\nconst IPFSBlockService = require('ipfs-block-service');\n\nconst createIPLD = require('./ipld');\n\nconst Storage = require('./storage');\n\nconst Network = require('./network');\n\nconst Service = require('../utils/service');\n\nconst SwarmAPI = require('./swarm');\n\nconst createGCLockAPI = require('./gc-lock');\n\nconst createPingAPI = require('./ping');\n\nconst createDHTAPI = require('./dht');\n\nconst createPubSubAPI = require('./pubsub');\n\nclass IPFS {\n  /**\n   * @param {Object} config\n   * @param {Print} config.print\n   * @param {StorageAPI} config.storage\n   * @param {Options} config.options\n   */\n  constructor({\n    print,\n    storage,\n    options\n  }) {\n    const peerId = storage.peerId,\n          repo = storage.repo,\n          keychain = storage.keychain;\n    const network = Service.create(Network);\n    const preload = createPreloadAPI(options.preload);\n    /** @type {BlockService} */\n\n    const blockService = new IPFSBlockService(storage.repo);\n    const ipld = createIPLD({\n      blockService,\n      print,\n      options: options.ipld\n    });\n    const gcLock = createGCLockAPI({\n      path: repo.path,\n      repoOwner: options.repoOwner\n    });\n    const dns = createDNSAPI();\n    const isOnline = createIsOnlineAPI({\n      network\n    }); // @ts-ignore This type check fails as options.\n    // libp2p can be a function, while IPNS router config expects libp2p config\n\n    const ipns = new IPNSAPI(options);\n    const dagReader = DagAPI.reader({\n      ipld,\n      preload\n    });\n    const name = new NameAPI({\n      dns,\n      ipns,\n      dagReader,\n      peerId,\n      isOnline,\n      keychain,\n      options\n    });\n    const resolve = createResolveAPI({\n      ipld,\n      name\n    });\n    const pinManager = new PinManagerAPI({\n      repo,\n      dagReader\n    });\n    const pin = new PinAPI({\n      gcLock,\n      pinManager,\n      dagReader\n    });\n    const block = new BlockAPI({\n      blockService,\n      preload,\n      gcLock,\n      pinManager,\n      pin\n    });\n    const dag = new DagAPI({\n      ipld,\n      preload,\n      gcLock,\n      pin,\n      dagReader\n    });\n    const refs = Object.assign(createRefsAPI({\n      ipld,\n      resolve,\n      preload\n    }), {\n      local: createRefsLocalAPI({\n        repo: storage.repo\n      })\n    });\n\n    const _ref = new RootAPI({\n      gcLock,\n      preload,\n      pin,\n      block,\n      ipld,\n      options: options.EXPERIMENTAL\n    }),\n          add = _ref.add,\n          addAll = _ref.addAll,\n          cat = _ref.cat,\n          get = _ref.get,\n          ls = _ref.ls;\n\n    const files = createFilesAPI({\n      ipld,\n      block,\n      blockService,\n      repo,\n      preload,\n      options\n    });\n    const mfsPreload = createMfsPreloadAPI({\n      files,\n      preload,\n      options: options.preload\n    });\n    this.preload = preload;\n    this.name = name;\n    this.ipld = ipld;\n    this.ipns = ipns;\n    this.pin = pin;\n    this.resolve = resolve;\n    this.block = block;\n    this.refs = refs;\n    this.start = createStartAPI({\n      network,\n      peerId,\n      repo,\n      blockService,\n      preload,\n      ipns,\n      mfsPreload,\n      print,\n      keychain,\n      options\n    });\n    this.stop = createStopAPI({\n      network,\n      preload,\n      mfsPreload,\n      blockService,\n      ipns,\n      repo\n    });\n    this.dht = createDHTAPI({\n      network,\n      repo\n    });\n    this.pubsub = createPubSubAPI({\n      network,\n      config: options.config\n    });\n    this.dns = dns;\n    this.isOnline = isOnline;\n    this.id = createIDAPI({\n      network,\n      peerId\n    });\n    this.version = createVersionAPI({\n      repo\n    });\n    this.bitswap = new BitswapAPI({\n      network\n    });\n    this.bootstrap = new BootstrapAPI({\n      repo\n    });\n    this.config = createConfigAPI({\n      repo\n    });\n    this.ping = createPingAPI({\n      network\n    });\n    this.add = add;\n    this.addAll = addAll;\n    this.cat = cat;\n    this.get = get;\n    this.ls = ls;\n    this.dag = dag;\n    this.files = files;\n    this.key = new KeyAPI({\n      keychain\n    });\n    this.object = new ObjectAPI({\n      ipld,\n      preload,\n      gcLock,\n      dag\n    });\n    this.repo = new RepoAPI({\n      gcLock,\n      pin,\n      repo,\n      refs\n    });\n    this.stats = new StatsAPI({\n      repo,\n      network\n    });\n    this.swarm = new SwarmAPI({\n      network\n    }); // For the backwards compatibility\n\n    Object.defineProperty(this, 'libp2p', {\n      get() {\n        const net = network.try();\n        return net ? net.libp2p : undefined;\n      }\n\n    });\n  }\n  /**\n   * `IPFS.create` will do the initialization. Keep this around for backwards\n   * compatibility.\n   *\n   * @deprecated\n   */\n\n\n  async init() {\n    // eslint-disable-line require-await\n    throw new AlreadyInitializedError();\n  }\n  /**\n   * @param {Options} options\n   */\n\n\n  static async create(options = {}) {\n    options = mergeOptions(getDefaultOptions(), options); // eslint-disable-next-line no-console\n\n    const print = options.silent ? log : console.log;\n    const init = { ...mergeOptions(initOptions(options), options),\n      print\n    };\n    const storage = await Storage.start(init);\n    const config = await storage.repo.config.getAll();\n    const ipfs = new IPFS({\n      storage,\n      print,\n      options: { ...options,\n        config\n      }\n    });\n    await ipfs.preload.start();\n    ipfs.ipns.startOffline(storage);\n\n    if (storage.isNew && !init.emptyRepo) {\n      // add empty unixfs dir object (go-ipfs assumes this exists)\n      const cid = await addEmptyDir(ipfs);\n      log('adding default assets');\n      await initAssets({\n        addAll: ipfs.addAll,\n        print\n      });\n      log('initializing IPNS keyspace');\n      await ipfs.ipns.initializeKeyspace(storage.peerId.privKey, cid.toString());\n    }\n\n    if (options.start !== false) {\n      await ipfs.start();\n    }\n\n    return ipfs;\n  }\n\n}\n\nmodule.exports = IPFS;\n/**\n * @param {Options} options\n * @returns {InitOptions}\n */\n\nconst initOptions = ({\n  init\n}) => typeof init === 'object' ? init : {};\n/**\n * @param {IPFS} ipfs\n */\n\n\nconst addEmptyDir = async ipfs => {\n  const node = new DAGNode(new UnixFs('directory').marshal());\n  const cid = await ipfs.dag.put(node, {\n    version: 0,\n    format: multicodec.DAG_PB,\n    hashAlg: multicodec.SHA2_256,\n    preload: false\n  });\n  await ipfs.pin.add(cid);\n  return cid;\n};\n/**\n * @returns {Options}\n */\n\n\nconst getDefaultOptions = () => ({\n  start: true,\n  EXPERIMENTAL: {},\n  preload: {\n    enabled: !isTest,\n    // preload by default, unless in test env\n    addresses: ['/dns4/node0.preload.ipfs.io/https', '/dns4/node1.preload.ipfs.io/https', '/dns4/node2.preload.ipfs.io/https', '/dns4/node3.preload.ipfs.io/https']\n  }\n});\n/**\n * @typedef {StorageOptions & IPFSOptions} Options\n *\n * @typedef {Object} IPFSOptions\n * Options argument can be used to specify advanced configuration.\n * @property {InitOptions} [init] - Initialization options\n * the IPFS node.\n * Note that *initializing* a repo is different from creating an instance of\n * [`ipfs.Repo`](https://github.com/ipfs/js-ipfs-repo). The IPFS constructor\n * sets many special properties when initializing a repo, so you should usually\n * not try and call `repoInstance.init()` yourself.\n * @property {boolean} [start=true] - If `false`, do not automatically\n * start the IPFS node. Instead, youâ€™ll need to manually call\n * [`node.start()`](https://github.com/ipfs/js-ipfs/blob/master/packages/ipfs/docs/MODULE.md#nodestart)\n * yourself.\n * @property {string} [pass=null] - A passphrase to encrypt/decrypt your keys.\n * @property {boolean} [silent=false] - Prevents all logging output from the\n * IPFS node. (Default: `false`)\n * @property {RelayOptions} [relay={ enabled: true, hop: { enabled: false, active: false } }]\n * - Configure circuit relay (see the [circuit relay tutorial]\n * (https://github.com/ipfs/js-ipfs/tree/master/examples/circuit-relaying)\n * to learn more).\n * @property {boolean} [offline=false] - Run ipfs node offline. The node does\n * not connect to the rest of the network but provides a local API.\n * @property {PreloadOptions} [preload] - Configure remote preload nodes.\n * The remote will preload content added on this node, and also attempt to\n * preload objects requested by this node.\n * @property {ExperimentalOptions} [EXPERIMENTAL] - Enable and configure\n * experimental features.\n * @property {IPFSConfig} [config] - Modify the default IPFS node config. This\n * object will be *merged* with the default config; it will not replace it.\n * (Default: [`config-nodejs.js`](https://github.com/ipfs/js-ipfs/tree/master/packages/ipfs/src/core/runtime/config-nodejs.js)\n * in Node.js, [`config-browser.js`](https://github.com/ipfs/js-ipfs/tree/master/packages/ipfs/src/core/runtime/config-browser.js)\n * in browsers)\n * @property {IPLDOptions} [ipld] - Modify the default IPLD config. This object\n * will be *merged* with the default config; it will not replace it. Check IPLD\n * [docs](https://github.com/ipld/js-ipld#ipld-constructor) for more information\n * on the available options. (Default: [`ipld.js`]\n * (https://github.com/ipfs/js-ipfs/tree/master/packages/ipfs/src/core/runtime/ipld-nodejs.js) in Node.js, [`ipld-browser.js`](https://github.com/ipfs/js-ipfs/tree/master/packages/ipfs/src/core/runtime/ipld-browser.js)\n * (https://github.com/ipfs/js-ipfs/tree/master/packages/ipfs/src/core/runtime/ipld.js)\n * in browsers)\n * @property {LibP2POptions|Function} [libp2p] - The libp2p option allows you to build\n * your libp2p node by configuration, or via a bundle function. If you are\n * looking to just modify the below options, using the object format is the\n * quickest way to get the default features of libp2p. If you need to create a\n * more customized libp2p node, such as with custom transports or peer/content\n * routers that need some of the ipfs data on startup, a custom bundle is a\n * great way to achieve this.\n * - You can see the bundle in action in the [custom libp2p example](https://github.com/ipfs/js-ipfs/tree/master/examples/custom-libp2p).\n * - Please see [libp2p/docs/CONFIGURATION.md](https://github.com/libp2p/js-libp2p/blob/master/doc/CONFIGURATION.md)\n * for the list of options libp2p supports.\n * - Default: [`libp2p-nodejs.js`](../src/core/runtime/libp2p-nodejs.js)\n * in Node.js, [`libp2p-browser.js`](../src/core/runtime/libp2p-browser.js) in\n * browsers.\n * @property {boolean} [repoOwner]\n *\n * @typedef {object} ExperimentalOptions\n * @property {boolean} [ipnsPubsub] - Enable pub-sub on IPNS. (Default: `false`)\n * @property {boolean} [sharding] - Enable directory sharding. Directories that have many child objects will be represented by multiple DAG nodes instead of just one. It can improve lookup performance when a directory has several thousand files or more. (Default: `false`)\n *\n *\n * @typedef {import('./storage').StorageOptions} StorageOptions\n * @typedef {import('../preload').Options} PreloadOptions\n * @typedef {import('./ipld').Options} IPLDOptions\n * @typedef {import('./libp2p').Options} LibP2POptions\n *\n * @typedef {object} RelayOptions\n * @property {boolean} [enabled] - Enable circuit relay dialer and listener. (Default: `true`)\n * @property {object} [hop]\n * @property {boolean} [hop.enabled] - Make this node a relay (other nodes can connect *through* it). (Default: `false`)\n * @property {boolean} [hop.active] - Make this an *active* relay node. Active relay nodes will attempt to dial a destin\n *\n * @typedef {import('./storage').InitOptions} InitOptions\n *\n * @typedef {import('./storage')} StorageAPI\n *\n * @typedef {import('./network').Options} NetworkOptions\n * @typedef {Service<NetworkOptions, Network>} NetworkService\n * @typedef {import('./storage').Repo} Repo\n * @typedef {(...args:any[]) => void} Print\n * @typedef {import('./storage').Keychain} Keychain\n * @typedef {import('./config').IPFSConfig} IPFSConfig\n *\n * @typedef {import('peer-id')} PeerId\n * @typedef {import('./libp2p').LibP2P} LibP2P\n * @typedef {import('./pin/pin-manager')} PinManager\n * @typedef {import('ipfs-core-types/src/block-service').BlockService} BlockService\n * @typedef {import('ipfs-core-types/src/bitswap').Bitswap} BitSwap\n * @typedef {import('./ipld').IPLD} IPLD\n * @typedef {import('./gc-lock').GCLock} GCLock\n * @typedef {import('../preload').Preload} Preload\n * @typedef {import('../mfs-preload').MFSPreload} MFSPreload\n * @typedef {import('./ipns')} IPNS\n * @typedef {import('./pin')} Pin\n * @typedef {import('./block')} Block\n * @typedef {import('./dag').DagReader} DagReader\n * @typedef {import('./dag')} Dag\n * @typedef {ReturnType<typeof import('./files')>} Files\n * @typedef {ReturnType<typeof createIsOnlineAPI>} IsOnline\n * @typedef {ReturnType<typeof createResolveAPI>} Resolve\n * @typedef {ReturnType<typeof createRefsAPI>} Refs\n * @typedef {ReturnType<typeof createDNSAPI>} DNS\n * @typedef {import('./name')} Name\n * @typedef {import('../utils').AbortOptions} AbortOptions\n * @typedef {import('cids')} CID\n * @typedef {import('multiaddr')} Multiaddr\n * @typedef {import('./ipld').Block} IPLDBlock\n */","map":null,"metadata":{},"sourceType":"script"}