{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/home/ubuntu/Codigo_Javier/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateTopicScoreParams = exports.validatePeerScoreParams = exports.createTopicScoreParams = exports.createPeerScoreParams = exports.defaultTopicScoreParams = exports.defaultPeerScoreParams = void 0;\n\nconst constants_1 = require(\"./constants\"); // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n// @ts-ignore\n\n\nconst errcode = require(\"err-code\");\n\nexports.defaultPeerScoreParams = {\n  topics: {},\n  topicScoreCap: 10,\n  appSpecificScore: () => 0,\n  appSpecificWeight: 10,\n  IPColocationFactorWeight: -5,\n  IPColocationFactorThreshold: 10,\n  IPColocationFactorWhitelist: new Set(),\n  behaviourPenaltyWeight: -10,\n  behaviourPenaltyDecay: 0.2,\n  decayInterval: 1000,\n  decayToZero: 0.1,\n  retainScore: 3600 * 1000\n};\nexports.defaultTopicScoreParams = {\n  topicWeight: 0.5,\n  timeInMeshWeight: 1,\n  timeInMeshQuantum: 1,\n  timeInMeshCap: 3600,\n  firstMessageDeliveriesWeight: 1,\n  firstMessageDeliveriesDecay: 0.5,\n  firstMessageDeliveriesCap: 2000,\n  meshMessageDeliveriesWeight: -1,\n  meshMessageDeliveriesDecay: 0.5,\n  meshMessageDeliveriesCap: 100,\n  meshMessageDeliveriesThreshold: 20,\n  meshMessageDeliveriesWindow: 10,\n  meshMessageDeliveriesActivation: 5000,\n  meshFailurePenaltyWeight: -1,\n  meshFailurePenaltyDecay: 0.5,\n  invalidMessageDeliveriesWeight: -1,\n  invalidMessageDeliveriesDecay: 0.3\n};\n\nfunction createPeerScoreParams(p = {}) {\n  return Object.assign(Object.assign(Object.assign({}, exports.defaultPeerScoreParams), p), {\n    topics: p.topics ? Object.entries(p.topics).reduce((topics, [topic, topicScoreParams]) => {\n      topics[topic] = createTopicScoreParams(topicScoreParams);\n      return topics;\n    }, {}) : {}\n  });\n}\n\nexports.createPeerScoreParams = createPeerScoreParams;\n\nfunction createTopicScoreParams(p = {}) {\n  return Object.assign(Object.assign({}, exports.defaultTopicScoreParams), p);\n}\n\nexports.createTopicScoreParams = createTopicScoreParams; // peer score parameter validation\n\nfunction validatePeerScoreParams(p) {\n  for (const _ref of Object.entries(p.topics)) {\n    var _ref2 = _slicedToArray(_ref, 2);\n\n    const topic = _ref2[0];\n    const params = _ref2[1];\n\n    try {\n      validateTopicScoreParams(params);\n    } catch (e) {\n      throw errcode(new Error(\"invalid score parameters for topic \".concat(topic, \": \").concat(e.message)), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n    }\n  } // check that the topic score is 0 or something positive\n\n\n  if (p.topicScoreCap < 0) {\n    throw errcode(new Error('invalid topic score cap; must be positive (or 0 for no cap)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check that we have an app specific score; the weight can be anything (but expected positive)\n\n\n  if (p.appSpecificScore === null || p.appSpecificScore === undefined) {\n    throw errcode(new Error('missing application specific score function'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check the IP colocation factor\n\n\n  if (p.IPColocationFactorWeight > 0) {\n    throw errcode(new Error('invalid IPColocationFactorWeight; must be negative (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.IPColocationFactorWeight !== 0 && p.IPColocationFactorThreshold < 1) {\n    throw errcode(new Error('invalid IPColocationFactorThreshold; must be at least 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check the behaviour penalty\n\n\n  if (p.behaviourPenaltyWeight > 0) {\n    throw errcode(new Error('invalid BehaviourPenaltyWeight; must be negative (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.behaviourPenaltyWeight !== 0 && (p.behaviourPenaltyDecay <= 0 || p.behaviourPenaltyDecay >= 1)) {\n    throw errcode(new Error('invalid BehaviourPenaltyDecay; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check the decay parameters\n\n\n  if (p.decayInterval < 1000) {\n    throw errcode(new Error('invalid DecayInterval; must be at least 1s'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.decayToZero <= 0 || p.decayToZero >= 1) {\n    throw errcode(new Error('invalid DecayToZero; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  } // no need to check the score retention; a value of 0 means that we don't retain scores\n\n}\n\nexports.validatePeerScoreParams = validatePeerScoreParams;\n\nfunction validateTopicScoreParams(p) {\n  // make sure we have a sane topic weight\n  if (p.topicWeight < 0) {\n    throw errcode(new Error('invalid topic weight; must be >= 0'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check P1\n\n\n  if (p.timeInMeshQuantum === 0) {\n    throw errcode(new Error('invalid TimeInMeshQuantum; must be non zero'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.timeInMeshWeight < 0) {\n    throw errcode(new Error('invalid TimeInMeshWeight; must be positive (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.timeInMeshWeight !== 0 && p.timeInMeshQuantum <= 0) {\n    throw errcode(new Error('invalid TimeInMeshQuantum; must be positive'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.timeInMeshWeight !== 0 && p.timeInMeshCap <= 0) {\n    throw errcode(new Error('invalid TimeInMeshCap; must be positive'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check P2\n\n\n  if (p.firstMessageDeliveriesWeight < 0) {\n    throw errcode(new Error('invallid FirstMessageDeliveriesWeight; must be positive (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.firstMessageDeliveriesWeight !== 0 && (p.firstMessageDeliveriesDecay <= 0 || p.firstMessageDeliveriesDecay >= 1)) {\n    throw errcode(new Error('invalid FirstMessageDeliveriesDecay; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.firstMessageDeliveriesWeight !== 0 && p.firstMessageDeliveriesCap <= 0) {\n    throw errcode(new Error('invalid FirstMessageDeliveriesCap; must be positive'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check P3\n\n\n  if (p.meshMessageDeliveriesWeight > 0) {\n    throw errcode(new Error('invalid MeshMessageDeliveriesWeight; must be negative (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshMessageDeliveriesWeight !== 0 && (p.meshMessageDeliveriesDecay <= 0 || p.meshMessageDeliveriesDecay >= 1)) {\n    throw errcode(new Error('invalid MeshMessageDeliveriesDecay; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesCap <= 0) {\n    throw errcode(new Error('invalid MeshMessageDeliveriesCap; must be positive'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesThreshold <= 0) {\n    throw errcode(new Error('invalid MeshMessageDeliveriesThreshold; must be positive'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshMessageDeliveriesWindow < 0) {\n    throw errcode(new Error('invalid MeshMessageDeliveriesWindow; must be non-negative'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshMessageDeliveriesWeight !== 0 && p.meshMessageDeliveriesActivation < 1000) {\n    throw errcode(new Error('invalid MeshMessageDeliveriesActivation; must be at least 1s'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check P3b\n\n\n  if (p.meshFailurePenaltyWeight > 0) {\n    throw errcode(new Error('invalid MeshFailurePenaltyWeight; must be negative (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.meshFailurePenaltyWeight !== 0 && (p.meshFailurePenaltyDecay <= 0 || p.meshFailurePenaltyDecay >= 1)) {\n    throw errcode(new Error('invalid MeshFailurePenaltyDecay; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  } // check P4\n\n\n  if (p.invalidMessageDeliveriesWeight > 0) {\n    throw errcode(new Error('invalid InvalidMessageDeliveriesWeight; must be negative (or 0 to disable)'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n\n  if (p.invalidMessageDeliveriesDecay <= 0 || p.invalidMessageDeliveriesDecay >= 1) {\n    throw errcode(new Error('invalid InvalidMessageDeliveriesDecay; must be between 0 and 1'), constants_1.ERR_INVALID_PEER_SCORE_PARAMS);\n  }\n}\n\nexports.validateTopicScoreParams = validateTopicScoreParams;","map":null,"metadata":{},"sourceType":"script"}