{"ast":null,"code":"'use strict';\n\nconst randomBytes = require('libp2p-crypto/src/random-bytes');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n\nconst uint8ArrayFromString = require('uint8arrays/from-string');\n\nconst PeerId = require('peer-id');\n\nconst multihash = require('multihashes');\n\nexports = module.exports;\n/**\n * Generatea random sequence number.\n *\n * @returns {Uint8Array}\n * @private\n */\n\nexports.randomSeqno = () => {\n  return randomBytes(8);\n};\n/**\n * Generate a message id, based on the `from` and `seqno`.\n *\n * @param {string} from\n * @param {Uint8Array} seqno\n * @returns {Uint8Array}\n * @private\n */\n\n\nexports.msgId = (from, seqno) => {\n  const fromBytes = PeerId.createFromB58String(from).id;\n  const msgId = new Uint8Array(fromBytes.length + seqno.length);\n  msgId.set(fromBytes, 0);\n  msgId.set(seqno, fromBytes.length);\n  return msgId;\n};\n/**\n * Generate a message id, based on message `data`.\n *\n * @param {Uint8Array} data\n * @returns {Uint8Array}\n * @private\n */\n\n\nexports.noSignMsgId = data => multihash.encode(data, 'sha2-256');\n/**\n * Check if any member of the first set is also a member\n * of the second set.\n *\n * @param {Set|Array} a\n * @param {Set|Array} b\n * @returns {boolean}\n * @private\n */\n\n\nexports.anyMatch = (a, b) => {\n  let bHas;\n\n  if (Array.isArray(b)) {\n    bHas = val => b.indexOf(val) > -1;\n  } else {\n    bHas = val => b.has(val);\n  }\n\n  for (const val of a) {\n    if (bHas(val)) {\n      return true;\n    }\n  }\n\n  return false;\n};\n/**\n * Make everything an array.\n *\n * @template T\n * @param {T|T[]} maybeArray\n * @returns {T[]}\n * @private\n */\n\n\nexports.ensureArray = maybeArray => {\n  if (!Array.isArray(maybeArray)) {\n    return [maybeArray];\n  }\n\n  return maybeArray;\n};\n/**\n * Ensures `message.from` is base58 encoded\n *\n * @template {{from?:any}} T\n * @param {T & {from?:string, receivedFrom:string}} message\n * @param {string} [peerId]\n * @returns {T & {from?: string, peerId?: string }}\n */\n\n\nexports.normalizeInRpcMessage = (message, peerId) => {\n  const m = Object.assign({}, message);\n\n  if (message.from instanceof Uint8Array) {\n    m.from = uint8ArrayToString(message.from, 'base58btc');\n  }\n\n  if (peerId) {\n    m.receivedFrom = peerId;\n  }\n\n  return m;\n};\n/**\n * @template {{from?:any, data?:any}} T\n *\n * @param {T} message\n * @returns {T & {from?: Uint8Array, data?: Uint8Array}}\n */\n\n\nexports.normalizeOutRpcMessage = message => {\n  const m = Object.assign({}, message);\n\n  if (typeof message.from === 'string') {\n    m.from = uint8ArrayFromString(message.from, 'base58btc');\n  }\n\n  if (typeof message.data === 'string') {\n    m.data = uint8ArrayFromString(message.data);\n  }\n\n  return m;\n};","map":null,"metadata":{},"sourceType":"script"}