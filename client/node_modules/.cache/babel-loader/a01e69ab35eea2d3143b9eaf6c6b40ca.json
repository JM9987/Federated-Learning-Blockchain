{"ast":null,"code":"/*eslint-disable*/\n\"use strict\";\n\nvar $protobuf = require(\"protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"libp2p-peer-id\"] || ($protobuf.roots[\"libp2p-peer-id\"] = {});\n\n$root.PeerIdProto = function () {\n  /**\n   * Properties of a PeerIdProto.\n   * @exports IPeerIdProto\n   * @interface IPeerIdProto\n   * @property {Uint8Array} id PeerIdProto id\n   * @property {Uint8Array|null} [pubKey] PeerIdProto pubKey\n   * @property {Uint8Array|null} [privKey] PeerIdProto privKey\n   */\n\n  /**\n   * Constructs a new PeerIdProto.\n   * @exports PeerIdProto\n   * @classdesc Represents a PeerIdProto.\n   * @implements IPeerIdProto\n   * @constructor\n   * @param {IPeerIdProto=} [p] Properties to set\n   */\n  function PeerIdProto(p) {\n    if (p) for (var ks = Object.keys(p), i = 0; i < ks.length; ++i) if (p[ks[i]] != null) this[ks[i]] = p[ks[i]];\n  }\n  /**\n   * PeerIdProto id.\n   * @member {Uint8Array} id\n   * @memberof PeerIdProto\n   * @instance\n   */\n\n\n  PeerIdProto.prototype.id = $util.newBuffer([]);\n  /**\n   * PeerIdProto pubKey.\n   * @member {Uint8Array} pubKey\n   * @memberof PeerIdProto\n   * @instance\n   */\n\n  PeerIdProto.prototype.pubKey = $util.newBuffer([]);\n  /**\n   * PeerIdProto privKey.\n   * @member {Uint8Array} privKey\n   * @memberof PeerIdProto\n   * @instance\n   */\n\n  PeerIdProto.prototype.privKey = $util.newBuffer([]);\n  /**\n   * Encodes the specified PeerIdProto message. Does not implicitly {@link PeerIdProto.verify|verify} messages.\n   * @function encode\n   * @memberof PeerIdProto\n   * @static\n   * @param {IPeerIdProto} m PeerIdProto message or plain object to encode\n   * @param {$protobuf.Writer} [w] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n  PeerIdProto.encode = function encode(m, w) {\n    if (!w) w = $Writer.create();\n    w.uint32(10).bytes(m.id);\n    if (m.pubKey != null && Object.hasOwnProperty.call(m, \"pubKey\")) w.uint32(18).bytes(m.pubKey);\n    if (m.privKey != null && Object.hasOwnProperty.call(m, \"privKey\")) w.uint32(26).bytes(m.privKey);\n    return w;\n  };\n  /**\n   * Decodes a PeerIdProto message from the specified reader or buffer.\n   * @function decode\n   * @memberof PeerIdProto\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} r Reader or buffer to decode from\n   * @param {number} [l] Message length if known beforehand\n   * @returns {PeerIdProto} PeerIdProto\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  PeerIdProto.decode = function decode(r, l) {\n    if (!(r instanceof $Reader)) r = $Reader.create(r);\n    var c = l === undefined ? r.len : r.pos + l,\n        m = new $root.PeerIdProto();\n\n    while (r.pos < c) {\n      var t = r.uint32();\n\n      switch (t >>> 3) {\n        case 1:\n          m.id = r.bytes();\n          break;\n\n        case 2:\n          m.pubKey = r.bytes();\n          break;\n\n        case 3:\n          m.privKey = r.bytes();\n          break;\n\n        default:\n          r.skipType(t & 7);\n          break;\n      }\n    }\n\n    if (!m.hasOwnProperty(\"id\")) throw $util.ProtocolError(\"missing required 'id'\", {\n      instance: m\n    });\n    return m;\n  };\n  /**\n   * Creates a PeerIdProto message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PeerIdProto\n   * @static\n   * @param {Object.<string,*>} d Plain object\n   * @returns {PeerIdProto} PeerIdProto\n   */\n\n\n  PeerIdProto.fromObject = function fromObject(d) {\n    if (d instanceof $root.PeerIdProto) return d;\n    var m = new $root.PeerIdProto();\n\n    if (d.id != null) {\n      if (typeof d.id === \"string\") $util.base64.decode(d.id, m.id = $util.newBuffer($util.base64.length(d.id)), 0);else if (d.id.length) m.id = d.id;\n    }\n\n    if (d.pubKey != null) {\n      if (typeof d.pubKey === \"string\") $util.base64.decode(d.pubKey, m.pubKey = $util.newBuffer($util.base64.length(d.pubKey)), 0);else if (d.pubKey.length) m.pubKey = d.pubKey;\n    }\n\n    if (d.privKey != null) {\n      if (typeof d.privKey === \"string\") $util.base64.decode(d.privKey, m.privKey = $util.newBuffer($util.base64.length(d.privKey)), 0);else if (d.privKey.length) m.privKey = d.privKey;\n    }\n\n    return m;\n  };\n  /**\n   * Creates a plain object from a PeerIdProto message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PeerIdProto\n   * @static\n   * @param {PeerIdProto} m PeerIdProto\n   * @param {$protobuf.IConversionOptions} [o] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  PeerIdProto.toObject = function toObject(m, o) {\n    if (!o) o = {};\n    var d = {};\n\n    if (o.defaults) {\n      if (o.bytes === String) d.id = \"\";else {\n        d.id = [];\n        if (o.bytes !== Array) d.id = $util.newBuffer(d.id);\n      }\n      if (o.bytes === String) d.pubKey = \"\";else {\n        d.pubKey = [];\n        if (o.bytes !== Array) d.pubKey = $util.newBuffer(d.pubKey);\n      }\n      if (o.bytes === String) d.privKey = \"\";else {\n        d.privKey = [];\n        if (o.bytes !== Array) d.privKey = $util.newBuffer(d.privKey);\n      }\n    }\n\n    if (m.id != null && m.hasOwnProperty(\"id\")) {\n      d.id = o.bytes === String ? $util.base64.encode(m.id, 0, m.id.length) : o.bytes === Array ? Array.prototype.slice.call(m.id) : m.id;\n    }\n\n    if (m.pubKey != null && m.hasOwnProperty(\"pubKey\")) {\n      d.pubKey = o.bytes === String ? $util.base64.encode(m.pubKey, 0, m.pubKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.pubKey) : m.pubKey;\n    }\n\n    if (m.privKey != null && m.hasOwnProperty(\"privKey\")) {\n      d.privKey = o.bytes === String ? $util.base64.encode(m.privKey, 0, m.privKey.length) : o.bytes === Array ? Array.prototype.slice.call(m.privKey) : m.privKey;\n    }\n\n    return d;\n  };\n  /**\n   * Converts this PeerIdProto to JSON.\n   * @function toJSON\n   * @memberof PeerIdProto\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  PeerIdProto.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return PeerIdProto;\n}();\n\nmodule.exports = $root;","map":null,"metadata":{},"sourceType":"script"}