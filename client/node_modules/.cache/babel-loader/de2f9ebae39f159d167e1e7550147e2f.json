{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst dagpb = require('ipld-dag-pb');\n\nconst cbor = require('cbor');\n\nconst multicodec = require('multicodec');\n\nconst multibase = require('multibase');\n\nconst pinset = require('./pin-set');\n\nconst _require = require('../../src/utils'),\n      createStore = _require.createStore;\n\nconst _require2 = require('./utils'),\n      cidToKey = _require2.cidToKey,\n      PIN_DS_KEY = _require2.PIN_DS_KEY,\n      PinTypes = _require2.PinTypes;\n\nconst length = require('it-length');\n\nasync function pinsToDatastore(blockstore, datastore, pinstore, onProgress) {\n  if (!(await datastore.has(PIN_DS_KEY))) {\n    return;\n  }\n\n  const mh = await datastore.get(PIN_DS_KEY);\n  const cid = new CID(mh);\n  const pinRootBuf = await blockstore.get(cidToKey(cid));\n  const pinRoot = dagpb.util.deserialize(pinRootBuf);\n  let counter = 0;\n  let pinCount;\n\n  if (onProgress) {\n    pinCount = (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.recursive))) + (await length(pinset.loadSet(blockstore, pinRoot, PinTypes.direct)));\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.recursive)) {\n    counter++;\n    const pin = {\n      depth: Infinity\n    };\n\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n\n    if (cid.codec !== 'dag-pb') {\n      pin.codec = multicodec.getNumber(cid.codec);\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin));\n\n    if (onProgress) {\n      onProgress(counter / pinCount * 100, \"Migrated recursive pin \".concat(cid));\n    }\n  }\n\n  for await (const cid of pinset.loadSet(blockstore, pinRoot, PinTypes.direct)) {\n    counter++;\n    const pin = {\n      depth: 0\n    };\n\n    if (cid.version !== 0) {\n      pin.version = cid.version;\n    }\n\n    if (cid.codec !== 'dag-pb') {\n      pin.codec = multicodec.getNumber(cid.codec);\n    }\n\n    await pinstore.put(cidToKey(cid), cbor.encode(pin));\n    onProgress(counter / pinCount * 100, \"Migrated direct pin \".concat(cid));\n  }\n\n  await blockstore.delete(cidToKey(cid));\n  await datastore.delete(PIN_DS_KEY);\n}\n\nasync function pinsToDAG(blockstore, datastore, pinstore, onProgress) {\n  let recursivePins = [];\n  let directPins = [];\n  let counter = 0;\n  let pinCount;\n\n  if (onProgress) {\n    pinCount = await length(pinstore.query({\n      keysOnly: true\n    }));\n  }\n\n  for await (const _ref of pinstore.query({})) {\n    const key = _ref.key;\n    const value = _ref.value;\n    counter++;\n    const pin = cbor.decode(value);\n    const cid = new CID(pin.version || 0, pin.codec && multicodec.getName(pin.codec) || 'dag-pb', multibase.decode('b' + key.toString().split('/').pop()));\n\n    if (pin.depth === 0) {\n      if (onProgress) {\n        onProgress(counter / pinCount * 100, \"Reverted direct pin \".concat(cid));\n      }\n\n      directPins.push(cid);\n    } else {\n      if (onProgress) {\n        onProgress(counter / pinCount * 100, \"Reverted recursive pin \".concat(cid));\n      }\n\n      recursivePins.push(cid);\n    }\n  }\n\n  onProgress(100, 'Updating pin root');\n  const pinRoot = new dagpb.DAGNode(new Uint8Array(), [await pinset.storeSet(blockstore, PinTypes.recursive, recursivePins), await pinset.storeSet(blockstore, PinTypes.direct, directPins)]);\n  const buf = pinRoot.serialize();\n  const cid = await dagpb.util.cid(buf, {\n    cidVersion: 0,\n    hashAlg: multicodec.SHA2_256\n  });\n  await blockstore.put(cidToKey(cid), buf);\n  await datastore.put(PIN_DS_KEY, cid.multihash);\n}\n\nasync function process(repoPath, repoOptions, onProgress, fn) {\n  const blockstore = createStore(repoPath, 'blocks', repoOptions);\n  const datastore = createStore(repoPath, 'datastore', repoOptions);\n  const pinstore = createStore(repoPath, 'pins', repoOptions);\n  await blockstore.open();\n  await datastore.open();\n  await pinstore.open();\n\n  try {\n    await fn(blockstore, datastore, pinstore, onProgress);\n  } finally {\n    await pinstore.close();\n    await datastore.close();\n    await blockstore.close();\n  }\n}\n\nmodule.exports = {\n  version: 9,\n  description: 'Migrates pins to datastore',\n  migrate: (repoPath, repoOptions, onProgress = () => {}) => {\n    return process(repoPath, repoOptions, onProgress, pinsToDatastore);\n  },\n  revert: (repoPath, repoOptions, onProgress = () => {}) => {\n    return process(repoPath, repoOptions, onProgress, pinsToDAG);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}