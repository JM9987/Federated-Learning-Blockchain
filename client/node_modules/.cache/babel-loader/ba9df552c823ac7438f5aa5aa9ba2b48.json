{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:circuit:stream-handler'), {\n  error: debug('libp2p:circuit:stream-handler:err')\n});\n\nconst lp = require('it-length-prefixed');\n\nconst handshake = require('it-handshake');\n\nconst _require = require('../protocol'),\n      CircuitPB = _require.CircuitRelay;\n/**\n * @typedef {import('libp2p-interfaces/src/stream-muxer/types').MuxedStream} MuxedStream\n */\n\n/**\n * @template T\n */\n\n\nclass StreamHandler {\n  /**\n   * Create a stream handler for connection\n   *\n   * @class\n   * @param {object} options\n   * @param {MuxedStream} options.stream - A duplex iterable\n   * @param {number} [options.maxLength = 4096] - max bytes length of message\n   */\n  constructor({\n    stream,\n    maxLength = 4096\n  }) {\n    this.stream = stream;\n    this.shake = handshake(this.stream);\n    this.decoder = lp.decode.fromReader(this.shake.reader, {\n      maxDataLength: maxLength\n    });\n  }\n  /**\n   * Read and decode message\n   *\n   * @async\n   * @returns {Promise<T|undefined>}\n   */\n\n\n  async read() {\n    const msg = await this.decoder.next();\n\n    if (msg.value) {\n      const value = CircuitPB.decode(msg.value.slice());\n      log('read message type', value.type);\n      return value;\n    }\n\n    log('read received no value, closing stream'); // End the stream, we didn't get data\n\n    this.close();\n  }\n  /**\n   * Encode and write array of buffers\n   *\n   * @param {CircuitPB} msg - An unencoded CircuitRelay protobuf message\n   * @returns {void}\n   */\n\n\n  write(msg) {\n    log('write message type %s', msg.type); // @ts-ignore lp.encode expects type type 'Buffer | BufferList', not 'Uint8Array'\n\n    this.shake.write(lp.encode.single(CircuitPB.encode(msg)));\n  }\n  /**\n   * Return the handshake rest stream and invalidate handler\n   *\n   * @returns {*} A duplex iterable\n   */\n\n\n  rest() {\n    this.shake.rest();\n    return this.shake.stream;\n  }\n\n  end(msg) {\n    this.write(msg);\n    this.close();\n  }\n  /**\n   * Close the stream\n   *\n   * @returns {void}\n   */\n\n\n  close() {\n    log('closing the stream');\n    this.rest().sink([]);\n  }\n\n}\n\nmodule.exports = StreamHandler;","map":null,"metadata":{},"sourceType":"script"}