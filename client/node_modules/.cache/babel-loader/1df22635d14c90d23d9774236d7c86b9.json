{"ast":null,"code":"'use strict';\n\nconst createPublishAPI = require('./publish');\n\nconst createResolveAPI = require('./resolve');\n\nconst PubSubAPI = require('./pubsub');\n\nclass NameAPI {\n  /**\n   * @param {Object} config\n   * @param {IPNS} config.ipns\n   * @param {PeerId} config.peerId\n   * @param {Options} config.options\n   * @param {DagReader} config.dagReader\n   * @param {IsOnline} config.isOnline\n   * @param {Keychain} config.keychain\n   * @param {DNS} config.dns\n   */\n  constructor({\n    dns,\n    ipns,\n    dagReader,\n    peerId,\n    isOnline,\n    keychain,\n    options\n  }) {\n    this.publish = createPublishAPI({\n      ipns,\n      dagReader,\n      peerId,\n      isOnline,\n      keychain\n    });\n    this.resolve = createResolveAPI({\n      dns,\n      ipns,\n      peerId,\n      isOnline,\n      options\n    });\n    this.pubsub = new PubSubAPI({\n      ipns,\n      options: options.EXPERIMENTAL\n    });\n  }\n\n}\n\nmodule.exports = NameAPI;\n/**\n * @typedef {ResolveOptions & ExperimentalOptions} Options\n *\n * @typedef {Object} ExperimentalOptions\n * @property {PubSubOptions} [EXPERIMENTAL]\n *\n * @typedef {import('./pubsub').Options} PubSubOptions\n * @typedef {import('./resolve').ResolveOptions} ResolveOptions\n *\n * @typedef {import('..').IPNS} IPNS\n * @typedef {import('..').PeerId} PeerId\n * @typedef {import('..').DagReader} DagReader\n * @typedef {import('..').Keychain} Keychain\n * @typedef {import('..').IsOnline} IsOnline\n * @typedef {import('..').DNS} DNS\n * @typedef {import('..').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}