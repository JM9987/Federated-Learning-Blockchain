{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.logCipherState = exports.logRemoteEphemeralKey = exports.logRemoteStaticKey = exports.logLocalEphemeralKeys = exports.logLocalStaticKeys = exports.logger = void 0;\n\nconst debug_1 = __importDefault(require(\"debug\"));\n\nconst constants_1 = require(\"./constants\");\n\nexports.logger = debug_1.default('libp2p:noise');\nlet keyLogger;\n\nif (constants_1.DUMP_SESSION_KEYS) {\n  keyLogger = exports.logger;\n} else {\n  keyLogger = () => {};\n}\n\nfunction logLocalStaticKeys(s) {\n  keyLogger(\"LOCAL_STATIC_PUBLIC_KEY \".concat(s.publicKey.toString('hex')));\n  keyLogger(\"LOCAL_STATIC_PRIVATE_KEY \".concat(s.privateKey.toString('hex')));\n}\n\nexports.logLocalStaticKeys = logLocalStaticKeys;\n\nfunction logLocalEphemeralKeys(e) {\n  if (e) {\n    keyLogger(\"LOCAL_PUBLIC_EPHEMERAL_KEY \".concat(e.publicKey.toString('hex')));\n    keyLogger(\"LOCAL_PRIVATE_EPHEMERAL_KEY \".concat(e.privateKey.toString('hex')));\n  } else {\n    keyLogger('Missing local ephemeral keys.');\n  }\n}\n\nexports.logLocalEphemeralKeys = logLocalEphemeralKeys;\n\nfunction logRemoteStaticKey(rs) {\n  keyLogger(\"REMOTE_STATIC_PUBLIC_KEY \".concat(rs.toString('hex')));\n}\n\nexports.logRemoteStaticKey = logRemoteStaticKey;\n\nfunction logRemoteEphemeralKey(re) {\n  keyLogger(\"REMOTE_EPHEMERAL_PUBLIC_KEY \".concat(re.toString('hex')));\n}\n\nexports.logRemoteEphemeralKey = logRemoteEphemeralKey;\n\nfunction logCipherState(session) {\n  if (session.cs1 && session.cs2) {\n    keyLogger(\"CIPHER_STATE_1 \".concat(session.cs1.n, \" \").concat(session.cs1.k.toString('hex')));\n    keyLogger(\"CIPHER_STATE_2 \".concat(session.cs2.n, \" \").concat(session.cs2.k.toString('hex')));\n  } else {\n    keyLogger('Missing cipher state.');\n  }\n}\n\nexports.logCipherState = logCipherState;","map":null,"metadata":{},"sourceType":"script"}