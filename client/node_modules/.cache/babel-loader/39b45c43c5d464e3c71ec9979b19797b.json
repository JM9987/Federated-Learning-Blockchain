{"ast":null,"code":"'use strict';\n\nconst exporter = require('ipfs-unixfs-exporter');\n\nconst mergeOptions = require('merge-options').bind({\n  ignoreUndefined: true\n});\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst errCode = require('err-code');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst defaultOptions = {\n  offset: 0,\n  length: Infinity,\n  signal: undefined\n};\n/**\n * @param {any} context\n */\n\nmodule.exports = context => {\n  /**\n   * Read a file\n   *\n   * @param {string | CID} path - An MFS path, IPFS Path or CID to read\n   * @param {ReadOptions & AbortOptions} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   * @example\n   * ```js\n   * const chunks = []\n   *\n   * for await (const chunk of ipfs.files.read('/hello-world')) {\n   *   chunks.push(chunk)\n   * }\n   *\n   * console.log(uint8ArrayConcat(chunks).toString())\n   * // Hello, World!\n   * ```\n   */\n  function mfsRead(path, options = {}) {\n    options = mergeOptions(defaultOptions, options);\n    return {\n      [Symbol.asyncIterator]: async function* read() {\n        const mfsPath = await toMfsPath(context, path, options);\n        const result = await exporter(mfsPath.mfsPath, context.ipld);\n\n        if (result.unixfs.type !== 'file') {\n          throw errCode(new Error(\"\".concat(path, \" was not a file\")), 'ERR_NOT_FILE');\n        }\n\n        if (!result.content) {\n          throw errCode(new Error(\"Could not load content stream from \".concat(path)), 'ERR_NO_CONTENT');\n        }\n\n        for await (const buf of result.content({\n          offset: options.offset,\n          length: options.length\n        })) {\n          yield buf;\n        }\n      }\n    };\n  }\n\n  return withTimeoutOption(mfsRead);\n};\n/**\n * @typedef {Object} ReadOptions\n * @property {number} [offset] - An offset to start reading the file from\n * @property {number} [length] - An optional max length to read from the file\n *\n * @typedef {import('cids')} CID\n * @typedef {import('../../utils').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}