{"ast":null,"code":"'use strict';\n\nconst pkgversion = require('../../package.json').version;\n\nconst multiaddr = require('multiaddr');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst uint8ArrayToString = require('uint8arrays/to-string');\n/**\n * @param {Object} config\n * @param {import('.').PeerId} config.peerId\n * @param {import('.').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  peerId,\n  network\n}) => {\n  /**\n   * Returns the identity of the Peer\n   *\n   * @param {import('../utils').AbortOptions} [_options]\n   * @returns {Promise<ID>}\n   * @example\n   * ```js\n   * const identity = await ipfs.id()\n   * console.log(identity)\n   * ```\n   */\n  async function id(_options) {\n    // eslint-disable-line require-await\n    const id = peerId.toB58String();\n    let addresses = [];\n    let protocols = [];\n    const net = network.try();\n\n    if (net) {\n      const libp2p = net.libp2p; // only available while the node is running\n\n      addresses = libp2p.multiaddrs;\n      protocols = Array.from(libp2p.upgrader.protocols.keys());\n    }\n\n    return {\n      id,\n      publicKey: uint8ArrayToString(peerId.pubKey.bytes, 'base64pad'),\n      addresses: addresses.map(ma => {\n        const str = ma.toString(); // some relay-style transports add our peer id to the ma for us\n        // so don't double-add\n\n        if (str.endsWith(\"/p2p/\".concat(id))) {\n          return str;\n        }\n\n        return \"\".concat(str, \"/p2p/\").concat(id);\n      }).sort().map(ma => multiaddr(ma)),\n      agentVersion: \"js-ipfs/\".concat(pkgversion),\n      protocolVersion: '9000',\n      protocols: protocols.sort()\n    };\n  }\n\n  return withTimeoutOption(id);\n};\n/**\n * @typedef {object} ID\n * The Peer identity\n * @property {string} id - the Peer ID\n * @property {string} publicKey - the public key of the peer as a base64 encoded string\n * @property {import('multiaddr')[]} addresses - A list of multiaddrs this node is listening on\n * @property {string} agentVersion - The agent version\n * @property {string} protocolVersion - The supported protocol version\n * @property {string[]} protocols - The supported protocols\n */","map":null,"metadata":{},"sourceType":"script"}