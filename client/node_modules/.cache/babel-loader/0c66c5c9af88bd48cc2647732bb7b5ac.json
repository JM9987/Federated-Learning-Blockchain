{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst first = require('it-first');\n\nconst last = require('it-last');\n\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n/**\n * @param {Object} config\n * @param {import('..').IPLD} config.ipld\n * @param {import('..').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  /**\n   * Retrieve an IPLD format node\n   *\n   * @example\n   * ```js\n   * // example obj\n   * const obj = {\n   *   a: 1,\n   *   b: [1, 2, 3],\n   *   c: {\n   *     ca: [5, 6, 7],\n   *     cb: 'foo'\n   *   }\n   * }\n   *\n   * const cid = await ipfs.dag.put(obj, { format: 'dag-cbor', hashAlg: 'sha2-256' })\n   * console.log(cid.toString())\n   * // zdpuAmtur968yprkhG9N5Zxn6MFVoqAWBbhUAkNLJs2UtkTq5\n   *\n   * async function getAndLog(cid, path) {\n   *   const result = await ipfs.dag.get(cid, { path })\n   *   console.log(result.value)\n   * }\n   *\n   * await getAndLog(cid, '/a')\n   * // Logs:\n   * // 1\n   *\n   * await getAndLog(cid, '/b')\n   * // Logs:\n   * // [1, 2, 3]\n   *\n   * await getAndLog(cid, '/c')\n   * // Logs:\n   * // {\n   * //   ca: [5, 6, 7],\n   * //   cb: 'foo'\n   * // }\n   *\n   * await getAndLog(cid, '/c/ca/1')\n   * // Logs:\n   * // 6\n   * ```\n   *\n   * @param {CID|string} ipfsPath - A DAG node that follows one of the supported IPLD formats\n   * @param {GetOptions & AbortOptions} [options] - An optional configration\n   * @returns {Promise<DagEntry>}\n   */\n  const get = async function get(ipfsPath, options = {}) {\n    const _toCidAndPath = toCidAndPath(ipfsPath),\n          cid = _toCidAndPath.cid,\n          path = _toCidAndPath.path;\n\n    if (path) {\n      options.path = path;\n    }\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    if (options.path) {\n      const entry = options.localResolve ? await first(ipld.resolve(cid, options.path)) : await last(ipld.resolve(cid, options.path));\n      /** @type {DagEntry} - first and last will return undefined when empty */\n\n      const result = entry;\n      return result;\n    }\n\n    return {\n      value: await ipld.get(cid, options),\n      remainderPath: ''\n    };\n  };\n\n  return withTimeoutOption(get);\n};\n/**\n * @typedef {Object} GetOptions\n * @property {boolean} [localResolve=false]\n * @property {number} [timeout]\n * @property {boolean} [preload=false]\n * @property {string} [path] - An optional path within the DAG to resolve\n *\n * @typedef {Object} DagEntry\n * @property {Object} value\n * @property {string} remainderPath\n *\n * @typedef {import('.').CID} CID\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}