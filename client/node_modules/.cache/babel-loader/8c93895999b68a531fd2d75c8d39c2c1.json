{"ast":null,"code":"'use strict';\n\nconst dagPB = require('ipld-dag-pb');\n\nconst DAGNode = dagPB.DAGNode;\n\nconst multicodec = require('multicodec');\n\nconst Unixfs = require('ipfs-unixfs');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').IPLD} config.ipld\n * @param {import('.').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  /**\n   *\n   * @param {NewOptions & AbortOptions} options\n   * @returns {Promise<CID>}\n   */\n  async function _new(options = {}) {\n    let data;\n\n    if (options.template) {\n      if (options.template === 'unixfs-dir') {\n        data = new Unixfs('directory').marshal();\n      } else {\n        throw new Error('unknown template');\n      }\n    } else {\n      data = new Uint8Array(0);\n    }\n\n    const node = new DAGNode(data);\n    const cid = await ipld.put(node, multicodec.DAG_PB, {\n      cidVersion: 0,\n      hashAlg: multicodec.SHA2_256,\n      signal: options.signal\n    });\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    return cid;\n  }\n\n  return withTimeoutOption(_new);\n};\n/**\n * @typedef {Object} NewOptions\n * @property {string} [template]\n * @property {boolean} [recursive]\n * @property {boolean} [nocache]\n * @property {boolean} [preload]\n * @property {string} [enc]\n *\n * @typedef {import('.').CID} CID\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}