{"ast":null,"code":"'use strict'; // dns-nodejs gets replaced by dns-browser when webpacked/browserified\n\nconst dns = require('../runtime/dns-nodejs');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {string} domain\n * @returns {string}\n */\n\n\nfunction fqdnFixups(domain) {\n  // Allow resolution of .eth names via .eth.link\n  // More context at the go-ipfs counterpart: https://github.com/ipfs/go-ipfs/pull/6448\n  if (domain.endsWith('.eth')) {\n    domain = domain.replace(/.eth$/, '.eth.link');\n  }\n\n  return domain;\n}\n\nmodule.exports = () => {\n  /**\n   * Resolve DNS links\n   *\n   * @param {string} domain\n   * @param {DNSOptions} [options]\n   * @returns {Promise<string>}\n   */\n  const resolveDNS = async (domain, options = {}) => {\n    // eslint-disable-line require-await\n    if (typeof domain !== 'string') {\n      throw new Error('Invalid arguments, domain must be a string');\n    }\n\n    domain = fqdnFixups(domain);\n    return dns(domain, options);\n  };\n\n  return withTimeoutOption(resolveDNS);\n};\n/**\n * @typedef {DNSSettings & AbortOptions} DNSOptions\n *\n * @typedef {Object} DNSSettings\n * @property {boolean} [recursive=true] - Resolve until result is not a domain name\n *\n * @typedef {import('../utils').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}