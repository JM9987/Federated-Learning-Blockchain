{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:peer-store:proto-book'), {\n  error: debug('libp2p:peer-store:proto-book:err')\n});\n\nconst errcode = require('err-code');\n\nconst uint8ArrayEquals = require('uint8arrays/equals');\n\nconst PeerId = require('peer-id');\n\nconst Book = require('./book');\n\nconst _require = require('../errors'),\n      ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n/**\n * @typedef {import('./')} PeerStore\n */\n\n/**\n * @extends {Book}\n *\n * @fires MetadataBook#change:metadata\n */\n\n\nclass MetadataBook extends Book {\n  /**\n   * The MetadataBook is responsible for keeping the known supported\n   * protocols of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor(peerStore) {\n    /**\n     * PeerStore Event emitter, used by the MetadataBook to emit:\n     * \"change:metadata\" - emitted when the known metadata of a peer change.\n     */\n    super({\n      peerStore,\n      eventName: 'change:metadata',\n      eventProperty: 'metadata'\n    });\n    /**\n     * Map known peers to their known protocols.\n     *\n     * @type {Map<string, Map<string, Uint8Array>>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set metadata key and value of a provided peer.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {string} key - metadata key\n   * @param {Uint8Array} value - metadata value\n   * @returns {MetadataBook}\n   */\n  // @ts-ignore override with more then the parameters expected in Book\n\n\n  set(peerId, key, value) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (typeof key !== 'string' || !(value instanceof Uint8Array)) {\n      log.error('valid key and value must be provided to store data');\n      throw errcode(new Error('valid key and value must be provided'), ERR_INVALID_PARAMETERS);\n    }\n\n    this._setValue(peerId, key, value);\n\n    return this;\n  }\n  /**\n   * Set data into the datastructure\n   *\n   * @override\n   */\n\n\n  _setValue(peerId, key, value, {\n    emit = true\n  } = {}) {\n    const id = peerId.toB58String();\n    const rec = this.data.get(id) || new Map();\n    const recMap = rec.get(key); // Already exists and is equal\n\n    if (recMap && uint8ArrayEquals(value, recMap)) {\n      log(\"the metadata provided to store is equal to the already stored for \".concat(id, \" on \").concat(key));\n      return;\n    }\n\n    rec.set(key, value);\n    this.data.set(id, rec);\n    emit && this._emit(peerId, key);\n  }\n  /**\n   * Get the known data of a provided peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Map<string, Uint8Array>|undefined}\n   */\n\n\n  get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    return this.data.get(peerId.toB58String());\n  }\n  /**\n   * Get specific metadata value, if it exists\n   *\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {Uint8Array | undefined}\n   */\n\n\n  getValue(peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String());\n    return rec && rec.get(key);\n  }\n  /**\n   * Deletes the provided peer from the book.\n   *\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n\n\n  delete(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false;\n    }\n\n    this._emit(peerId);\n\n    return true;\n  }\n  /**\n   * Deletes the provided peer metadata key from the book.\n   *\n   * @param {PeerId} peerId\n   * @param {string} key\n   * @returns {boolean}\n   */\n\n\n  deleteValue(peerId, key) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String());\n\n    if (!rec || !rec.delete(key)) {\n      return false;\n    }\n\n    this._emit(peerId, key);\n\n    return true;\n  }\n\n}\n\nmodule.exports = MetadataBook;","map":null,"metadata":{},"sourceType":"script"}