{"ast":null,"code":"let duration = /(-?(?:\\d+\\.?\\d*|\\d*\\.?\\d+)(?:e[-+]?\\d+)?)\\s*([a-zµμ]*)/ig;\n/**\r\n * conversion ratios\r\n */\n\nparse.nanosecond = parse.ns = 1 / 1e6;\nparse['µs'] = parse['μs'] = parse.us = parse.microsecond = 1 / 1e3;\nparse.millisecond = parse.ms = 1;\nparse.second = parse.sec = parse.s = parse.ms * 1000;\nparse.minute = parse.min = parse.m = parse.s * 60;\nparse.hour = parse.hr = parse.h = parse.m * 60;\nparse.day = parse.d = parse.h * 24;\nparse.week = parse.wk = parse.w = parse.d * 7;\nparse.month = parse.b = parse.d * (365.25 / 12);\nparse.year = parse.yr = parse.y = parse.d * 365.25;\n/**\r\n * convert `str` to ms\r\n *\r\n * @param {String} str\r\n * @param {String} format\r\n * @return {Number}\r\n */\n\nexport default function parse(str = '', format = 'ms') {\n  var result = null; // ignore commas\n\n  str = str.replace(/(\\d),(\\d)/g, '$1$2');\n  str.replace(duration, function (_, n, units) {\n    units = parse[units] || parse[units.toLowerCase().replace(/s$/, '')];\n    if (units) result = (result || 0) + parseFloat(n, 10) * units;\n  });\n  return result && result / parse[format];\n}","map":null,"metadata":{},"sourceType":"module"}