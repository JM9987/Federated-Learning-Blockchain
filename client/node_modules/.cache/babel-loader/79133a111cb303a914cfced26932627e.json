{"ast":null,"code":"'use strict';\n\nconst _require = require('interface-datastore'),\n      Key = _require.Key;\n\nconst _require2 = require('libp2p-record'),\n      Record = _require2.Record;\n\nconst _require3 = require('./utils'),\n      encodeBase32 = _require3.encodeBase32;\n\nconst errcode = require('err-code');\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('ipfs:ipns:offline-datastore'), {\n  error: debug('ipfs:ipns:offline-datastore:error')\n}); // Offline datastore aims to mimic the same encoding as routing when storing records\n// to the local datastore\n\nclass OfflineDatastore {\n  constructor(repo) {\n    this._repo = repo;\n  }\n  /**\n   * Put a value to the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value.\n   * @param {Uint8Array} value - value to be stored.\n   * @returns {Promise<void>}\n   */\n\n\n  async put(key, value) {\n    // eslint-disable-line require-await\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');\n    }\n\n    if (!(value instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore value must be a Uint8Array'), 'ERR_INVALID_VALUE');\n    }\n\n    let routingKey;\n\n    try {\n      routingKey = this._routingKey(key);\n    } catch (err) {\n      log.error(err);\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');\n    } // Marshal to libp2p record as the DHT does\n\n\n    const record = new Record(key, value);\n    return this._repo.datastore.put(routingKey, record.serialize());\n  }\n  /**\n   * Get a value from the local datastore indexed by the received key properly encoded.\n   *\n   * @param {Uint8Array} key - identifier of the value to be obtained.\n   * @returns {Promise<Uint8Array>}\n   */\n\n\n  async get(key) {\n    if (!(key instanceof Uint8Array)) {\n      throw errcode(new Error('Offline datastore key must be a Uint8Array'), 'ERR_INVALID_KEY');\n    }\n\n    let routingKey;\n\n    try {\n      routingKey = this._routingKey(key);\n    } catch (err) {\n      log.error(err);\n      throw errcode(new Error('Not possible to generate the routing key'), 'ERR_GENERATING_ROUTING_KEY');\n    }\n\n    const res = await this._repo.datastore.get(routingKey); // Unmarshal libp2p record as the DHT does\n\n    let record;\n\n    try {\n      record = Record.deserialize(res);\n    } catch (err) {\n      log.error(err);\n      throw err;\n    }\n\n    return record.value;\n  } // encode key properly - base32(/ipns/{cid})\n\n\n  _routingKey(key) {\n    return new Key('/' + encodeBase32(key), false);\n  }\n\n}\n\nexports = module.exports = OfflineDatastore;","map":null,"metadata":{},"sourceType":"script"}