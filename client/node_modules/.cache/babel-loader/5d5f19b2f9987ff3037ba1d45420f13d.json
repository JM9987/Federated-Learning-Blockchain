{"ast":null,"code":"'use strict';\n\nconst abortable = require('abortable-iterator');\n\nconst log = require('debug')('libp2p:stream:converter');\n/**\n * Convert a duplex iterable into a MultiaddrConnection.\n * https://github.com/libp2p/interface-transport#multiaddrconnection\n *\n * @param {object} streamProperties\n * @param {DuplexStream} streamProperties.stream\n * @param {Multiaddr} streamProperties.remoteAddr\n * @param {Multiaddr} streamProperties.localAddr\n * @param {object} [options]\n * @param {AbortSignal} [options.signal]\n */\n\n\nfunction streamToMaConnection({\n  stream,\n  remoteAddr,\n  localAddr\n}, options = {}) {\n  const sink = stream.sink,\n        source = stream.source;\n  const maConn = {\n    async sink(source) {\n      if (options.signal) {\n        source = abortable(source, options.signal);\n      }\n\n      try {\n        await sink(source);\n      } catch (err) {\n        // If aborted we can safely ignore\n        if (err.type !== 'aborted') {\n          // If the source errored the socket will already have been destroyed by\n          // toIterable.duplex(). If the socket errored it will already be\n          // destroyed. There's nothing to do here except log the error & return.\n          log(err);\n        }\n      }\n\n      close();\n    },\n\n    source: options.signal ? abortable(source, options.signal) : source,\n    conn: stream,\n    localAddr,\n    remoteAddr,\n    timeline: {\n      open: Date.now()\n    },\n\n    close() {\n      sink([]);\n      close();\n    }\n\n  };\n\n  function close() {\n    if (!maConn.timeline.close) {\n      maConn.timeline.close = Date.now();\n    }\n  }\n\n  return maConn;\n}\n\nmodule.exports = streamToMaConnection;","map":null,"metadata":{},"sourceType":"script"}