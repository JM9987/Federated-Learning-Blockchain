{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n\nconst PeerId = require('peer-id');\n\nconst _require = require('../errors'),\n      ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n\nconst passthrough = data => data;\n/**\n * @typedef {import('./')} PeerStore\n */\n\n\nclass Book {\n  /**\n   * The Book is the skeleton for the PeerStore books.\n   *\n   * @class\n   * @param {Object} properties\n   * @param {PeerStore} properties.peerStore - PeerStore instance.\n   * @param {string} properties.eventName - Name of the event to emit by the PeerStore.\n   * @param {string} properties.eventProperty - Name of the property to emit by the PeerStore.\n   * @param {(data: any) => any[]} [properties.eventTransformer] - Transformer function of the provided data for being emitted.\n   */\n  constructor({\n    peerStore,\n    eventName,\n    eventProperty,\n    eventTransformer = passthrough\n  }) {\n    this._ps = peerStore;\n    this.eventName = eventName;\n    this.eventProperty = eventProperty;\n    this.eventTransformer = eventTransformer;\n    /**\n     * Map known peers to their data.\n     *\n     * @type {Map<string, any[]|any>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set known data of a provided peer.\n   *\n   * @param {PeerId} peerId\n   * @param {any[]|any} data\n   */\n\n\n  set(peerId, data) {\n    throw errcode(new Error('set must be implemented by the subclass'), 'ERR_NOT_IMPLEMENTED');\n  }\n  /**\n   * Set data into the datastructure, persistence and emit it using the provided transformers.\n   *\n   * @protected\n   * @param {PeerId} peerId - peerId of the data to store\n   * @param {any} data - data to store.\n   * @param {Object} [options] - storing options.\n   * @param {boolean} [options.emit = true] - emit the provided data.\n   * @returns {void}\n   */\n\n\n  _setData(peerId, data, {\n    emit = true\n  } = {}) {\n    const b58key = peerId.toB58String(); // Store data in memory\n\n    this.data.set(b58key, data); // Emit event\n\n    emit && this._emit(peerId, data);\n  }\n  /**\n   * Emit data.\n   *\n   * @protected\n   * @param {PeerId} peerId\n   * @param {any} [data]\n   */\n\n\n  _emit(peerId, data) {\n    this._ps.emit(this.eventName, {\n      peerId,\n      [this.eventProperty]: this.eventTransformer(data)\n    });\n  }\n  /**\n   * Get the known data of a provided peer.\n   * Returns `undefined` if there is no available data for the given peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {any[]|any|undefined}\n   */\n\n\n  get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String()); // @ts-ignore\n\n    return rec ? [...rec] : undefined;\n  }\n  /**\n   * Deletes the provided peer from the book.\n   *\n   * @param {PeerId} peerId\n   * @returns {boolean}\n   */\n\n\n  delete(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    if (!this.data.delete(peerId.toB58String())) {\n      return false;\n    }\n\n    this._emit(peerId, []);\n\n    return true;\n  }\n\n}\n\nmodule.exports = Book;","map":null,"metadata":{},"sourceType":"script"}