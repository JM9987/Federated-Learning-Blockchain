{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:peer-store:key-book'), {\n  error: debug('libp2p:peer-store:key-book:err')\n});\n\nconst errcode = require('err-code');\n\nconst PeerId = require('peer-id');\n\nconst Book = require('./book');\n\nconst _require = require('../errors'),\n      ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n/**\n * @typedef {import('./')} PeerStore\n * @typedef {import('libp2p-crypto').PublicKey} PublicKey\n */\n\n/**\n * @extends {Book}\n */\n\n\nclass KeyBook extends Book {\n  /**\n   * The KeyBook is responsible for keeping the known public keys of a peer.\n   *\n   * @class\n   * @param {PeerStore} peerStore\n   */\n  constructor(peerStore) {\n    super({\n      peerStore,\n      eventName: 'change:pubkey',\n      eventProperty: 'pubkey',\n      eventTransformer: data => data.pubKey\n    });\n    /**\n     * Map known peers to their known Public Key.\n     *\n     * @type {Map<string, PeerId>}\n     */\n\n    this.data = new Map();\n  }\n  /**\n   * Set the Peer public key.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @param {PublicKey} publicKey\n   * @returns {KeyBook}\n   */\n\n\n  set(peerId, publicKey) {\n    if (!PeerId.isPeerId(peerId)) {\n      log.error('peerId must be an instance of peer-id to store data');\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const recPeerId = this.data.get(id); // If no record available, and this is valid\n\n    if (!recPeerId && publicKey) {\n      // This might be unecessary, but we want to store the PeerId\n      // to avoid an async operation when reconstructing the PeerId\n      peerId.pubKey = publicKey;\n\n      this._setData(peerId, peerId);\n\n      log(\"stored provided public key for \".concat(id));\n    }\n\n    return this;\n  }\n  /**\n   * Get Public key of the given PeerId, if stored.\n   *\n   * @override\n   * @param {PeerId} peerId\n   * @returns {PublicKey | undefined}\n   */\n\n\n  get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const rec = this.data.get(peerId.toB58String());\n    return rec ? rec.pubKey : undefined;\n  }\n\n}\n\nmodule.exports = KeyBook;","map":null,"metadata":{},"sourceType":"script"}