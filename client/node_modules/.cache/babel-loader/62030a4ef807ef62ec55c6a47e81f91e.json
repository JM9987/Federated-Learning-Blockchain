{"ast":null,"code":"'use strict';\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:connection-manager'), {\n  error: debug('libp2p:connection-manager:err')\n});\n\nconst errcode = require('err-code');\n\nconst mergeOptions = require('merge-options');\n\nconst LatencyMonitor = require('./latency-monitor');\n\nconst retimer = require('retimer');\n/** @typedef {import('../types').EventEmitterFactory} Events */\n\n/** @type Events */\n\n\nconst EventEmitter = require('events');\n\nconst PeerId = require('peer-id');\n\nconst _require = require('../errors'),\n      ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n\nconst defaultOptions = {\n  maxConnections: Infinity,\n  minConnections: 0,\n  maxData: Infinity,\n  maxSentData: Infinity,\n  maxReceivedData: Infinity,\n  maxEventLoopDelay: Infinity,\n  pollInterval: 2000,\n  autoDialInterval: 10000,\n  movingAverageInterval: 60000,\n  defaultPeerValue: 1\n};\n/**\n * @typedef {import('../')} Libp2p\n * @typedef {import('libp2p-interfaces/src/connection').Connection} Connection\n */\n\n/**\n * @typedef {Object} ConnectionManagerOptions\n * @property {number} [maxConnections = Infinity] - The maximum number of connections allowed.\n * @property {number} [minConnections = 0] - The minimum number of connections to avoid pruning.\n * @property {number} [maxData = Infinity] - The max data (in and out), per average interval to allow.\n * @property {number} [maxSentData = Infinity] - The max outgoing data, per average interval to allow.\n * @property {number} [maxReceivedData = Infinity] - The max incoming data, per average interval to allow.\n * @property {number} [maxEventLoopDelay = Infinity] - The upper limit the event loop can take to run.\n * @property {number} [pollInterval = 2000] - How often, in milliseconds, metrics and latency should be checked.\n * @property {number} [movingAverageInterval = 60000] - How often, in milliseconds, to compute averages.\n * @property {number} [defaultPeerValue = 1] - The value of the peer.\n * @property {boolean} [autoDial = true] - Should preemptively guarantee connections are above the low watermark.\n * @property {number} [autoDialInterval = 10000] - How often, in milliseconds, it should preemptively guarantee connections are above the low watermark.\n */\n\n/**\n *\n * @fires ConnectionManager#peer:connect Emitted when a new peer is connected.\n * @fires ConnectionManager#peer:disconnect Emitted when a peer is disconnected.\n */\n\nclass ConnectionManager extends EventEmitter {\n  /**\n   * Responsible for managing known connections.\n   *\n   * @class\n   * @param {Libp2p} libp2p\n   * @param {ConnectionManagerOptions} options\n   */\n  constructor(libp2p, options = {}) {\n    super();\n    this._libp2p = libp2p;\n    this._peerId = libp2p.peerId.toB58String();\n    this._options = mergeOptions.call({\n      ignoreUndefined: true\n    }, defaultOptions, options);\n\n    if (this._options.maxConnections < this._options.minConnections) {\n      throw errcode(new Error('Connection Manager maxConnections must be greater than minConnections'), ERR_INVALID_PARAMETERS);\n    }\n\n    log('options: %j', this._options);\n    /**\n     * Map of peer identifiers to their peer value for pruning connections.\n     *\n     * @type {Map<string, number>}\n     */\n\n    this._peerValues = new Map();\n    /**\n     * Map of connections per peer\n     *\n     * @type {Map<string, Connection[]>}\n     */\n\n    this.connections = new Map();\n    this._started = false;\n    this._timer = null;\n    this._autoDialTimeout = null;\n    this._checkMetrics = this._checkMetrics.bind(this);\n    this._autoDial = this._autoDial.bind(this);\n  }\n  /**\n   * Get current number of open connections.\n   */\n\n\n  get size() {\n    return Array.from(this.connections.values()).reduce((accumulator, value) => accumulator + value.length, 0);\n  }\n  /**\n   * Starts the Connection Manager. If Metrics are not enabled on libp2p\n   * only event loop and connection limits will be monitored.\n   */\n\n\n  start() {\n    if (this._libp2p.metrics) {\n      this._timer = this._timer || retimer(this._checkMetrics, this._options.pollInterval);\n    } // latency monitor\n\n\n    this._latencyMonitor = new LatencyMonitor({\n      latencyCheckIntervalMs: this._options.pollInterval,\n      dataEmitIntervalMs: this._options.pollInterval\n    });\n    this._onLatencyMeasure = this._onLatencyMeasure.bind(this);\n\n    this._latencyMonitor.on('data', this._onLatencyMeasure);\n\n    this._started = true;\n    log('started');\n    this._options.autoDial && this._autoDial();\n  }\n  /**\n   * Stops the Connection Manager\n   *\n   * @async\n   */\n\n\n  async stop() {\n    this._autoDialTimeout && this._autoDialTimeout.clear();\n    this._timer && this._timer.clear();\n    this._latencyMonitor && this._latencyMonitor.removeListener('data', this._onLatencyMeasure);\n    this._started = false;\n    await this._close();\n    log('stopped');\n  }\n  /**\n   * Cleans up the connections\n   *\n   * @async\n   */\n\n\n  async _close() {\n    // Close all connections we're tracking\n    const tasks = [];\n\n    for (const connectionList of this.connections.values()) {\n      for (const connection of connectionList) {\n        tasks.push(connection.close());\n      }\n    }\n\n    await Promise.all(tasks);\n    this.connections.clear();\n  }\n  /**\n   * Sets the value of the given peer. Peers with lower values\n   * will be disconnected first.\n   *\n   * @param {PeerId} peerId\n   * @param {number} value - A number between 0 and 1\n   * @returns {void}\n   */\n\n\n  setPeerValue(peerId, value) {\n    if (value < 0 || value > 1) {\n      throw new Error('value should be a number between 0 and 1');\n    }\n\n    this._peerValues.set(peerId.toB58String(), value);\n  }\n  /**\n   * Checks the libp2p metrics to determine if any values have exceeded\n   * the configured maximums.\n   *\n   * @private\n   */\n\n\n  _checkMetrics() {\n    if (this._libp2p.metrics) {\n      const movingAverages = this._libp2p.metrics.global.movingAverages;\n\n      const received = movingAverages.dataReceived[this._options.movingAverageInterval].movingAverage();\n\n      this._checkMaxLimit('maxReceivedData', received);\n\n      const sent = movingAverages.dataSent[this._options.movingAverageInterval].movingAverage();\n\n      this._checkMaxLimit('maxSentData', sent);\n\n      const total = received + sent;\n\n      this._checkMaxLimit('maxData', total);\n\n      log('metrics update', total);\n      this._timer = retimer(this._checkMetrics, this._options.pollInterval);\n    }\n  }\n  /**\n   * Tracks the incoming connection and check the connection limit\n   *\n   * @param {Connection} connection\n   * @returns {void}\n   */\n\n\n  onConnect(connection) {\n    const peerId = connection.remotePeer;\n    const peerIdStr = peerId.toB58String();\n    const storedConn = this.connections.get(peerIdStr);\n    this.emit('peer:connect', connection);\n\n    if (storedConn) {\n      storedConn.push(connection);\n    } else {\n      this.connections.set(peerIdStr, [connection]);\n    }\n\n    this._libp2p.peerStore.keyBook.set(peerId, peerId.pubKey);\n\n    if (!this._peerValues.has(peerIdStr)) {\n      this._peerValues.set(peerIdStr, this._options.defaultPeerValue);\n    }\n\n    this._checkMaxLimit('maxConnections', this.size);\n  }\n  /**\n   * Removes the connection from tracking\n   *\n   * @param {Connection} connection\n   * @returns {void}\n   */\n\n\n  onDisconnect(connection) {\n    const peerId = connection.remotePeer.toB58String();\n    let storedConn = this.connections.get(peerId);\n\n    if (storedConn && storedConn.length > 1) {\n      storedConn = storedConn.filter(conn => conn.id !== connection.id);\n      this.connections.set(peerId, storedConn);\n    } else if (storedConn) {\n      this.connections.delete(peerId);\n\n      this._peerValues.delete(connection.remotePeer.toB58String());\n\n      this.emit('peer:disconnect', connection);\n    }\n  }\n  /**\n   * Get a connection with a peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Connection|null}\n   */\n\n\n  get(peerId) {\n    const connections = this.getAll(peerId);\n\n    if (connections.length) {\n      return connections[0];\n    }\n\n    return null;\n  }\n  /**\n   * Get all open connections with a peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Connection[]}\n   */\n\n\n  getAll(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = peerId.toB58String();\n    const connections = this.connections.get(id); // Return all open connections\n\n    if (connections) {\n      return connections.filter(connection => connection.stat.status === 'open');\n    }\n\n    return [];\n  }\n  /**\n   * If the event loop is slow, maybe close a connection\n   *\n   * @private\n   * @param {*} summary - The LatencyMonitor summary\n   */\n\n\n  _onLatencyMeasure(summary) {\n    this._checkMaxLimit('maxEventLoopDelay', summary.avgMs);\n  }\n  /**\n   * If the `value` of `name` has exceeded its limit, maybe close a connection\n   *\n   * @private\n   * @param {string} name - The name of the field to check limits for\n   * @param {number} value - The current value of the field\n   */\n\n\n  _checkMaxLimit(name, value) {\n    const limit = this._options[name];\n    log('checking limit of %s. current value: %d of %d', name, value, limit);\n\n    if (value > limit) {\n      log('%s: limit exceeded: %s, %d', this._peerId, name, value);\n\n      this._maybeDisconnectOne();\n    }\n  }\n  /**\n   * Proactively tries to connect to known peers stored in the PeerStore.\n   * It will keep the number of connections below the upper limit and sort\n   * the peers to connect based on wether we know their keys and protocols.\n   *\n   * @async\n   * @private\n   */\n\n\n  async _autoDial() {\n    const minConnections = this._options.minConnections; // Already has enough connections\n\n    if (this.size >= minConnections) {\n      this._autoDialTimeout = retimer(this._autoDial, this._options.autoDialInterval);\n      return;\n    } // Sort peers on wether we know protocols of public keys for them\n\n\n    const peers = Array.from(this._libp2p.peerStore.peers.values()).sort((a, b) => {\n      if (b.protocols && b.protocols.length && (!a.protocols || !a.protocols.length)) {\n        return 1;\n      } else if (b.id.pubKey && !a.id.pubKey) {\n        return 1;\n      }\n\n      return -1;\n    });\n\n    for (let i = 0; i < peers.length && this.size < minConnections; i++) {\n      if (!this.get(peers[i].id)) {\n        log('connecting to a peerStore stored peer %s', peers[i].id.toB58String());\n\n        try {\n          await this._libp2p.dialer.connectToPeer(peers[i].id); // Connection Manager was stopped\n\n          if (!this._started) {\n            return;\n          }\n        } catch (err) {\n          log.error('could not connect to peerStore stored peer', err);\n        }\n      }\n    }\n\n    this._autoDialTimeout = retimer(this._autoDial, this._options.autoDialInterval);\n  }\n  /**\n   * If we have more connections than our maximum, close a connection\n   * to the lowest valued peer.\n   *\n   * @private\n   */\n\n\n  _maybeDisconnectOne() {\n    if (this._options.minConnections < this.connections.size) {\n      const peerValues = Array.from(this._peerValues).sort(byPeerValue);\n      log('%s: sorted peer values: %j', this._peerId, peerValues);\n      const disconnectPeer = peerValues[0];\n\n      if (disconnectPeer) {\n        const peerId = disconnectPeer[0];\n        log('%s: lowest value peer is %s', this._peerId, peerId);\n        log('%s: closing a connection to %j', this._peerId, peerId);\n\n        for (const connections of this.connections.values()) {\n          if (connections[0].remotePeer.toB58String() === peerId) {\n            connections[0].close();\n            break;\n          }\n        }\n      }\n    }\n  }\n\n}\n\nmodule.exports = ConnectionManager;\n\nfunction byPeerValue(peerValueEntryA, peerValueEntryB) {\n  return peerValueEntryA[1] - peerValueEntryB[1];\n}","map":null,"metadata":{},"sourceType":"script"}