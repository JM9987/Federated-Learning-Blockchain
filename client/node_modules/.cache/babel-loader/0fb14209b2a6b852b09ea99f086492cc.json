{"ast":null,"code":"var _jsxFileName = \"/home/ubuntu/TFG_FL/client/src/CheckInforme.js\";\nimport React, { Component } from \"react\";\nimport FilesStorageContract from \"./contracts/FilesStorage.json\";\nimport commit from './resultados.json';\nimport getWeb3 from \"./getWeb3\";\nimport asmCrypto from \"asmcrypto-lite\";\nimport IPFS from \"ipfs-core\";\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\nimport ContractFunctions from \"./ContractFunctions\";\nimport RegistrarInforme from \"./RegistrarInforme\";\nimport RegistrarEntidad from \"./RegistrarEntidad\";\nimport SearchInformes from \"./SearchInformes\";\nimport AdminPanel from \"./AdminPanel\";\nimport SideNav, { Toggle, Nav, NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\nimport './sidenav.css';\nimport registerIcon from './icons/register.png';\nimport checkIcon from './icons/train.png';\nimport listIcon from './icons/list.png';\nvar data;\nvar nom;\n\nclass CheckInforme extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      web3: null\n    };\n\n    this.componentDidMount = async () => {\n      try {\n        // Get network provider and web3 instance.\n        const web3 = await getWeb3(); // Use web3 to get the user's accounts.\n\n        const accounts = await web3.eth.getAccounts(); // Get the contract instance.\n\n        const networkId = await web3.eth.net.getId();\n        console.log(networkId);\n        const deployedNetwork = FilesStorageContract.networks[networkId];\n        const instance = new web3.eth.Contract(FilesStorageContract.abi, deployedNetwork && deployedNetwork.address);\n        var contractFunctions = new ContractFunctions(web3, accounts, instance);\n        var isOwner = await contractFunctions.isOwner();\n        var isApprovedEntity = await contractFunctions.isApprovedEntity();\n        var entityName = await contractFunctions.getMyEntityName();\n        nom = contractFunctions.getMyEntityName(); // Set web3, accounts, and contract to the state, and then proceed with an\n        // example of interacting with the contract's methods.\n\n        this.setState({\n          web3: new ContractFunctions(web3, accounts, instance),\n          isOwner: isOwner,\n          isApprovedEntity: isApprovedEntity,\n          entityName: entityName\n        }\n        /*, this.runExample*/\n        );\n      } catch (error) {\n        // Catch any errors for any of the above operations.\n        alert(\"Failed to load web3, accounts, or contract. Check console for details.\");\n        console.error(error);\n      }\n    };\n\n    this.checkListener = async hash => {\n      let response = await this.props.functions.getInforme(hash);\n      this.setState({\n        response: response\n      });\n    };\n\n    this.checkFromFileListener = async file => {\n      let response = await this.props.functions.getInformeFromFile(file);\n      this.setState({\n        response: response\n      });\n    };\n\n    this.state = {\n      response: null,\n      listener: this.checkListener\n    };\n  }\n\n  render() {\n    let label, input, button, message;\n\n    if (this.state.listener == this.checkListener) {\n      label = \"Hash:\";\n      input = React.createElement(\"input\", {\n        type: \"text\",\n        id: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 81\n        },\n        __self: this\n      });\n      button = React.createElement(\"button\", {\n        className: \"buttonForm\",\n        onClick: () => this.state.listener(document.getElementById('content').value),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82\n        },\n        __self: this\n      }, \"Entrenar\");\n    } else {\n      label = \"Archivo:\";\n      input = React.createElement(\"input\", {\n        type: \"file\",\n        id: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 86\n        },\n        __self: this\n      });\n      button = React.createElement(\"button\", {\n        className: \"buttonForm\",\n        onClick: () => this.state.listener(document.getElementById('content').files[0]),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87\n        },\n        __self: this\n      }, \"Entrenar\");\n    }\n\n    if (this.state.response != null) {\n      var precision = 100; // 2 decimals\n\n      var randomnum = 0.8;\n      randomnum = (Math.random() * (1 - randomnum) + randomnum).toFixed(4);\n\n      if (this.state.response.informe.exists) {\n        commit.data = commit.data + nom + \": \" + randomnum + \"\\n\";\n        const url = \"https://ipfs.infura.io/ipfs/\" + this.state.response.informe.CID;\n        message = React.createElement(\"div\", {\n          className: \"textForm\",\n          style: {\n            fontSize: \"15px\",\n            width: \"100%\"\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 99\n          },\n          __self: this\n        }, React.createElement(\"h3\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 100\n          },\n          __self: this\n        }, \"Se ejecutar\\xE1 el siguiente modelo:\"), React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }, \"T\\xEDtulo:\"), \" \", this.state.response.informe.title, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 101\n          },\n          __self: this\n        }), React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }, \"Usuario del modelo:\"), \" \", this.state.response.entidad, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 102\n          },\n          __self: this\n        }), React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }, \"Hash:\"), \" \", this.state.response.informe.hashValue, React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 103\n          },\n          __self: this\n        }), React.createElement(\"b\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, \"URL:\"), \" \", React.createElement(\"a\", {\n          href: url,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }, url), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        }), React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 104\n          },\n          __self: this\n        })); // message = \n        //     <table style= {{width:'70%'}} >\n        //         <tr>\n        //             <th>TÃ­tulo</th>\n        //             <th>Owner</th>\n        //             <th>Hash</th>\n        //             <th>URL</th>\n        //         </tr>\n        //         <tr>\n        //             <td>{this.state.response.title}</td>\n        //             <td>{this.state.response.owner}</td>\n        //             <td>{this.state.response.hashValue}</td>\n        //             <td><a href={url}>{url}</a></td>\n        //         </tr>\n        //     </table>;\n      } else {\n        message = React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }, \"No se ha encontrado el modelo.\", React.createElement(\"br\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 122\n          },\n          __self: this\n        }));\n      }\n    }\n\n    return React.createElement(\"div\", {\n      className: \"maincomp registerform\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 129\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, \"Entrenar modelo\"), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      className: \"textForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, label), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }), input, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 135\n      },\n      __self: this\n    }), button, React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 137\n      },\n      __self: this\n    }), React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 139\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"textForm\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 140\n      },\n      __self: this\n    }, message));\n  }\n\n}\n\nexport default CheckInforme;","map":{"version":3,"sources":["/home/ubuntu/TFG_FL/client/src/CheckInforme.js"],"names":["React","Component","FilesStorageContract","commit","getWeb3","asmCrypto","IPFS","BrowserRouter","Router","Link","Route","ContractFunctions","RegistrarInforme","RegistrarEntidad","SearchInformes","AdminPanel","SideNav","Toggle","Nav","NavItem","NavIcon","NavText","registerIcon","checkIcon","listIcon","data","nom","CheckInforme","state","web3","componentDidMount","accounts","eth","getAccounts","networkId","net","getId","console","log","deployedNetwork","networks","instance","Contract","abi","address","contractFunctions","isOwner","isApprovedEntity","entityName","getMyEntityName","setState","error","alert","checkListener","hash","response","props","functions","getInforme","checkFromFileListener","file","getInformeFromFile","listener","render","label","input","button","message","document","getElementById","value","files","precision","randomnum","Math","random","toFixed","informe","exists","url","CID","fontSize","width","title","entidad","hashValue"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport FilesStorageContract from \"./contracts/FilesStorage.json\";\r\nimport commit from './resultados.json';\r\nimport getWeb3 from \"./getWeb3\";\r\nimport asmCrypto from \"asmcrypto-lite\";\r\nimport IPFS from \"ipfs-core\";\r\nimport { BrowserRouter as Router, Link, Route } from \"react-router-dom\";\r\nimport ContractFunctions from \"./ContractFunctions\";\r\nimport RegistrarInforme from \"./RegistrarInforme\";\r\nimport RegistrarEntidad from \"./RegistrarEntidad\";\r\nimport SearchInformes from \"./SearchInformes\"\r\nimport AdminPanel from \"./AdminPanel\"\r\nimport SideNav, { Toggle, Nav, NavItem, NavIcon, NavText } from '@trendmicro/react-sidenav';\r\nimport './sidenav.css';\r\nimport registerIcon from './icons/register.png'\r\nimport checkIcon from './icons/train.png'\r\nimport listIcon from './icons/list.png'\r\n\r\nvar data;\r\nvar nom;\r\n\r\nclass CheckInforme extends Component {\r\n\r\n   state = { web3: null };\r\n\r\n  componentDidMount = async () => {\r\n    try {\r\n      // Get network provider and web3 instance.\r\n      const web3 = await getWeb3();\r\n\r\n      // Use web3 to get the user's accounts.\r\n      const accounts = await web3.eth.getAccounts();\r\n\r\n      // Get the contract instance.\r\n      const networkId = await web3.eth.net.getId();\r\n      console.log(networkId);\r\n      const deployedNetwork = FilesStorageContract.networks[networkId];\r\n      const instance = new web3.eth.Contract(\r\n        FilesStorageContract.abi,\r\n        deployedNetwork && deployedNetwork.address,\r\n      );\r\n\r\n      var contractFunctions = new ContractFunctions(web3, accounts, instance);\r\n\r\n      var isOwner = await contractFunctions.isOwner();\r\n      var isApprovedEntity = await contractFunctions.isApprovedEntity();\r\n      var entityName = await contractFunctions.getMyEntityName();\r\n      nom = contractFunctions.getMyEntityName();\r\n\r\n      // Set web3, accounts, and contract to the state, and then proceed with an\r\n      // example of interacting with the contract's methods.\r\n      this.setState({ web3: new ContractFunctions(web3, accounts, instance), isOwner: isOwner, isApprovedEntity: isApprovedEntity, entityName: entityName }/*, this.runExample*/);\r\n    } catch (error) {\r\n      // Catch any errors for any of the above operations.\r\n      alert(\r\n        `Failed to load web3, accounts, or contract. Check console for details.`,\r\n      );\r\n      console.error(error);\r\n    }\r\n  };\r\n\r\n    checkListener = async (hash) => {\r\n        let response = await this.props.functions.getInforme(hash);\r\n        this.setState({response: response});\r\n    }\r\n\r\n    checkFromFileListener = async (file) => {\r\n        let response = await this.props.functions.getInformeFromFile(file);\r\n        this.setState({response: response});\r\n    }\r\n\r\n    state = {\r\n        response:null,\r\n        listener: this.checkListener\r\n    }\r\n\r\n    render() {\r\n        let label, input, button, message;\r\n        if (this.state.listener == this.checkListener) {\r\n            label = \"Hash:\";\r\n            input = <input type=\"text\" id=\"content\"></input>;\r\n            button = <button className=\"buttonForm\" onClick={() => this.state.listener(document.getElementById('content').value)}>\r\n                    Entrenar</button>;\r\n        } else {\r\n            label = \"Archivo:\";\r\n            input = <input type=\"file\" id=\"content\"></input>;\r\n            button = <button className=\"buttonForm\" onClick={() => this.state.listener(document.getElementById('content').files[0])}>\r\n                    Entrenar</button>;\r\n        }\r\n\r\n        if(this.state.response != null){\r\n        \r\n        \tvar precision = 100; // 2 decimals\r\n        \tvar randomnum = 0.8;\r\n\t\trandomnum = (Math.random() * (1 - randomnum) + randomnum).toFixed(4);\r\n            if(this.state.response.informe.exists){\r\n            commit.data = commit.data+nom+\": \"+randomnum+\"\\n\";\r\n                const url = \"https://ipfs.infura.io/ipfs/\" + this.state.response.informe.CID;\r\n                message = <div className=\"textForm\" style={{fontSize: \"15px\", width:\"100%\"}}>\r\n                    <h3>Se ejecutarÃ¡ el siguiente modelo:</h3>\r\n                    <b>TÃ­tulo:</b> {this.state.response.informe.title}<br/>\r\n                    <b>Usuario del modelo:</b> {this.state.response.entidad}<br/>\r\n                    <b>Hash:</b> {this.state.response.informe.hashValue}<br/>\r\n                    <b>URL:</b> <a href={url}>{url}</a><br/><br/>\r\n                </div>\r\n                // message = \r\n                //     <table style= {{width:'70%'}} >\r\n                //         <tr>\r\n                //             <th>TÃ­tulo</th>\r\n                //             <th>Owner</th>\r\n                //             <th>Hash</th>\r\n                //             <th>URL</th>\r\n                //         </tr>\r\n                //         <tr>\r\n                //             <td>{this.state.response.title}</td>\r\n                //             <td>{this.state.response.owner}</td>\r\n                //             <td>{this.state.response.hashValue}</td>\r\n                //             <td><a href={url}>{url}</a></td>\r\n                //         </tr>\r\n                //     </table>;\r\n            } else {\r\n                message = <div>No se ha encontrado el modelo.<br/></div>\r\n            }\r\n        }\r\n        \r\n\r\n\r\n        return(\r\n        <div className=\"maincomp registerform\">\r\n            <h1>Entrenar modelo</h1>\r\n            <br></br>\r\n            <span className=\"textForm\">{label}</span>\r\n            <br></br>\r\n            {input}\r\n            <br></br><br></br>\r\n            {button}\r\n            <br></br>\r\n            \r\n            <br></br>\r\n            <div className=\"textForm\">{message}</div>\r\n        </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default CheckInforme;\r\n"]},"metadata":{},"sourceType":"module"}