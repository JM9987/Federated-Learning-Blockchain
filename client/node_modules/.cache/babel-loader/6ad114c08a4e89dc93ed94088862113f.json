{"ast":null,"code":"'use strict';\n\nconst multicodec = require('multicodec');\n/**\n * @param {string} name\n * @returns {number}\n */\n\n\nconst nameToCodec = name => multicodec[name.toUpperCase().replace(/-/g, '_')];\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').IPLD} config.ipld\n * @param {import('.').Pin} config.pin\n * @param {import('.').Preload} config.preload\n * @param {import('.').GCLock} config.gcLock\n */\n\n\nmodule.exports = ({\n  ipld,\n  pin,\n  gcLock,\n  preload\n}) => {\n  /**\n   * Store an IPLD format node\n   *\n   * @param {Object} dagNode\n   * @param {PutOptions & AbortOptions} [options]\n   * @returns {Promise<CID>}\n   * @example\n   * ```js\n   * const obj = { simple: 'object' }\n   * const cid = await ipfs.dag.put(obj, { format: 'dag-cbor', hashAlg: 'sha3-512' })\n   *\n   * console.log(cid.toString())\n   * // zBwWX9ecx5F4X54WAjmFLErnBT6ByfNxStr5ovowTL7AhaUR98RWvXPS1V3HqV1qs3r5Ec5ocv7eCdbqYQREXNUfYNuKG\n   * ```\n   */\n  async function put(dagNode, options = {}) {\n    const _readEncodingOptions = readEncodingOptions(options),\n          cidVersion = _readEncodingOptions.cidVersion,\n          format = _readEncodingOptions.format,\n          hashAlg = _readEncodingOptions.hashAlg;\n\n    const release = options.pin ? await gcLock.readLock() : null;\n\n    try {\n      const cid = await ipld.put(dagNode, format, {\n        hashAlg,\n        cidVersion,\n        signal: options.signal\n      });\n\n      if (options.pin) {\n        await pin.add(cid, {\n          lock: false\n        });\n      }\n\n      if (options.preload !== false) {\n        preload(cid);\n      }\n\n      return cid;\n    } finally {\n      if (release) {\n        release();\n      }\n    }\n  }\n\n  return withTimeoutOption(put);\n};\n/**\n *\n * @param {PutOptions} options\n */\n\n\nconst readEncodingOptions = options => {\n  if (options.cid && (options.format || options.hashAlg)) {\n    throw new Error('Can\\'t put dag node. Please provide either `cid` OR `format` and `hashAlg` options.');\n  } else if (options.format && !options.hashAlg || !options.format && options.hashAlg) {\n    throw new Error('Can\\'t put dag node. Please provide `format` AND `hashAlg` options.');\n  }\n\n  const _ref = options.cid != null ? {\n    format: options.cid.code,\n    hashAlg: undefined\n  } : encodingCodes({ ...defaultCIDOptions,\n    ...options\n  }),\n        hashAlg = _ref.hashAlg,\n        format = _ref.format;\n\n  const cidVersion = readVersion({ ...options,\n    format,\n    hashAlg\n  });\n  return {\n    cidVersion,\n    format,\n    hashAlg\n  };\n};\n/**\n *\n * @param {Object} options\n * @param {number|string} options.format\n * @param {number|string} [options.hashAlg]\n */\n\n\nconst encodingCodes = ({\n  format,\n  hashAlg\n}) => ({\n  format: typeof format === 'string' ? nameToCodec(format) : format,\n  hashAlg: typeof hashAlg === 'string' ? nameToCodec(hashAlg) : hashAlg\n});\n/**\n * Figures out what version of CID should be used given the options.\n *\n * @param {Object} options\n * @param {0|1} [options.version]\n * @param {CID} [options.cid]\n * @param {number} [options.format]\n * @param {number} [options.hashAlg]\n */\n\n\nconst readVersion = ({\n  version,\n  cid,\n  format,\n  hashAlg\n}) => {\n  // If version is passed just use that.\n  if (typeof version === 'number') {\n    return version; // If cid is provided use version field from it.\n  } else if (cid) {\n    return cid.version; // If it's dag-pb nodes use version 0\n  } else if (format === multicodec.DAG_PB && hashAlg === multicodec.SHA2_256) {\n    return 0;\n  } else {\n    // Otherwise use version 1\n    return 1;\n  }\n};\n/** @type {WithCIDOptions} */\n\n\nconst defaultCIDOptions = {\n  format: multicodec.DAG_CBOR,\n  hashAlg: multicodec.SHA2_256\n};\n/**\n * @typedef {PutWith & OtherPutOptions} PutOptions\n * @typedef {WithCID | WithCIDOptions} PutWith\n *\n *\n * @typedef {Object} WithCID\n * @property {CID} [cid]\n * // Note: We still stil need to reserve these fields otherwise it implies\n * // that those fields can still be there and have very different types.\n * @property {undefined} [format]\n * @property {undefined} [hashAlg]\n * @property {undefined} [version]\n *\n * @typedef {Object} WithCIDOptions\n * @property {undefined} [cid]\n * @property {string|number} format\n * @property {string|number} hashAlg\n * @property {0|1} [version]\n *\n * @typedef {Object} OtherPutOptions\n * @property {boolean} [pin=false]\n * @property {boolean} [preload=false]\n *\n * @typedef {import('.').CID} CID\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}