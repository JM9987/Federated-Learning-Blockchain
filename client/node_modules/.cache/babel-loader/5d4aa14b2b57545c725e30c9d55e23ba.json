{"ast":null,"code":"'use strict';\n\nconst _require = require('events'),\n      EventEmitter = _require.EventEmitter;\n\nconst multiaddr = require('multiaddr');\n/**\n * @typedef {import('multiaddr')} Multiaddr\n * @typedef {import('libp2p-interfaces/src/transport/types').Listener} Listener\n */\n\n/**\n * @param {import('../')} libp2p\n * @returns {Listener} a transport listener\n */\n\n\nmodule.exports = libp2p => {\n  const listeningAddrs = new Map();\n  /**\n   * Add swarm handler and listen for incoming connections\n   *\n   * @param {Multiaddr} addr\n   * @returns {Promise<void>}\n   */\n\n  async function listen(addr) {\n    const addrString = String(addr).split('/p2p-circuit').find(a => a !== '');\n    const relayConn = await libp2p.dial(multiaddr(addrString));\n    const relayedAddr = relayConn.remoteAddr.encapsulate('/p2p-circuit');\n    listeningAddrs.set(relayConn.remotePeer.toB58String(), relayedAddr);\n    listener.emit('listening');\n  }\n  /**\n   * Get fixed up multiaddrs\n   *\n   * NOTE: This method will grab the peers multiaddrs and expand them such that:\n   *\n   * a) If it's an existing /p2p-circuit address for a specific relay i.e.\n   * `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit` this method will expand the\n   * address to `/ip4/0.0.0.0/tcp/0/ipfs/QmRelay/p2p-circuit/ipfs/QmPeer` where\n   * `QmPeer` is this peers id\n   * b) If it's not a /p2p-circuit address, it will encapsulate the address as a /p2p-circuit\n   * addr, such when dialing over a relay with this address, it will create the circuit using\n   * the encapsulated transport address. This is useful when for example, a peer should only\n   * be dialed over TCP rather than any other transport\n   *\n   * @returns {Multiaddr[]}\n   */\n\n\n  function getAddrs() {\n    const addrs = [];\n\n    for (const addr of listeningAddrs.values()) {\n      addrs.push(addr);\n    }\n\n    return addrs;\n  }\n  /** @type Listener */\n\n\n  const listener = Object.assign(new EventEmitter(), {\n    close: () => Promise.resolve(),\n    listen,\n    getAddrs\n  }); // Remove listeningAddrs when a peer disconnects\n\n  libp2p.connectionManager.on('peer:disconnect', connection => {\n    const deleted = listeningAddrs.delete(connection.remotePeer.toB58String());\n\n    if (deleted) {\n      // Announce listen addresses change\n      listener.emit('close');\n    }\n  });\n  return listener;\n};","map":null,"metadata":{},"sourceType":"script"}