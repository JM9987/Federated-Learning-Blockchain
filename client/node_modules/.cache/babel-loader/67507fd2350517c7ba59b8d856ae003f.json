{"ast":null,"code":"'use strict';\n\nconst noop = () => {};\n\nconst topologySymbol = Symbol.for('@libp2p/js-interfaces/topology');\n/**\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * @typedef {Object} Options\n * @property {number} [min=0] - minimum needed connections.\n * @property {number} [max=Infinity] - maximum needed connections.\n * @property {Handlers} [handlers]\n *\n * @typedef {Object} Handlers\n * @property {(peerId: PeerId, conn: Connection) => void} [onConnect] - protocol \"onConnect\" handler\n * @property {(peerId: PeerId, error?:Error) => void} [onDisconnect] - protocol \"onDisconnect\" handler\n *\n * @typedef {import('../connection/connection')} Connection\n */\n\nclass Topology {\n  /**\n   * @param {Options} options\n   */\n  constructor({\n    min = 0,\n    max = Infinity,\n    handlers = {}\n  }) {\n    this.min = min;\n    this.max = max; // Handlers\n\n    this._onConnect = handlers.onConnect || noop;\n    this._onDisconnect = handlers.onDisconnect || noop;\n    /**\n     * Set of peers that support the protocol.\n     *\n     * @type {Set<string>}\n     */\n\n    this.peers = new Set();\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Topology';\n  }\n\n  get [topologySymbol]() {\n    return true;\n  }\n  /**\n   * Checks if the given value is a Topology instance.\n   *\n   * @param {any} other\n   * @returns {other is Topology}\n   */\n\n\n  static isTopology(other) {\n    return Boolean(other && other[topologySymbol]);\n  }\n\n  set registrar(registrar) {\n    // eslint-disable-line\n    this._registrar = registrar;\n  }\n  /**\n   * Notify about peer disconnected event.\n   *\n   * @param {PeerId} peerId\n   * @returns {void}\n   */\n\n\n  disconnect(peerId) {\n    this._onDisconnect(peerId);\n  }\n\n}\n\nmodule.exports = Topology;","map":null,"metadata":{},"sourceType":"script"}