{"ast":null,"code":"'use strict';\n\nconst _require = require('./utils'),\n      isValidMultiaddr = _require.isValidMultiaddr;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').Repo} config.repo\n */\n\n\nmodule.exports = ({\n  repo\n}) => {\n  /**\n   * Remove a peer address from the bootstrap list\n   *\n   * @param {Multiaddr} multiaddr - The address of a network peer\n   * @param {AbortOptions} options\n   * @returns {Promise<Peers>}\n   * @example\n   * ```js\n   * const res = await ipfs.bootstrap.list()\n   * console.log(res.Peers)\n   * // Logs:\n   * // [address1, address2, ...]\n   * ```\n   */\n  async function rm(multiaddr, options = {}) {\n    if (!isValidMultiaddr(multiaddr)) {\n      throw new Error(\"\".concat(multiaddr, \" is not a valid Multiaddr\"));\n    }\n\n    const config = await repo.config.getAll(options);\n    config.Bootstrap = (config.Bootstrap || []).filter(ma => ma.toString() !== multiaddr.toString());\n    await repo.config.replace(config);\n    return {\n      Peers: [multiaddr]\n    };\n  }\n\n  return withTimeoutOption(rm);\n};\n/**\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('.').Multiaddr} Multiaddr\n * @typedef {import('./utils').Peers} Peers\n */","map":null,"metadata":{},"sourceType":"script"}