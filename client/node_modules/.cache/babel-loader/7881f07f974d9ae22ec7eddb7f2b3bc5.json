{"ast":null,"code":"'use strict';\n\nconst protons = require('protons');\n\nconst proto = protons(require('./dag.proto'));\n\nconst DAGLink = require('./dag-link/dagLink');\n\nconst DAGNode = require('./dag-node/dagNode');\n\nconst _require = require('./serialize'),\n      serializeDAGNodeLike = _require.serializeDAGNodeLike;\n\nconst genCid = require('./genCid');\n\nexports = module.exports;\nexports.codec = genCid.codec;\nexports.defaultHashAlg = genCid.defaultHashAlg;\n/**\n * Calculate the CID of the binary blob.\n *\n * @param {Object} binaryBlob - Encoded IPLD Node\n * @param {Object} [userOptions] - Options to create the CID\n * @param {number} [userOptions.cidVersion=1] - CID version number\n * @param {string} [UserOptions.hashAlg] - Defaults to the defaultHashAlg of the format\n * @returns {Promise.<CID>}\n */\n\nconst cid = (binaryBlob, userOptions) => {\n  return genCid.cid(binaryBlob, userOptions);\n};\n/**\n * Serialize internal representation into a binary PB block.\n *\n * @param {Object} node - Internal representation of a CBOR block\n * @returns {Uint8Array} - The encoded binary representation\n */\n\n\nconst serialize = node => {\n  if (DAGNode.isDAGNode(node)) {\n    return node.serialize();\n  } else {\n    return serializeDAGNodeLike(node.Data, node.Links);\n  }\n};\n/**\n * Deserialize PB block into the internal representation.\n *\n * @param {Uint8Array} buffer - Binary representation of a PB block\n * @returns {Object} - An object that conforms to the IPLD Data Model\n */\n\n\nconst deserialize = buffer => {\n  const pbn = proto.PBNode.decode(buffer);\n  const links = pbn.Links.map(link => {\n    return new DAGLink(link.Name, link.Tsize, link.Hash);\n  });\n  const data = pbn.Data == null ? new Uint8Array(0) : pbn.Data;\n  return new DAGNode(data, links, buffer.byteLength);\n};\n\nexports.serialize = serialize;\nexports.deserialize = deserialize;\nexports.cid = cid;","map":null,"metadata":{},"sourceType":"script"}