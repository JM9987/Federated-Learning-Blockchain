{"ast":null,"code":"'use strict';\n\nconst _require = require('./utils'),\n      cleanCid = _require.cleanCid;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').BlockService} config.blockService\n * @param {import('.').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  blockService,\n  preload\n}) => {\n  /**\n   * Get a raw IPFS block.\n   *\n   * @param {CID | string | Uint8Array} cid - A CID that corresponds to the desired block\n   * @param {GetOptions & AbortOptions} [options]\n   * @returns {Promise<IPLDBlock>} - A Block type object, containing both the data and the hash of the block\n   *\n   * @example\n   * ```js\n   * const block = await ipfs.block.get(cid)\n   * console.log(block.data)\n   * ```\n   */\n  async function get(cid, options = {}) {\n    // eslint-disable-line require-await\n    cid = cleanCid(cid);\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    return blockService.get(cid, options);\n  }\n\n  return withTimeoutOption(get);\n};\n/**\n * @typedef {Object} GetOptions\n * @property {boolean} [preload=true]\n *\n * @typedef {import('.').AbortOptions} AbortOptions\n * @typedef {import('.').CID} CID\n * @typedef {import('.').IPLDBlock} IPLDBlock\n */","map":null,"metadata":{},"sourceType":"script"}