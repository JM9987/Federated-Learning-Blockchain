{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/ubuntu/TFG_FL/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('libp2p:ping'), {\n  error: debug('libp2p:ping:err')\n});\n\nconst errCode = require('err-code');\n\nconst crypto = require('libp2p-crypto');\n\nconst _require = require('it-pipe'),\n      pipe = _require.pipe;\n\nconst _require2 = require('it-buffer'),\n      toBuffer = _require2.toBuffer;\n\nconst _require3 = require('streaming-iterables'),\n      collect = _require3.collect,\n      take = _require3.take;\n\nconst equals = require('uint8arrays/equals');\n\nconst _require4 = require('./constants'),\n      PROTOCOL = _require4.PROTOCOL,\n      PING_LENGTH = _require4.PING_LENGTH;\n/**\n * @typedef {import('../')} Libp2p\n * @typedef {import('multiaddr')} Multiaddr\n * @typedef {import('peer-id')} PeerId\n */\n\n/**\n * Ping a given peer and wait for its response, getting the operation latency.\n *\n * @param {Libp2p} node\n * @param {PeerId|Multiaddr} peer\n * @returns {Promise<number>}\n */\n\n\nasync function ping(node, peer) {\n  // @ts-ignore multiaddr might not have toB58String\n  log('dialing %s to %s', PROTOCOL, peer.toB58String ? peer.toB58String() : peer);\n\n  const _ref = await node.dialProtocol(peer, PROTOCOL),\n        stream = _ref.stream;\n\n  const start = Date.now();\n  const data = crypto.randomBytes(PING_LENGTH);\n\n  const _ref2 = await pipe([data], stream, stream => take(1, stream), toBuffer, collect),\n        _ref3 = _slicedToArray(_ref2, 1),\n        result = _ref3[0];\n\n  const end = Date.now();\n\n  if (!equals(data, result)) {\n    throw errCode(new Error('Received wrong ping ack'), 'ERR_WRONG_PING_ACK');\n  }\n\n  return end - start;\n}\n/**\n * Subscribe ping protocol handler.\n *\n * @param {Libp2p} node\n */\n\n\nfunction mount(node) {\n  node.handle(PROTOCOL, ({\n    stream\n  }) => pipe(stream, stream));\n}\n/**\n * Unsubscribe ping protocol handler.\n *\n * @param {Libp2p} node\n */\n\n\nfunction unmount(node) {\n  node.unhandle(PROTOCOL);\n}\n\nexports = module.exports = ping;\nexports.mount = mount;\nexports.unmount = unmount;","map":null,"metadata":{},"sourceType":"script"}