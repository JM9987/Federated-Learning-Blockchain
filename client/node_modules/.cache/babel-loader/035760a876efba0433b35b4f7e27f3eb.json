{"ast":null,"code":"'use strict';\n\nvar _slicedToArray = require(\"/home/ubuntu/Codigo_Javier/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  network\n}) => {\n  /**\n   * Local addresses this node is listening on.\n   *\n   * @param {PeersOptions & AbortOptions} [options]\n   * @returns {Promise<PeerConnection[]>}\n   */\n  async function peers(options = {}) {\n    const _ref = await network.use(options),\n          libp2p = _ref.libp2p;\n\n    const verbose = options.v || options.verbose;\n    const peers = [];\n\n    for (const _ref2 of libp2p.connections) {\n      var _ref3 = _slicedToArray(_ref2, 2);\n\n      const peerId = _ref3[0];\n      const connections = _ref3[1];\n\n      for (const connection of connections) {\n        const tupple = {\n          addr: connection.remoteAddr,\n          peer: peerId\n        };\n\n        if (verbose || options.direction) {\n          tupple.direction = connection.stat.direction;\n        }\n\n        if (verbose) {\n          tupple.muxer = connection.stat.multiplexer;\n          tupple.latency = 'n/a';\n        }\n\n        peers.push(tupple);\n      }\n    }\n\n    return peers;\n  }\n\n  return withTimeoutOption(peers);\n};\n/**\n * @typedef {Object} PeerConnection\n * @property {Multiaddr} addr\n * @property {string} peer\n * @property {string} [latency]\n * @property {string} [muxer]\n * @property {number} [direction]\n *\n * @typedef {Object} PeersOptions\n * @property {boolean} [direction=false]\n * @property {boolean} [streams=false]\n * @property {boolean} [verbose=false]\n * @property {boolean} [v=false]\n * @property {boolean} [latency=false]\n *\n * @typedef {import('.').Multiaddr} Multiaddr\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}