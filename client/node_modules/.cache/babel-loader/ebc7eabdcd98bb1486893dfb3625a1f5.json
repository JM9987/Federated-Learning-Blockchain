{"ast":null,"code":"'use strict';\n\nconst exporter = require('ipfs-unixfs-exporter');\n\nconst toMfsPath = require('./utils/to-mfs-path');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {*} fsEntry\n * @returns {UnixFSEntry}\n */\n\n\nconst toOutput = fsEntry => {\n  /** @type FileType */\n  let type = 'file';\n  let size = fsEntry.node.size || fsEntry.node.length;\n  let mode;\n  let mtime;\n\n  if (fsEntry.unixfs) {\n    size = fsEntry.unixfs.fileSize();\n    type = fsEntry.unixfs.type;\n\n    if (fsEntry.unixfs.type === 'hamt-sharded-directory') {\n      type = 'directory';\n    }\n\n    mode = fsEntry.unixfs.mode;\n    mtime = fsEntry.unixfs.mtime;\n  }\n\n  const output = {\n    cid: fsEntry.cid,\n    name: fsEntry.name,\n    type,\n    size\n  };\n\n  if (mtime !== undefined) {\n    output.mtime = mtime;\n  }\n\n  if (mode !== undefined) {\n    output.mode = mode;\n  }\n\n  return output;\n};\n\nmodule.exports = context => {\n  /**\n   * List directories in the local mutable namespace\n   *\n   * @param {string} path\n   * @param {AbortOptions} [options]\n   * @returns {AsyncIterable<UnixFSEntry>}\n   * @example\n   *\n   * ```js\n   * for await (const file of ipfs.files.ls('/screenshots')) {\n   *  console.log(file.name)\n   * }\n   * // 2018-01-22T18:08:46.775Z.png\n   * // 2018-01-22T18:08:49.184Z.png\n   * ```\n   */\n  async function* mfsLs(path, options = {}) {\n    const mfsPath = await toMfsPath(context, path, options);\n    const fsDir = await exporter(mfsPath.mfsPath, context.ipld); // single file/node\n\n    if (!fsDir.unixfs || !fsDir.unixfs.type.includes('directory')) {\n      yield toOutput(fsDir);\n      return;\n    } // directory, perhaps sharded\n\n\n    for await (const fsEntry of fsDir.content(options)) {\n      yield toOutput(fsEntry);\n    }\n  }\n\n  return withTimeoutOption(mfsLs);\n};\n/**\n * @typedef {import('cids')} CID\n * @typedef {import('../../utils').AbortOptions} AbortOptions\n *\n * @typedef {object} UnixTimeObj\n * @property {number} secs - the number of seconds since (positive) or before\n * (negative) the Unix Epoch began\n * @property {number} [nsecs] - the number of nanoseconds since the last full\n * second.\n *\n * @typedef {'file'|'directory'} FileType\n *\n * @typedef {object} UnixFSEntry\n * @property {CID} cid\n * @property {string} name\n * @property {number} [mode]\n * @property {UnixTimeObj} [mtime]\n * @property {number} size\n * @property {FileType} type\n */","map":null,"metadata":{},"sourceType":"script"}