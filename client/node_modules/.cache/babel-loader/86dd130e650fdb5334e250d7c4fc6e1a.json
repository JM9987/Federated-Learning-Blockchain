{"ast":null,"code":"'use strict';\n\nconst mafmt = require('mafmt');\n\nconst _require = require('./constants'),\n      CODE_CIRCUIT = _require.CODE_CIRCUIT,\n      CODE_P2P = _require.CODE_P2P,\n      CODE_TCP = _require.CODE_TCP,\n      CODE_WS = _require.CODE_WS,\n      CODE_WSS = _require.CODE_WSS;\n\nmodule.exports = {\n  all: multiaddrs => multiaddrs.filter(ma => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false;\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P);\n    return mafmt.WebSockets.matches(testMa) || mafmt.WebSocketsSecure.matches(testMa);\n  }),\n  dnsWss: multiaddrs => multiaddrs.filter(ma => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false;\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P);\n    return mafmt.WebSocketsSecure.matches(testMa) && mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));\n  }),\n  dnsWsOrWss: multiaddrs => multiaddrs.filter(ma => {\n    if (ma.protoCodes().includes(CODE_CIRCUIT)) {\n      return false;\n    }\n\n    const testMa = ma.decapsulateCode(CODE_P2P); // WS\n\n    if (mafmt.WebSockets.matches(testMa)) {\n      return mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WS));\n    } // WSS\n\n\n    return mafmt.WebSocketsSecure.matches(testMa) && mafmt.DNS.matches(testMa.decapsulateCode(CODE_TCP).decapsulateCode(CODE_WSS));\n  })\n};","map":null,"metadata":{},"sourceType":"script"}