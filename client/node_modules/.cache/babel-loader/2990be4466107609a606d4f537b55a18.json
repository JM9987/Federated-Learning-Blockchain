{"ast":null,"code":"/* eslint-env browser */\n'use strict';\n\nconst _require = require('p-queue'),\n      PQueue = _require.default;\n\nconst HTTP = require('ipfs-utils/src/http');\n\nconst debug = require('debug');\n\nconst log = Object.assign(debug('ipfs:preload'), {\n  error: debug('ipfs:preload:error')\n}); // browsers limit concurrent connections per host,\n// we don't want preload calls to exhaust the limit (~6)\n\nconst httpQueue = new PQueue({\n  concurrency: 4\n});\n\nmodule.exports = function preload(url, options = {}) {\n  log(url);\n  return httpQueue.add(async () => {\n    const res = await HTTP.post(url, {\n      signal: options.signal\n    }); // @ts-ignore\n\n    const reader = res.body.getReader();\n\n    try {\n      while (true) {\n        const _ref = await reader.read(),\n              done = _ref.done;\n\n        if (done) return; // Read to completion but do not cache\n      }\n    } finally {\n      reader.releaseLock();\n    }\n  });\n};","map":null,"metadata":{},"sourceType":"script"}