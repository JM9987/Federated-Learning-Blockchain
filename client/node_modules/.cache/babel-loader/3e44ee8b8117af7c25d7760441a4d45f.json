{"ast":null,"code":"'use strict';\n\nconst errcode = require('err-code');\n/** @typedef {import('../types').EventEmitterFactory} Events */\n\n/** @type Events */\n\n\nconst EventEmitter = require('events');\n\nconst PeerId = require('peer-id');\n\nconst AddressBook = require('./address-book');\n\nconst KeyBook = require('./key-book');\n\nconst MetadataBook = require('./metadata-book');\n\nconst ProtoBook = require('./proto-book');\n\nconst _require = require('../errors'),\n      ERR_INVALID_PARAMETERS = _require.codes.ERR_INVALID_PARAMETERS;\n/**\n * @typedef {import('./address-book').Address} Address\n */\n\n/**\n * @extends {EventEmitter}\n *\n * @fires PeerStore#peer Emitted when a new peer is added.\n * @fires PeerStore#change:protocols Emitted when a known peer supports a different set of protocols.\n * @fires PeerStore#change:multiaddrs Emitted when a known peer has a different set of multiaddrs.\n * @fires PeerStore#change:pubkey Emitted emitted when a peer's public key is known.\n * @fires PeerStore#change:metadata Emitted when the known metadata of a peer change.\n */\n\n\nclass PeerStore extends EventEmitter {\n  /**\n   * Peer object\n   *\n   * @typedef {Object} Peer\n   * @property {PeerId} id peer's peer-id instance.\n   * @property {Address[]} addresses peer's addresses containing its multiaddrs and metadata.\n   * @property {string[]} protocols peer's supported protocols.\n   * @property {Map<string, Uint8Array>|undefined} metadata peer's metadata map.\n   */\n\n  /**\n   * Responsible for managing known peers, as well as their addresses, protocols and metadata.\n   *\n   * @param {object} options\n   * @param {PeerId} options.peerId\n   * @class\n   */\n  constructor({\n    peerId\n  }) {\n    super();\n    this._peerId = peerId;\n    /**\n     * AddressBook containing a map of peerIdStr to Address.\n     */\n\n    this.addressBook = new AddressBook(this);\n    /**\n     * KeyBook containing a map of peerIdStr to their PeerId with public keys.\n     */\n\n    this.keyBook = new KeyBook(this);\n    /**\n     * MetadataBook containing a map of peerIdStr to their metadata Map.\n     */\n\n    this.metadataBook = new MetadataBook(this);\n    /**\n     * ProtoBook containing a map of peerIdStr to supported protocols.\n     */\n\n    this.protoBook = new ProtoBook(this);\n  }\n  /**\n   * Start the PeerStore.\n   */\n\n\n  start() {}\n  /**\n   * Stop the PeerStore.\n   */\n\n\n  stop() {}\n  /**\n   * Get all the stored information of every peer known.\n   *\n   * @returns {Map<string, Peer>}\n   */\n\n\n  get peers() {\n    const storedPeers = new Set([...this.addressBook.data.keys(), ...this.keyBook.data.keys(), ...this.protoBook.data.keys(), ...this.metadataBook.data.keys()]); // Remove self peer if present\n\n    this._peerId && storedPeers.delete(this._peerId.toB58String());\n    const peersData = new Map();\n    storedPeers.forEach(idStr => {\n      peersData.set(idStr, this.get(PeerId.createFromCID(idStr)));\n    });\n    return peersData;\n  }\n  /**\n   * Delete the information of the given peer in every book.\n   *\n   * @param {PeerId} peerId\n   * @returns {boolean} true if found and removed\n   */\n\n\n  delete(peerId) {\n    const addressesDeleted = this.addressBook.delete(peerId);\n    const keyDeleted = this.keyBook.delete(peerId);\n    const protocolsDeleted = this.protoBook.delete(peerId);\n    const metadataDeleted = this.metadataBook.delete(peerId);\n    return addressesDeleted || keyDeleted || protocolsDeleted || metadataDeleted;\n  }\n  /**\n   * Get the stored information of a given peer.\n   *\n   * @param {PeerId} peerId\n   * @returns {Peer|undefined}\n   */\n\n\n  get(peerId) {\n    if (!PeerId.isPeerId(peerId)) {\n      throw errcode(new Error('peerId must be an instance of peer-id'), ERR_INVALID_PARAMETERS);\n    }\n\n    const id = this.keyBook.data.get(peerId.toB58String());\n    const addresses = this.addressBook.get(peerId);\n    const metadata = this.metadataBook.get(peerId);\n    const protocols = this.protoBook.get(peerId);\n\n    if (!id && !addresses && !metadata && !protocols) {\n      return undefined;\n    }\n\n    return {\n      id: id || peerId,\n      addresses: addresses || [],\n      protocols: protocols || [],\n      metadata: metadata\n    };\n  }\n\n}\n\nmodule.exports = PeerStore;","map":null,"metadata":{},"sourceType":"script"}