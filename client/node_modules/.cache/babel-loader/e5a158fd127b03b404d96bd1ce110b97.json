{"ast":null,"code":"'use strict';\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n\nconst toCidAndPath = require('ipfs-core-utils/src/to-cid-and-path');\n/**\n * @param {Object} config\n * @param {import('.').IPLD} config.ipld\n * @param {import('.').Preload} config.preload\n */\n\n\nmodule.exports = ({\n  ipld,\n  preload\n}) => {\n  /**\n   * Enumerate all the entries in a graph\n   *\n   * @param {CID} ipfsPath - A DAG node that follows one of the supported IPLD formats\n   * @param {TreeOptions & AbortOptions} [options]\n   * @returns {AsyncIterable<string>}\n   * @example\n   * ```js\n   * // example obj\n   * const obj = {\n   *   a: 1,\n   *   b: [1, 2, 3],\n   *   c: {\n   *     ca: [5, 6, 7],\n   *     cb: 'foo'\n   *   }\n   * }\n   *\n   * const cid = await ipfs.dag.put(obj, { format: 'dag-cbor', hashAlg: 'sha2-256' })\n   * console.log(cid.toString())\n   * // zdpuAmtur968yprkhG9N5Zxn6MFVoqAWBbhUAkNLJs2UtkTq5\n   *\n   * const result = await ipfs.dag.tree('zdpuAmtur968yprkhG9N5Zxn6MFVoqAWBbhUAkNLJs2UtkTq5')\n   * console.log(result)\n   * // Logs:\n   * // a\n   * // b\n   * // b/0\n   * // b/1\n   * // b/2\n   * // c\n   * // c/ca\n   * // c/ca/0\n   * // c/ca/1\n   * // c/ca/2\n   * // c/cb\n   * ```\n   */\n  async function* tree(ipfsPath, options = {}) {\n    // eslint-disable-line require-await\n    const _toCidAndPath = toCidAndPath(ipfsPath),\n          cid = _toCidAndPath.cid,\n          path = _toCidAndPath.path;\n\n    if (path) {\n      options.path = path;\n    }\n\n    if (options.preload !== false) {\n      preload(cid);\n    }\n\n    yield* ipld.tree(cid, options.path, options);\n  }\n\n  return withTimeoutOption(tree);\n};\n/**\n * @typedef {Object} TreeOptions\n * @property {string} [path] - If `ipfsPath` is a `CID`, you may pass a path here\n * @property {boolean} [preload]\n *\n * @typedef {Object} TreeResult\n * @property {CID} cid - The last CID encountered during the traversal\n * @property {string} remainderPath - The path to the end of the IPFS path\n * inside the node referenced by the CID\n *\n * @typedef {import('.').CID} CID\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}