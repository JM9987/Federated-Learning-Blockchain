{"ast":null,"code":"'use strict';\n\nconst log = require('debug')('mss:handle');\n\nconst BufferList = require('bl/BufferList');\n\nconst multistream = require('./multistream');\n\nconst handshake = require('it-handshake');\n\nconst _require = require('./constants'),\n      PROTOCOL_ID = _require.PROTOCOL_ID;\n\nmodule.exports = async (stream, protocols) => {\n  protocols = Array.isArray(protocols) ? protocols : [protocols];\n\n  const _handshake = handshake(stream),\n        writer = _handshake.writer,\n        reader = _handshake.reader,\n        rest = _handshake.rest,\n        shakeStream = _handshake.stream;\n\n  while (true) {\n    const protocol = (await multistream.read(reader)).toString();\n    log('read \"%s\"', protocol);\n\n    if (protocol === PROTOCOL_ID) {\n      log('respond with \"%s\" for \"%s\"', PROTOCOL_ID, protocol);\n      multistream.write(writer, PROTOCOL_ID);\n      continue;\n    }\n\n    if (protocols.includes(protocol)) {\n      multistream.write(writer, protocol);\n      log('respond with \"%s\" for \"%s\"', protocol, protocol);\n      rest();\n      return {\n        stream: shakeStream,\n        protocol\n      };\n    }\n\n    if (protocol === 'ls') {\n      // <varint-msg-len><varint-proto-name-len><proto-name>\\n<varint-proto-name-len><proto-name>\\n\\n\n      multistream.write(writer, new BufferList(protocols.map(p => multistream.encode(p))));\n      log('respond with \"%s\" for %s', protocols, protocol);\n      continue;\n    }\n\n    multistream.write(writer, 'na');\n    log('respond with \"na\" for \"%s\"', protocol);\n  }\n};","map":null,"metadata":{},"sourceType":"script"}