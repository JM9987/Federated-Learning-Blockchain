{"ast":null,"code":"'use strict';\n\nconst CID = require('cids');\n\nconst errCode = require('err-code');\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n */\n\n\nmodule.exports = ({\n  network\n}) => {\n  /**\n   * Removes one or more CIDs from the wantlist\n   *\n   * @example\n   * ```JavaScript\n   * let list = await ipfs.bitswap.wantlist()\n   * console.log(list)\n   * // [ CID('QmHash') ]\n   *\n   * await ipfs.bitswap.unwant(cid)\n   *\n   * list = await ipfs.bitswap.wantlist()\n   * console.log(list)\n   * // []\n   * ```\n   *\n   * @param {CID | CID[]} cids - The CIDs to remove from the wantlist\n   * @param {AbortOptions} [options]\n   * @returns {Promise<void>} - A promise that resolves once the request is complete\n   */\n  async function unwant(cids, options) {\n    const _ref = await network.use(options),\n          bitswap = _ref.bitswap;\n\n    if (!Array.isArray(cids)) {\n      cids = [cids];\n    }\n\n    try {\n      cids = cids.map(cid => new CID(cid));\n    } catch (err) {\n      throw errCode(err, 'ERR_INVALID_CID');\n    }\n\n    return bitswap.unwant(cids, options);\n  }\n\n  return withTimeoutOption(unwant);\n};\n/**\n * @typedef {import('.').AbortOptions} AbortOptions\n */","map":null,"metadata":{},"sourceType":"script"}