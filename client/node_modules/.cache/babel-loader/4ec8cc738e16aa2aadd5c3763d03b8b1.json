{"ast":null,"code":"'use strict';\n\nconst exporter = require('ipfs-unixfs-exporter');\n\nconst _require = require('../utils'),\n      normalizeCidPath = _require.normalizeCidPath;\n\nconst withTimeoutOption = require('ipfs-core-utils/src/with-timeout-option');\n/**\n * @typedef {Object} Context\n * @property {import('.').IPLD} ipld\n * @property {import('.').Preload} preload\n *\n * @param {Context} context\n */\n\n\nmodule.exports = function ({\n  ipld,\n  preload\n}) {\n  /**\n   * Returns content of the file addressed by a valid IPFS Path or CID.\n   *\n   * @param {import('ipfs-core-types/src/root').IPFSPath} ipfsPath\n   * @param {import('ipfs-core-types/src/root').CatOptions} [options]\n   * @returns {AsyncIterable<Uint8Array>}\n   */\n  async function* cat(ipfsPath, options = {}) {\n    ipfsPath = normalizeCidPath(ipfsPath);\n\n    if (options.preload !== false) {\n      const pathComponents = ipfsPath.split('/');\n      preload(pathComponents[0]);\n    }\n\n    const file = await exporter(ipfsPath, ipld, options); // File may not have unixfs prop if small & imported with rawLeaves true\n\n    if (file.unixfs && file.unixfs.type.includes('dir')) {\n      throw new Error('this dag node is a directory');\n    }\n\n    if (!file.content) {\n      throw new Error('this dag node has no content');\n    }\n\n    yield* file.content(options);\n  }\n\n  return withTimeoutOption(cat);\n};","map":null,"metadata":{},"sourceType":"script"}