{"ast":null,"code":"'use strict';\n\nconst Service = require('../utils/service');\n/**\n * @param {Object} config\n * @param {import('.').NetworkService} config.network\n * @param {import('.').PeerId} config.peerId\n * @param {import('.').Repo} config.repo\n * @param {import('.').BlockService} config.blockService\n * @param {import('.').Print} config.print\n * @param {import('.').Preload} config.preload\n * @param {import('.').MFSPreload} config.mfsPreload\n * @param {import('.').IPNS} config.ipns\n * @param {import('.').Keychain} config.keychain\n * @param {import('.').Options} config.options\n */\n\n\nmodule.exports = ({\n  network,\n  preload,\n  peerId,\n  keychain,\n  repo,\n  ipns,\n  blockService,\n  mfsPreload,\n  print,\n  options\n}) => {\n  const start = async () => {\n    const _ref = await Service.start(network, {\n      peerId,\n      repo,\n      print,\n      options\n    }),\n          bitswap = _ref.bitswap,\n          libp2p = _ref.libp2p;\n\n    blockService.setExchange(bitswap);\n    await Promise.all([ipns.startOnline({\n      keychain,\n      libp2p,\n      peerId,\n      repo\n    }), preload.start(), mfsPreload.start()]);\n  };\n\n  return start;\n};","map":null,"metadata":{},"sourceType":"script"}